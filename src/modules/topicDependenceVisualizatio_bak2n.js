/* eslint-disable */
!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.topicDependenceVisualization=n():t.topicDependenceVisualization=n()}(window,(function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=86)}([function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function i(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(0),i=e(24),o=e(51),u=e(4),a=e(38),c=e(13),f=e(34),s=function(t){function n(e,r,i){var u=t.call(this)||this;switch(u.syncErrorValue=null,u.syncErrorThrown=!1,u.syncErrorThrowable=!1,u.isStopped=!1,arguments.length){case 0:u.destination=o.a;break;case 1:if(!e){u.destination=o.a;break}if("object"==typeof e){e instanceof n?(u.syncErrorThrowable=e.syncErrorThrowable,u.destination=e,e.add(u)):(u.syncErrorThrowable=!0,u.destination=new l(u,e));break}default:u.syncErrorThrowable=!0,u.destination=new l(u,e,r,i)}return u}return r.a(n,t),n.prototype[a.a]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(u.a),l=function(t){function n(n,e,r,u){var a,c=t.call(this)||this;c._parentSubscriber=n;var f=c;return Object(i.a)(e)?a=e:e&&(a=e.next,r=e.error,u=e.complete,e!==o.a&&(f=Object.create(e),Object(i.a)(f.unsubscribe)&&c.add(f.unsubscribe.bind(f)),f.unsubscribe=c.unsubscribe.bind(c))),c._context=f,c._next=a,c._error=r,c._complete=u,c}return r.a(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var n=this._parentSubscriber;c.a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?this.__tryOrSetError(n,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var n=this._parentSubscriber,e=c.a.useDeprecatedSynchronousErrorHandling;if(this._error)e&&n.syncErrorThrowable?(this.__tryOrSetError(n,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(n.syncErrorThrowable)e?(n.syncErrorValue=t,n.syncErrorThrown=!0):Object(f.a)(t),this.unsubscribe();else{if(this.unsubscribe(),e)throw t;Object(f.a)(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var n=this._parentSubscriber;if(this._complete){var e=function(){return t._complete.call(t._context)};c.a.useDeprecatedSynchronousErrorHandling&&n.syncErrorThrowable?(this.__tryOrSetError(n,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,n){try{t.call(this._context,n)}catch(t){if(this.unsubscribe(),c.a.useDeprecatedSynchronousErrorHandling)throw t;Object(f.a)(t)}},n.prototype.__tryOrSetError=function(t,n,e){if(!c.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{n.call(this._context,e)}catch(n){return c.a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=n,t.syncErrorThrown=!0,!0):(Object(f.a)(n),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(s)},function(t,n,e){"use strict";e.d(n,"a",(function(){return a})),e.d(n,"b",(function(){return c})),e.d(n,"c",(function(){return f}));var r=e(0),i=e(1),o=e(3),u=e(33),a=function(t){function n(n){var e=t.call(this)||this;return e.parent=n,e}return r.a(n,t),n.prototype._next=function(t){this.parent.notifyNext(t)},n.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},n}(i.a),c=(i.a,function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype.notifyNext=function(t){this.destination.next(t)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(){this.destination.complete()},n}(i.a));i.a;function f(t,n){if(!n.closed)return t instanceof o.a?t.subscribe(n):Object(u.a)(t)(n)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(49),i=e(1),o=e(38),u=e(51);var a=e(21),c=e(36),f=e(13),s=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r=this.operator,a=function(t,n,e){if(t){if(t instanceof i.a)return t;if(t[o.a])return t[o.a]()}return t||n||e?new i.a(t,n,e):new i.a(u.a)}(t,n,e);if(r?a.add(r.call(a,this.source)):a.add(this.source||f.a.useDeprecatedSynchronousErrorHandling&&!a.syncErrorThrowable?this._subscribe(a):this._trySubscribe(a)),f.a.useDeprecatedSynchronousErrorHandling&&a.syncErrorThrowable&&(a.syncErrorThrowable=!1,a.syncErrorThrown))throw a.syncErrorValue;return a},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){f.a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=n),Object(r.a)(t)?t.error(n):console.warn(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=l(n))((function(n,r){var i;i=e.subscribe((function(n){try{t(n)}catch(t){r(t),i&&i.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n=this.source;return n&&n.subscribe(t)},t.prototype[a.a]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 0===t.length?this:Object(c.b)(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=l(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function l(t){if(t||(t=f.a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e(7),i=e(48),o=e(24),u=e(39),a=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}var n;return t.prototype.unsubscribe=function(){var n;if(!this.closed){var e=this._parentOrParents,a=this._ctorUnsubscribe,f=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,e instanceof t)e.remove(this);else if(null!==e)for(var l=0;l<e.length;++l){e[l].remove(this)}if(Object(o.a)(f)){a&&(this._unsubscribe=void 0);try{f.call(this)}catch(t){n=t instanceof u.a?c(t.errors):[t]}}if(Object(r.a)(s)){l=-1;for(var h=s.length;++l<h;){var d=s[l];if(Object(i.a)(d))try{d.unsubscribe()}catch(t){n=n||[],t instanceof u.a?n=n.concat(c(t.errors)):n.push(t)}}}if(n)throw new u.a(n)}},t.prototype.add=function(n){var e=n;if(!n)return t.EMPTY;switch(typeof n){case"function":e=new t(n);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof t)){var r=e;(e=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+n+" added to Subscription.")}var i=e._parentOrParents;if(null===i)e._parentOrParents=this;else if(i instanceof t){if(i===this)return e;e._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return e;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[e]:o.push(e),e},t.prototype.remove=function(t){var n=this._subscriptions;if(n){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}},t.EMPTY=((n=new t).closed=!0,n),t}();function c(t){return t.reduce((function(t,n){return t.concat(n instanceof u.a?n.errors:n)}),[])}},function(t,n,e){"use strict";e.d(n,"b",(function(){return s})),e.d(n,"a",(function(){return l}));var r=e(0),i=e(3),o=e(1),u=e(4),a=e(22),c=e(69),f=e(38),s=function(t){function n(n){var e=t.call(this,n)||this;return e.destination=n,e}return r.a(n,t),n}(o.a),l=function(t){function n(){var n=t.call(this)||this;return n.observers=[],n.closed=!1,n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return r.a(n,t),n.prototype[f.a]=function(){return new s(this)},n.prototype.lift=function(t){var n=new h(this,this);return n.operator=t,n},n.prototype.next=function(t){if(this.closed)throw new a.a;if(!this.isStopped)for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].next(t)},n.prototype.error=function(t){if(this.closed)throw new a.a;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var n=this.observers,e=n.length,r=n.slice(),i=0;i<e;i++)r[i].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new a.a;this.isStopped=!0;for(var t=this.observers,n=t.length,e=t.slice(),r=0;r<n;r++)e[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(n){if(this.closed)throw new a.a;return t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){if(this.closed)throw new a.a;return this.hasError?(t.error(this.thrownError),u.a.EMPTY):this.isStopped?(t.complete(),u.a.EMPTY):(this.observers.push(t),new c.a(this,t))},n.prototype.asObservable=function(){var t=new i.a;return t.source=this,t},n.create=function(t,n){return new h(t,n)},n}(i.a),h=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return r.a(n,t),n.prototype.next=function(t){var n=this.destination;n&&n.next&&n.next(t)},n.prototype.error=function(t){var n=this.destination;n&&n.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):u.a.EMPTY},n}(l)},function(t,n,e){"use strict";e.d(n,"b",(function(){return i})),e.d(n,"a",(function(){return o}));var r=e(30),i=new(e(27).a)(r.a),o=i},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(1);function o(t,n){return function(e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.project=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.project,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.project=e,i.count=0,i.thisArg=r||i,i}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(i.a)},function(t,n,e){"use strict";function r(t){return t&&"function"==typeof t.schedule}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"b",(function(){return o}));var r=e(3),i=new r.a((function(t){return t.complete()}));function o(t){return t?function(t){return new r.a((function(n){return t.schedule((function(){return n.complete()}))}))}(t):i}},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(3),i=e(33),o=e(65);function u(t,n){return n?Object(o.a)(t,n):t instanceof r.a?t:new r.a(Object(i.a)(t))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e(0),i=function(t){function n(n,e,r){var i=t.call(this)||this;return i.parent=n,i.outerValue=e,i.outerIndex=r,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},n.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},n.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},n}(e(1).a),o=e(33),u=e(3);function a(t,n,e,r,a){if(void 0===a&&(a=new i(t,e,r)),!a.closed)return n instanceof u.a?n.subscribe(a):Object(o.a)(n)(a)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},function(t,n,e){"use strict";function r(t){return t}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(0),i=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(n)},n.prototype.notifyError=function(t,n){this.destination.error(t)},n.prototype.notifyComplete=function(t){this.destination.complete()},n}(e(1).a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(1);function o(t,n){return function(e){return e.lift(new u(t,n))}}var u=function(){function t(t,n){this.predicate=t,this.thisArg=n}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.predicate,this.thisArg))},t}(),a=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.thisArg=r,i.count=0,i}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}n&&this.destination.next(t)},n}(i.a)},function(t,n,e){"use strict";e.d(n,"b",(function(){return r})),e.d(n,"a",(function(){return a}));var r,i=e(10),o=e(35),u=e(43);r||(r={});var a=function(){function t(t,n,e){this.kind=t,this.value=n,this.error=e,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,n,e){switch(this.kind){case"N":return t&&t(this.value);case"E":return n&&n(this.error);case"C":return e&&e()}},t.prototype.accept=function(t,n,e){return t&&"function"==typeof t.next?this.observe(t):this.do(t,n,e)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Object(o.a)(this.value);case"E":return Object(u.a)(this.error);case"C":return Object(i.b)()}throw new Error("unexpected notification kind value")},t.createNext=function(n){return void 0!==n?new t("N",n):t.undefinedValueNotification},t.createError=function(n){return new t("E",void 0,n)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},function(t,n,e){"use strict";var r=e(73),i=Object.prototype.toString;function o(t){return"[object Array]"===i.call(t)}function u(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function c(t){return"[object Function]"===i.call(t)}function f(t,n){if(null!=t)if("object"!=typeof t&&(t=[t]),o(t))for(var e=0,r=t.length;e<r;e++)n.call(null,t[e],e,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&n.call(null,t[i],i,t)}t.exports={isArray:o,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:function(t){return null!==t&&!u(t)&&null!==t.constructor&&!u(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isUndefined:u,isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:c,isStream:function(t){return a(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:f,merge:function t(){var n={};function e(e,r){"object"==typeof n[r]&&"object"==typeof e?n[r]=t(n[r],e):n[r]=e}for(var r=0,i=arguments.length;r<i;r++)f(arguments[r],e);return n},deepMerge:function t(){var n={};function e(e,r){"object"==typeof n[r]&&"object"==typeof e?n[r]=t(n[r],e):n[r]="object"==typeof e?t({},e):e}for(var r=0,i=arguments.length;r<i;r++)f(arguments[r],e);return n},extend:function(t,n,e){return f(n,(function(n,i){t[i]=e&&"function"==typeof n?r(n,e):n})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,n,e){"use strict";function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}e.d(n,"a",(function(){return i}));var i=r()},function(t,n,e){"use strict";function r(){}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";function r(t){return"function"==typeof t}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"b",(function(){return a})),e.d(n,"a",(function(){return s}));var r=e(0),i=e(8),o=e(11),u=e(2);function a(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?function(r){return r.pipe(a((function(e,r){return Object(o.a)(t(e,r)).pipe(Object(i.a)((function(t,i){return n(e,t,r,i)})))}),e))}:("number"==typeof n&&(e=n),function(n){return n.lift(new c(t,e))})}var c=function(){function t(t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=n}return t.prototype.call=function(t,n){return n.subscribe(new f(t,this.project,this.concurrent))},t}(),f=function(t){function n(n,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,n)||this;return i.project=e,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(n)},n.prototype._innerSub=function(t){var n=new u.a(this),e=this.destination;e.add(n);var r=Object(u.c)(t,n);r!==n&&e.add(r)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t){this.destination.next(t)},n.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},n}(u.b),s=a},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(53),o=function(t){function n(e,r){void 0===r&&(r=i.a.now);var o=t.call(this,e,(function(){return n.delegate&&n.delegate!==o?n.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.a(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var n=this.actions;if(this.active)n.push(t);else{var e;this.active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this.active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(3),i=e(67),o=e(50);function u(t,n){return n?Object(o.a)(t,n):new r.a(Object(i.a)(t))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(0),i=e(5),o=e(4),u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.value=null,n.hasNext=!1,n.hasCompleted=!1,n}return r.a(n,t),n.prototype._subscribe=function(n){return this.hasError?(n.error(this.thrownError),o.a.EMPTY):this.hasCompleted&&this.hasNext?(n.next(this.value),n.complete(),o.a.EMPTY):t.prototype._subscribe.call(this,n)},n.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},n.prototype.error=function(n){this.hasCompleted||t.prototype.error.call(this,n)},n.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(0),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return r.a(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!==e&&this.delay===e&&!1===this.pending)return n;clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e=!1,r=void 0;try{this.work(t)}catch(t){e=!0,r=!!t&&t||new Error(t)}if(e)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,n=this.scheduler,e=n.actions,r=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&e.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null},n}(function(t){function n(n,e){return t.call(this)||this}return r.a(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(e(4).a))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(7);function i(t){return!Object(r.a)(t)&&t-parseFloat(t)+1>=0}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(35),i=e(58);function o(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Object(i.a)()(r.a.apply(void 0,t))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(67),i=e(34),o=e(19),u=e(21),a=e(66),c=e(68),f=e(48),s=function(t){if(t&&"function"==typeof t[u.a])return s=t,function(t){var n=s[u.a]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(t)};if(Object(a.a)(t))return Object(r.a)(t);if(Object(c.a)(t))return e=t,function(t){return e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,i.a),t};if(t&&"function"==typeof t[o.a])return n=t,function(t){for(var e=n[o.a]();;){var r=void 0;try{r=e.next()}catch(n){return t.error(n),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof e.return&&t.add((function(){e.return&&e.return()})),t};var n,e,s,l=Object(f.a)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},function(t,n,e){"use strict";function r(t){setTimeout((function(){throw t}),0)}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(9),i=e(28),o=e(50);function u(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(r.a)(e)?(t.pop(),Object(o.a)(t,e)):Object(i.a)(t)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"b",(function(){return o}));var r=e(14);function i(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return o(t)}function o(t){return 0===t.length?r.a:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}},function(t,n,e){"use strict";e.d(n,"b",(function(){return l})),e.d(n,"a",(function(){return h}));var r=e(0),i=1,o=function(){return Promise.resolve()}(),u={};function a(t){return t in u&&(delete u[t],!0)}var c=function(t){var n=i++;return u[n]=!0,o.then((function(){return a(n)&&t()})),n},f=function(t){a(t)},s=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.a(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=c(n.flush.bind(n,null))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(f(e),n.scheduled=void 0)},n}(e(30).a),l=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(e(27).a))(s),h=l},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.r(n),e.d(n,"version",(function(){return r})),e.d(n,"bisect",(function(){return f})),e.d(n,"bisectRight",(function(){return a})),e.d(n,"bisectLeft",(function(){return c})),e.d(n,"ascending",(function(){return i})),e.d(n,"bisector",(function(){return o})),e.d(n,"cross",(function(){return h})),e.d(n,"descending",(function(){return d})),e.d(n,"deviation",(function(){return y})),e.d(n,"extent",(function(){return b})),e.d(n,"histogram",(function(){return O})),e.d(n,"thresholdFreedmanDiaconis",(function(){return I})),e.d(n,"thresholdScott",(function(){return P})),e.d(n,"thresholdSturges",(function(){return N})),e.d(n,"max",(function(){return R})),e.d(n,"mean",(function(){return L})),e.d(n,"median",(function(){return z})),e.d(n,"merge",(function(){return F})),e.d(n,"min",(function(){return B})),e.d(n,"pairs",(function(){return s})),e.d(n,"permute",(function(){return D})),e.d(n,"quantile",(function(){return j})),e.d(n,"range",(function(){return M})),e.d(n,"scan",(function(){return U})),e.d(n,"shuffle",(function(){return q})),e.d(n,"sum",(function(){return V})),e.d(n,"ticks",(function(){return C})),e.d(n,"tickIncrement",(function(){return E})),e.d(n,"tickStep",(function(){return T})),e.d(n,"transpose",(function(){return W})),e.d(n,"variance",(function(){return v})),e.d(n,"zip",(function(){return Y})),e.d(n,"axisTop",(function(){return nt})),e.d(n,"axisRight",(function(){return et})),e.d(n,"axisBottom",(function(){return rt})),e.d(n,"axisLeft",(function(){return it})),e.d(n,"brush",(function(){return Ai})),e.d(n,"brushX",(function(){return Si})),e.d(n,"brushY",(function(){return ki})),e.d(n,"brushSelection",(function(){return Mi})),e.d(n,"chord",(function(){return Ri})),e.d(n,"ribbon",(function(){return Gi})),e.d(n,"nest",(function(){return Qi})),e.d(n,"set",(function(){return ao})),e.d(n,"map",(function(){return Ji})),e.d(n,"keys",(function(){return co})),e.d(n,"values",(function(){return fo})),e.d(n,"entries",(function(){return so})),e.d(n,"color",(function(){return Hn})),e.d(n,"rgb",(function(){return Gn})),e.d(n,"hsl",(function(){return ee})),e.d(n,"lab",(function(){return yo})),e.d(n,"hcl",(function(){return So})),e.d(n,"lch",(function(){return Mo})),e.d(n,"gray",(function(){return vo})),e.d(n,"cubehelix",(function(){return jo})),e.d(n,"contours",(function(){return qo})),e.d(n,"contourDensity",(function(){return Xo})),e.d(n,"dispatch",(function(){return lt})),e.d(n,"drag",(function(){return nu})),e.d(n,"dragDisable",(function(){return Cn})),e.d(n,"dragEnable",(function(){return En})),e.d(n,"dsvFormat",(function(){return cu})),e.d(n,"csvParse",(function(){return su})),e.d(n,"csvParseRows",(function(){return lu})),e.d(n,"csvFormat",(function(){return hu})),e.d(n,"csvFormatBody",(function(){return du})),e.d(n,"csvFormatRows",(function(){return pu})),e.d(n,"csvFormatRow",(function(){return vu})),e.d(n,"csvFormatValue",(function(){return yu})),e.d(n,"tsvParse",(function(){return gu})),e.d(n,"tsvParseRows",(function(){return _u})),e.d(n,"tsvFormat",(function(){return mu})),e.d(n,"tsvFormatBody",(function(){return xu})),e.d(n,"tsvFormatRows",(function(){return wu})),e.d(n,"tsvFormatRow",(function(){return Mu})),e.d(n,"tsvFormatValue",(function(){return Su})),e.d(n,"autoType",(function(){return ku})),e.d(n,"easeLinear",(function(){return Cu})),e.d(n,"easeQuad",(function(){return Nu})),e.d(n,"easeQuadIn",(function(){return Eu})),e.d(n,"easeQuadOut",(function(){return Tu})),e.d(n,"easeQuadInOut",(function(){return Nu})),e.d(n,"easeCubic",(function(){return $r})),e.d(n,"easeCubicIn",(function(){return Hr})),e.d(n,"easeCubicOut",(function(){return Yr})),e.d(n,"easeCubicInOut",(function(){return $r})),e.d(n,"easePoly",(function(){return Iu})),e.d(n,"easePolyIn",(function(){return Ou})),e.d(n,"easePolyOut",(function(){return ju})),e.d(n,"easePolyInOut",(function(){return Iu})),e.d(n,"easeSin",(function(){return Fu})),e.d(n,"easeSinIn",(function(){return Lu})),e.d(n,"easeSinOut",(function(){return zu})),e.d(n,"easeSinInOut",(function(){return Fu})),e.d(n,"easeExp",(function(){return Uu})),e.d(n,"easeExpIn",(function(){return Bu})),e.d(n,"easeExpOut",(function(){return Du})),e.d(n,"easeExpInOut",(function(){return Uu})),e.d(n,"easeCircle",(function(){return Wu})),e.d(n,"easeCircleIn",(function(){return qu})),e.d(n,"easeCircleOut",(function(){return Vu})),e.d(n,"easeCircleInOut",(function(){return Wu})),e.d(n,"easeBounce",(function(){return Yu})),e.d(n,"easeBounceIn",(function(){return Hu})),e.d(n,"easeBounceOut",(function(){return Yu})),e.d(n,"easeBounceInOut",(function(){return $u})),e.d(n,"easeBack",(function(){return Zu})),e.d(n,"easeBackIn",(function(){return Xu})),e.d(n,"easeBackOut",(function(){return Gu})),e.d(n,"easeBackInOut",(function(){return Zu})),e.d(n,"easeElastic",(function(){return Qu})),e.d(n,"easeElasticIn",(function(){return Ju})),e.d(n,"easeElasticOut",(function(){return Qu})),e.d(n,"easeElasticInOut",(function(){return ta})),e.d(n,"blob",(function(){return ea})),e.d(n,"buffer",(function(){return ia})),e.d(n,"dsv",(function(){return ca})),e.d(n,"csv",(function(){return fa})),e.d(n,"tsv",(function(){return sa})),e.d(n,"image",(function(){return la})),e.d(n,"json",(function(){return da})),e.d(n,"text",(function(){return ua})),e.d(n,"xml",(function(){return va})),e.d(n,"html",(function(){return ya})),e.d(n,"svg",(function(){return ba})),e.d(n,"forceCenter",(function(){return ga})),e.d(n,"forceCollide",(function(){return Oa})),e.d(n,"forceLink",(function(){return Pa})),e.d(n,"forceManyBody",(function(){return Ba})),e.d(n,"forceRadial",(function(){return Da})),e.d(n,"forceSimulation",(function(){return Fa})),e.d(n,"forceX",(function(){return Ua})),e.d(n,"forceY",(function(){return qa})),e.d(n,"formatDefaultLocale",(function(){return ic})),e.d(n,"format",(function(){return Za})),e.d(n,"formatPrefix",(function(){return Ka})),e.d(n,"formatLocale",(function(){return rc})),e.d(n,"formatSpecifier",(function(){return Ya})),e.d(n,"FormatSpecifier",(function(){return $a})),e.d(n,"precisionFixed",(function(){return oc})),e.d(n,"precisionPrefix",(function(){return uc})),e.d(n,"precisionRound",(function(){return ac})),e.d(n,"geoArea",(function(){return Jc})),e.d(n,"geoBounds",(function(){return Hf})),e.d(n,"geoCentroid",(function(){return rs})),e.d(n,"geoCircle",(function(){return ps})),e.d(n,"geoClipAntimeridian",(function(){return As})),e.d(n,"geoClipCircle",(function(){return Cs})),e.d(n,"geoClipExtent",(function(){return js})),e.d(n,"geoClipRectangle",(function(){return Es})),e.d(n,"geoContains",(function(){return Zs})),e.d(n,"geoDistance",(function(){return Us})),e.d(n,"geoGraticule",(function(){return Qs})),e.d(n,"geoGraticule10",(function(){return tl})),e.d(n,"geoInterpolate",(function(){return ol})),e.d(n,"geoLength",(function(){return Fs})),e.d(n,"geoPath",(function(){return rh})),e.d(n,"geoAlbers",(function(){return wh})),e.d(n,"geoAlbersUsa",(function(){return Mh})),e.d(n,"geoAzimuthalEqualArea",(function(){return Ch})),e.d(n,"geoAzimuthalEqualAreaRaw",(function(){return Ah})),e.d(n,"geoAzimuthalEquidistant",(function(){return Th})),e.d(n,"geoAzimuthalEquidistantRaw",(function(){return Eh})),e.d(n,"geoConicConformal",(function(){return Rh})),e.d(n,"geoConicConformalRaw",(function(){return Ph})),e.d(n,"geoConicEqualArea",(function(){return xh})),e.d(n,"geoConicEqualAreaRaw",(function(){return mh})),e.d(n,"geoConicEquidistant",(function(){return Bh})),e.d(n,"geoConicEquidistantRaw",(function(){return Fh})),e.d(n,"geoEqualEarth",(function(){return Yh})),e.d(n,"geoEqualEarthRaw",(function(){return Hh})),e.d(n,"geoEquirectangular",(function(){return zh})),e.d(n,"geoEquirectangularRaw",(function(){return Lh})),e.d(n,"geoGnomonic",(function(){return Xh})),e.d(n,"geoGnomonicRaw",(function(){return $h})),e.d(n,"geoIdentity",(function(){return Gh})),e.d(n,"geoProjection",(function(){return bh})),e.d(n,"geoProjectionMutator",(function(){return gh})),e.d(n,"geoMercator",(function(){return Oh})),e.d(n,"geoMercatorRaw",(function(){return Nh})),e.d(n,"geoNaturalEarth1",(function(){return Kh})),e.d(n,"geoNaturalEarth1Raw",(function(){return Zh})),e.d(n,"geoOrthographic",(function(){return Qh})),e.d(n,"geoOrthographicRaw",(function(){return Jh})),e.d(n,"geoStereographic",(function(){return nd})),e.d(n,"geoStereographicRaw",(function(){return td})),e.d(n,"geoTransverseMercator",(function(){return rd})),e.d(n,"geoTransverseMercatorRaw",(function(){return ed})),e.d(n,"geoRotation",(function(){return ls})),e.d(n,"geoStream",(function(){return Wc})),e.d(n,"geoTransform",(function(){return ih})),e.d(n,"cluster",(function(){return ad})),e.d(n,"hierarchy",(function(){return fd})),e.d(n,"pack",(function(){return Pd})),e.d(n,"packSiblings",(function(){return Ed})),e.d(n,"packEnclose",(function(){return vd})),e.d(n,"partition",(function(){return Dd})),e.d(n,"stratify",(function(){return Hd})),e.d(n,"tree",(function(){return Jd})),e.d(n,"treemap",(function(){return rp})),e.d(n,"treemapBinary",(function(){return ip})),e.d(n,"treemapDice",(function(){return Bd})),e.d(n,"treemapSlice",(function(){return Qd})),e.d(n,"treemapSliceDice",(function(){return op})),e.d(n,"treemapSquarify",(function(){return ep})),e.d(n,"treemapResquarify",(function(){return up})),e.d(n,"interpolate",(function(){return Te})),e.d(n,"interpolateArray",(function(){return _e})),e.d(n,"interpolateBasis",(function(){return ue})),e.d(n,"interpolateBasisClosed",(function(){return ae})),e.d(n,"interpolateDate",(function(){return xe})),e.d(n,"interpolateDiscrete",(function(){return ap})),e.d(n,"interpolateHue",(function(){return cp})),e.d(n,"interpolateNumber",(function(){return we})),e.d(n,"interpolateNumberArray",(function(){return be})),e.d(n,"interpolateObject",(function(){return Me})),e.d(n,"interpolateRound",(function(){return fp})),e.d(n,"interpolateString",(function(){return Ee})),e.d(n,"interpolateTransformCss",(function(){return hr})),e.d(n,"interpolateTransformSvg",(function(){return dr})),e.d(n,"interpolateZoom",(function(){return hp})),e.d(n,"interpolateRgb",(function(){return de})),e.d(n,"interpolateRgbBasis",(function(){return ve})),e.d(n,"interpolateRgbBasisClosed",(function(){return ye})),e.d(n,"interpolateHsl",(function(){return pp})),e.d(n,"interpolateHslLong",(function(){return vp})),e.d(n,"interpolateLab",(function(){return yp})),e.d(n,"interpolateHcl",(function(){return gp})),e.d(n,"interpolateHclLong",(function(){return _p})),e.d(n,"interpolateCubehelix",(function(){return xp})),e.d(n,"interpolateCubehelixLong",(function(){return wp})),e.d(n,"piecewise",(function(){return Mp})),e.d(n,"quantize",(function(){return Sp})),e.d(n,"path",(function(){return Vi})),e.d(n,"polygonArea",(function(){return kp})),e.d(n,"polygonCentroid",(function(){return Ap})),e.d(n,"polygonHull",(function(){return Tp})),e.d(n,"polygonContains",(function(){return Np})),e.d(n,"polygonLength",(function(){return Op})),e.d(n,"quadtree",(function(){return ka})),e.d(n,"randomUniform",(function(){return Ip})),e.d(n,"randomNormal",(function(){return Pp})),e.d(n,"randomLogNormal",(function(){return Rp})),e.d(n,"randomBates",(function(){return zp})),e.d(n,"randomIrwinHall",(function(){return Lp})),e.d(n,"randomExponential",(function(){return Fp})),e.d(n,"scaleBand",(function(){return Yp})),e.d(n,"scalePoint",(function(){return Xp})),e.d(n,"scaleIdentity",(function(){return cv})),e.d(n,"scaleLinear",(function(){return av})),e.d(n,"scaleLog",(function(){return bv})),e.d(n,"scaleSymlog",(function(){return xv})),e.d(n,"scaleOrdinal",(function(){return Hp})),e.d(n,"scaleImplicit",(function(){return Wp})),e.d(n,"scalePow",(function(){return Av})),e.d(n,"scaleSqrt",(function(){return Cv})),e.d(n,"scaleQuantile",(function(){return Ev})),e.d(n,"scaleQuantize",(function(){return Tv})),e.d(n,"scaleThreshold",(function(){return Nv})),e.d(n,"scaleTime",(function(){return ag})),e.d(n,"scaleUtc",(function(){return bg})),e.d(n,"scaleSequential",(function(){return mg})),e.d(n,"scaleSequentialLog",(function(){return xg})),e.d(n,"scaleSequentialPow",(function(){return Mg})),e.d(n,"scaleSequentialSqrt",(function(){return Sg})),e.d(n,"scaleSequentialSymlog",(function(){return wg})),e.d(n,"scaleSequentialQuantile",(function(){return kg})),e.d(n,"scaleDiverging",(function(){return Cg})),e.d(n,"scaleDivergingLog",(function(){return Eg})),e.d(n,"scaleDivergingPow",(function(){return Ng})),e.d(n,"scaleDivergingSqrt",(function(){return Og})),e.d(n,"scaleDivergingSymlog",(function(){return Tg})),e.d(n,"tickFormat",(function(){return ov})),e.d(n,"schemeCategory10",(function(){return Ig})),e.d(n,"schemeAccent",(function(){return Pg})),e.d(n,"schemeDark2",(function(){return Rg})),e.d(n,"schemePaired",(function(){return Lg})),e.d(n,"schemePastel1",(function(){return zg})),e.d(n,"schemePastel2",(function(){return Fg})),e.d(n,"schemeSet1",(function(){return Bg})),e.d(n,"schemeSet2",(function(){return Dg})),e.d(n,"schemeSet3",(function(){return Ug})),e.d(n,"schemeTableau10",(function(){return qg})),e.d(n,"interpolateBrBG",(function(){return Hg})),e.d(n,"schemeBrBG",(function(){return Wg})),e.d(n,"interpolatePRGn",(function(){return $g})),e.d(n,"schemePRGn",(function(){return Yg})),e.d(n,"interpolatePiYG",(function(){return Gg})),e.d(n,"schemePiYG",(function(){return Xg})),e.d(n,"interpolatePuOr",(function(){return Kg})),e.d(n,"schemePuOr",(function(){return Zg})),e.d(n,"interpolateRdBu",(function(){return Qg})),e.d(n,"schemeRdBu",(function(){return Jg})),e.d(n,"interpolateRdGy",(function(){return n_})),e.d(n,"schemeRdGy",(function(){return t_})),e.d(n,"interpolateRdYlBu",(function(){return r_})),e.d(n,"schemeRdYlBu",(function(){return e_})),e.d(n,"interpolateRdYlGn",(function(){return o_})),e.d(n,"schemeRdYlGn",(function(){return i_})),e.d(n,"interpolateSpectral",(function(){return a_})),e.d(n,"schemeSpectral",(function(){return u_})),e.d(n,"interpolateBuGn",(function(){return f_})),e.d(n,"schemeBuGn",(function(){return c_})),e.d(n,"interpolateBuPu",(function(){return l_})),e.d(n,"schemeBuPu",(function(){return s_})),e.d(n,"interpolateGnBu",(function(){return d_})),e.d(n,"schemeGnBu",(function(){return h_})),e.d(n,"interpolateOrRd",(function(){return v_})),e.d(n,"schemeOrRd",(function(){return p_})),e.d(n,"interpolatePuBuGn",(function(){return b_})),e.d(n,"schemePuBuGn",(function(){return y_})),e.d(n,"interpolatePuBu",(function(){return __})),e.d(n,"schemePuBu",(function(){return g_})),e.d(n,"interpolatePuRd",(function(){return x_})),e.d(n,"schemePuRd",(function(){return m_})),e.d(n,"interpolateRdPu",(function(){return M_})),e.d(n,"schemeRdPu",(function(){return w_})),e.d(n,"interpolateYlGnBu",(function(){return k_})),e.d(n,"schemeYlGnBu",(function(){return S_})),e.d(n,"interpolateYlGn",(function(){return C_})),e.d(n,"schemeYlGn",(function(){return A_})),e.d(n,"interpolateYlOrBr",(function(){return T_})),e.d(n,"schemeYlOrBr",(function(){return E_})),e.d(n,"interpolateYlOrRd",(function(){return O_})),e.d(n,"schemeYlOrRd",(function(){return N_})),e.d(n,"interpolateBlues",(function(){return I_})),e.d(n,"schemeBlues",(function(){return j_})),e.d(n,"interpolateGreens",(function(){return R_})),e.d(n,"schemeGreens",(function(){return P_})),e.d(n,"interpolateGreys",(function(){return z_})),e.d(n,"schemeGreys",(function(){return L_})),e.d(n,"interpolatePurples",(function(){return B_})),e.d(n,"schemePurples",(function(){return F_})),e.d(n,"interpolateReds",(function(){return U_})),e.d(n,"schemeReds",(function(){return D_})),e.d(n,"interpolateOranges",(function(){return V_})),e.d(n,"schemeOranges",(function(){return q_})),e.d(n,"interpolateCividis",(function(){return W_})),e.d(n,"interpolateCubehelixDefault",(function(){return H_})),e.d(n,"interpolateRainbow",(function(){return G_})),e.d(n,"interpolateWarm",(function(){return Y_})),e.d(n,"interpolateCool",(function(){return $_})),e.d(n,"interpolateSinebow",(function(){return Q_})),e.d(n,"interpolateTurbo",(function(){return tm})),e.d(n,"interpolateViridis",(function(){return em})),e.d(n,"interpolateMagma",(function(){return rm})),e.d(n,"interpolateInferno",(function(){return im})),e.d(n,"interpolatePlasma",(function(){return om})),e.d(n,"create",(function(){return um})),e.d(n,"creator",(function(){return rn})),e.d(n,"local",(function(){return cm})),e.d(n,"matcher",(function(){return yt})),e.d(n,"mouse",(function(){return Ie})),e.d(n,"namespace",(function(){return St})),e.d(n,"namespaces",(function(){return Mt})),e.d(n,"clientPoint",(function(){return Oe})),e.d(n,"select",(function(){return Sn})),e.d(n,"selectAll",(function(){return sm})),e.d(n,"selection",(function(){return Mn})),e.d(n,"selector",(function(){return dt})),e.d(n,"selectorAll",(function(){return vt})),e.d(n,"style",(function(){return Rt})),e.d(n,"touch",(function(){return je})),e.d(n,"touches",(function(){return lm})),e.d(n,"window",(function(){return Ot})),e.d(n,"event",(function(){return sn})),e.d(n,"customEvent",(function(){return yn})),e.d(n,"arc",(function(){return jm})),e.d(n,"area",(function(){return Fm})),e.d(n,"line",(function(){return zm})),e.d(n,"pie",(function(){return Um})),e.d(n,"areaRadial",(function(){return $m})),e.d(n,"radialArea",(function(){return $m})),e.d(n,"lineRadial",(function(){return Ym})),e.d(n,"radialLine",(function(){return Ym})),e.d(n,"pointRadial",(function(){return Xm})),e.d(n,"linkHorizontal",(function(){return ex})),e.d(n,"linkVertical",(function(){return rx})),e.d(n,"linkRadial",(function(){return ix})),e.d(n,"symbol",(function(){return wx})),e.d(n,"symbols",(function(){return xx})),e.d(n,"symbolCircle",(function(){return ox})),e.d(n,"symbolCross",(function(){return ux})),e.d(n,"symbolDiamond",(function(){return fx})),e.d(n,"symbolSquare",(function(){return px})),e.d(n,"symbolStar",(function(){return dx})),e.d(n,"symbolTriangle",(function(){return yx})),e.d(n,"symbolWye",(function(){return mx})),e.d(n,"curveBasisClosed",(function(){return Ex})),e.d(n,"curveBasisOpen",(function(){return Nx})),e.d(n,"curveBasis",(function(){return Ax})),e.d(n,"curveBundle",(function(){return jx})),e.d(n,"curveCardinalClosed",(function(){return zx})),e.d(n,"curveCardinalOpen",(function(){return Bx})),e.d(n,"curveCardinal",(function(){return Rx})),e.d(n,"curveCatmullRomClosed",(function(){return Wx})),e.d(n,"curveCatmullRomOpen",(function(){return Yx})),e.d(n,"curveCatmullRom",(function(){return qx})),e.d(n,"curveLinearClosed",(function(){return Xx})),e.d(n,"curveLinear",(function(){return Pm})),e.d(n,"curveMonotoneX",(function(){return ew})),e.d(n,"curveMonotoneY",(function(){return rw})),e.d(n,"curveNatural",(function(){return uw})),e.d(n,"curveStep",(function(){return cw})),e.d(n,"curveStepAfter",(function(){return sw})),e.d(n,"curveStepBefore",(function(){return fw})),e.d(n,"stack",(function(){return pw})),e.d(n,"stackOffsetExpand",(function(){return vw})),e.d(n,"stackOffsetDiverging",(function(){return yw})),e.d(n,"stackOffsetNone",(function(){return lw})),e.d(n,"stackOffsetSilhouette",(function(){return bw})),e.d(n,"stackOffsetWiggle",(function(){return gw})),e.d(n,"stackOrderAppearance",(function(){return _w})),e.d(n,"stackOrderAscending",(function(){return xw})),e.d(n,"stackOrderDescending",(function(){return Mw})),e.d(n,"stackOrderInsideOut",(function(){return Sw})),e.d(n,"stackOrderNone",(function(){return hw})),e.d(n,"stackOrderReverse",(function(){return kw})),e.d(n,"timeInterval",(function(){return Iv})),e.d(n,"timeMillisecond",(function(){return py})),e.d(n,"timeMilliseconds",(function(){return vy})),e.d(n,"utcMillisecond",(function(){return py})),e.d(n,"utcMilliseconds",(function(){return vy})),e.d(n,"timeSecond",(function(){return ly})),e.d(n,"timeSeconds",(function(){return hy})),e.d(n,"utcSecond",(function(){return ly})),e.d(n,"utcSeconds",(function(){return hy})),e.d(n,"timeMinute",(function(){return cy})),e.d(n,"timeMinutes",(function(){return fy})),e.d(n,"timeHour",(function(){return oy})),e.d(n,"timeHours",(function(){return uy})),e.d(n,"timeDay",(function(){return ey})),e.d(n,"timeDays",(function(){return ry})),e.d(n,"timeWeek",(function(){return Uv})),e.d(n,"timeWeeks",(function(){return Xv})),e.d(n,"timeSunday",(function(){return Uv})),e.d(n,"timeSundays",(function(){return Xv})),e.d(n,"timeMonday",(function(){return qv})),e.d(n,"timeMondays",(function(){return Gv})),e.d(n,"timeTuesday",(function(){return Vv})),e.d(n,"timeTuesdays",(function(){return Zv})),e.d(n,"timeWednesday",(function(){return Wv})),e.d(n,"timeWednesdays",(function(){return Kv})),e.d(n,"timeThursday",(function(){return Hv})),e.d(n,"timeThursdays",(function(){return Jv})),e.d(n,"timeFriday",(function(){return Yv})),e.d(n,"timeFridays",(function(){return Qv})),e.d(n,"timeSaturday",(function(){return $v})),e.d(n,"timeSaturdays",(function(){return ty})),e.d(n,"timeMonth",(function(){return Fv})),e.d(n,"timeMonths",(function(){return Bv})),e.d(n,"timeYear",(function(){return Rv})),e.d(n,"timeYears",(function(){return Lv})),e.d(n,"utcMinute",(function(){return vg})),e.d(n,"utcMinutes",(function(){return yg})),e.d(n,"utcHour",(function(){return hg})),e.d(n,"utcHours",(function(){return dg})),e.d(n,"utcDay",(function(){return jy})),e.d(n,"utcDays",(function(){return Iy})),e.d(n,"utcWeek",(function(){return by})),e.d(n,"utcWeeks",(function(){return Sy})),e.d(n,"utcSunday",(function(){return by})),e.d(n,"utcSundays",(function(){return Sy})),e.d(n,"utcMonday",(function(){return gy})),e.d(n,"utcMondays",(function(){return ky})),e.d(n,"utcTuesday",(function(){return _y})),e.d(n,"utcTuesdays",(function(){return Ay})),e.d(n,"utcWednesday",(function(){return my})),e.d(n,"utcWednesdays",(function(){return Cy})),e.d(n,"utcThursday",(function(){return xy})),e.d(n,"utcThursdays",(function(){return Ey})),e.d(n,"utcFriday",(function(){return wy})),e.d(n,"utcFridays",(function(){return Ty})),e.d(n,"utcSaturday",(function(){return My})),e.d(n,"utcSaturdays",(function(){return Ny})),e.d(n,"utcMonth",(function(){return fg})),e.d(n,"utcMonths",(function(){return sg})),e.d(n,"utcYear",(function(){return Ry})),e.d(n,"utcYears",(function(){return Ly})),e.d(n,"timeFormatDefaultLocale",(function(){return rg})),e.d(n,"timeFormat",(function(){return qy})),e.d(n,"timeParse",(function(){return Vy})),e.d(n,"utcFormat",(function(){return Wy})),e.d(n,"utcParse",(function(){return Hy})),e.d(n,"timeFormatLocale",(function(){return Dy})),e.d(n,"isoFormat",(function(){return Aw})),e.d(n,"isoParse",(function(){return Cw})),e.d(n,"now",(function(){return qe})),e.d(n,"timer",(function(){return He})),e.d(n,"timerFlush",(function(){return Ye})),e.d(n,"timeout",(function(){return Ze})),e.d(n,"interval",(function(){return Ew})),e.d(n,"transition",(function(){return qr})),e.d(n,"active",(function(){return Kr})),e.d(n,"interrupt",(function(){return ar})),e.d(n,"voronoi",(function(){return dM})),e.d(n,"zoom",(function(){return CM})),e.d(n,"zoomTransform",(function(){return gM})),e.d(n,"zoomIdentity",(function(){return bM}));var r="5.16.0",i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},o=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var u=o(i),a=u.right,c=u.left,f=a,s=function(t,n){null==n&&(n=l);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function l(t,n){return[t,n]}var h=function(t,n,e){var r,i,o,u,a=t.length,c=n.length,f=new Array(a*c);for(null==e&&(e=l),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)f[o]=e(u,n[i]);return f},d=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},p=function(t){return null===t?NaN:+t},v=function(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=p(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=p(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)},y=function(t,n){var e=v(t,n);return e?Math.sqrt(e):e},b=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},g=Array.prototype,_=g.slice,m=g.map,x=function(t){return function(){return t}},w=function(t){return t},M=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},S=Math.sqrt(50),k=Math.sqrt(10),A=Math.sqrt(2),C=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=E(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function E(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=S?10:o>=k?5:o>=A?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=S?10:o>=k?5:o>=A?2:1)}function T(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=S?i*=10:o>=k?i*=5:o>=A&&(i*=2),n<t?-i:i}var N=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},O=function(){var t=w,n=b,e=N;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var c=n(a),s=c[0],l=c[1],h=e(a,s,l);Array.isArray(h)||(h=T(s,l,h),h=M(Math.ceil(s/h)*h,l,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,v=new Array(d+1);for(i=0;i<=d;++i)(p=v[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<u;++i)s<=(o=a[i])&&o<=l&&v[f(h,o,0,d)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(_.call(t)):x(t),r):e},r},j=function(t,n,e){if(null==e&&(e=p),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},I=function(t,n,e){return t=m.call(t,p).sort(i),Math.ceil((e-n)/(2*(j(t,.75)-j(t,.25))*Math.pow(t.length,-1/3)))},P=function(t,n,e){return Math.ceil((e-n)/(3.5*y(t)*Math.pow(t.length,-1/3)))},R=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},L=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=p(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},z=function(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=p(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=p(n(t[o],o,t)))||u.push(e);return j(u.sort(i),.5)},F=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},B=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},D=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},U=function(t,n){if(e=t.length){var e,r,o=0,u=0,a=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],a)<0||0!==n(a,a))&&(a=r,u=o);return 0===n(a,a)?u:void 0}},q=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},V=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},W=function(t){if(!(i=t.length))return[];for(var n=-1,e=B(t,H),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r};function H(t){return t.length}var Y=function(){return W(arguments)},$=Array.prototype.slice,X=function(t){return t};function G(t){return"translate("+(t+.5)+",0)"}function Z(t){return"translate(0,"+(t+.5)+")"}function K(t){return function(n){return+t(n)}}function J(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function Q(){return!this.__axis}function tt(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",s=1===t||3===t?G:Z;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):X:i,p=Math.max(o,0)+a,v=n.range(),y=+v[0]+.5,b=+v[v.length-1]+.5,g=(n.bandwidth?J:K)(n.copy()),_=l.selection?l.selection():l,m=_.selectAll(".domain").data([null]),x=_.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),S=x.select("line"),k=x.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),x=x.merge(M),S=S.merge(M.append("line").attr("stroke","currentColor").attr(f+"2",c*o)),k=k.merge(M.append("text").attr("fill","currentColor").attr(f,c*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),l!==_&&(m=m.transition(l),x=x.transition(l),S=S.transition(l),k=k.transition(l),w=w.transition(l).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=g(t))?s(t):this.getAttribute("transform")})),M.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:g(t))}))),w.remove(),m.attr("d",4===t||2==t?u?"M"+c*u+","+y+"H0.5V"+b+"H"+c*u:"M0.5,"+y+"V"+b:u?"M"+y+","+c*u+"V0.5H"+b+"V"+c*u:"M"+y+",0.5H"+b),x.attr("opacity",1).attr("transform",(function(t){return s(g(t))})),S.attr(f+"2",c*o),k.attr(f,c*p).text(d),_.filter(Q).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),_.each((function(){this.__axis=g}))}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=$.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:$.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:$.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function nt(t){return tt(1,t)}function et(t){return tt(2,t)}function rt(t){return tt(3,t)}function it(t){return tt(4,t)}var ot={value:function(){}};function ut(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new at(r)}function at(t){this._=t}function ct(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ft(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function st(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ot,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}at.prototype=ut.prototype={constructor:at,on:function(t,n){var e,r=this._,i=ct(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=st(r[e],t.name,n);else if(null==n)for(e in r)r[e]=st(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=ft(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new at(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var lt=ut;function ht(){}var dt=function(t){return null==t?ht:function(){return this.querySelector(t)}};function pt(){return[]}var vt=function(t){return null==t?pt:function(){return this.querySelectorAll(t)}},yt=function(t){return function(){return this.matches(t)}},bt=function(t){return new Array(t.length)};function gt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}gt.prototype={constructor:gt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function _t(t,n,e,r,i,o){for(var u,a=0,c=n.length,f=o.length;a<f;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new gt(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function mt(t,n,e,r,i,o,u){var a,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(d[a]=f="$"+u.call(c,c.__data__,a,n),f in s?i[a]=c:s[f]=c);for(a=0;a<h;++a)(c=s[f="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],s[f]=null):e[a]=new gt(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&s[d[a]]===c&&(i[a]=c)}function xt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var wt="http://www.w3.org/1999/xhtml",Mt={svg:"http://www.w3.org/2000/svg",xhtml:wt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},St=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Mt.hasOwnProperty(n)?{space:Mt[n],local:t}:t};function kt(t){return function(){this.removeAttribute(t)}}function At(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ct(t,n){return function(){this.setAttribute(t,n)}}function Et(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Tt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Nt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Ot=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function jt(t){return function(){this.style.removeProperty(t)}}function It(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Pt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Rt(t,n){return t.style.getPropertyValue(n)||Ot(t).getComputedStyle(t,null).getPropertyValue(n)}function Lt(t){return function(){delete this[t]}}function zt(t,n){return function(){this[t]=n}}function Ft(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Bt(t){return t.trim().split(/^|\s+/)}function Dt(t){return t.classList||new Ut(t)}function Ut(t){this._node=t,this._names=Bt(t.getAttribute("class")||"")}function qt(t,n){for(var e=Dt(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Vt(t,n){for(var e=Dt(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Wt(t){return function(){qt(this,t)}}function Ht(t){return function(){Vt(this,t)}}function Yt(t,n){return function(){(n.apply(this,arguments)?qt:Vt)(this,t)}}Ut.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function $t(){this.textContent=""}function Xt(t){return function(){this.textContent=t}}function Gt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Zt(){this.innerHTML=""}function Kt(t){return function(){this.innerHTML=t}}function Jt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Qt(){this.nextSibling&&this.parentNode.appendChild(this)}function tn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function nn(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===wt&&n.documentElement.namespaceURI===wt?n.createElement(t):n.createElementNS(e,t)}}function en(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var rn=function(t){var n=St(t);return(n.local?en:nn)(n)};function on(){return null}function un(){var t=this.parentNode;t&&t.removeChild(this)}function an(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function cn(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var fn={},sn=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(fn={mouseenter:"mouseover",mouseleave:"mouseout"}));function ln(t,n,e){return t=hn(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function hn(t,n,e){return function(r){var i=sn;sn=r;try{t.call(this,this.__data__,n,e)}finally{sn=i}}}function dn(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function pn(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function vn(t,n,e){var r=fn.hasOwnProperty(t.type)?ln:hn;return function(i,o,u){var a,c=this.__on,f=r(n,o,u);if(c)for(var s=0,l=c.length;s<l;++s)if((a=c[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=f,a.capture=e),void(a.value=n);this.addEventListener(t.type,f,e),a={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(a):this.__on=[a]}}function yn(t,n,e,r){var i=sn;t.sourceEvent=sn,sn=t;try{return n.apply(e,r)}finally{sn=i}}function bn(t,n,e){var r=Ot(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function gn(t,n){return function(){return bn(this,t,n)}}function _n(t,n){return function(){return bn(this,t,n.apply(this,arguments))}}var mn=[null];function xn(t,n){this._groups=t,this._parents=n}function wn(){return new xn([[document.documentElement]],mn)}xn.prototype=wn.prototype={constructor:xn,select:function(t){"function"!=typeof t&&(t=dt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=a[s])&&(u=t.call(o,o.__data__,s,a))&&("__data__"in o&&(u.__data__=o.__data__),f[s]=u);return new xn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=vt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=0;f<c;++f)(u=a[f])&&(r.push(t.call(u,u.__data__,f,a)),i.push(u));return new xn(r,i)},filter:function(t){"function"!=typeof t&&(t=yt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new xn(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each((function(t){p[++s]=t})),p;var e,r=n?mt:_t,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),f=new Array(u),s=0;s<u;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,y=c[s]=new Array(v),b=a[s]=new Array(v);r(l,h,y,b,f[s]=new Array(d),p,n);for(var g,_,m=0,x=0;m<v;++m)if(g=y[m]){for(m>=x&&(x=m+1);!(_=b[x])&&++x<v;);g._next=_||null}}return(a=new xn(a,i))._enter=c,a._exit=f,a},enter:function(){return new xn(this._enter||this._groups.map(bt),this._parents)},exit:function(){return new xn(this._exit||this._groups.map(bt),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new xn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=xt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,f=i[o]=new Array(c),s=0;s<c;++s)(u=a[s])&&(f[s]=u);f.sort(n)}return new xn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=St(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?At:kt:"function"==typeof n?e.local?Nt:Tt:e.local?Et:Ct)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?jt:"function"==typeof n?Pt:It)(t,n,null==e?"":e)):Rt(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Lt:"function"==typeof n?Ft:zt)(t,n)):this.node()[t]},classed:function(t,n){var e=Bt(t+"");if(arguments.length<2){for(var r=Dt(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Yt:n?Wt:Ht)(e,n))},text:function(t){return arguments.length?this.each(null==t?$t:("function"==typeof t?Gt:Xt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Zt:("function"==typeof t?Jt:Kt)(t)):this.node().innerHTML},raise:function(){return this.each(Qt)},lower:function(){return this.each(tn)},append:function(t){var n="function"==typeof t?t:rn(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:rn(t),r=null==n?on:"function"==typeof n?n:dt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(un)},clone:function(t){return this.select(t?cn:an)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=dn(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?vn:pn,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,f=0,s=a.length;f<s;++f)for(r=0,c=a[f];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?_n:gn)(t,n))}};var Mn=wn,Sn=function(t){return"string"==typeof t?new xn([[document.querySelector(t)]],[document.documentElement]):new xn([[t]],mn)};function kn(){sn.stopImmediatePropagation()}var An=function(){sn.preventDefault(),sn.stopImmediatePropagation()},Cn=function(t){var n=t.document.documentElement,e=Sn(t).on("dragstart.drag",An,!0);"onselectstart"in n?e.on("selectstart.drag",An,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function En(t,n){var e=t.document.documentElement,r=Sn(t).on("dragstart.drag",null);n&&(r.on("click.drag",An,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var Tn=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Nn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function On(){}var jn="\\s*([+-]?\\d+)\\s*",In="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Pn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Rn=/^#([0-9a-f]{3,8})$/,Ln=new RegExp("^rgb\\("+[jn,jn,jn]+"\\)$"),zn=new RegExp("^rgb\\("+[Pn,Pn,Pn]+"\\)$"),Fn=new RegExp("^rgba\\("+[jn,jn,jn,In]+"\\)$"),Bn=new RegExp("^rgba\\("+[Pn,Pn,Pn,In]+"\\)$"),Dn=new RegExp("^hsl\\("+[In,Pn,Pn]+"\\)$"),Un=new RegExp("^hsla\\("+[In,Pn,Pn,In]+"\\)$"),qn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Vn(){return this.rgb().formatHex()}function Wn(){return this.rgb().formatRgb()}function Hn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Rn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Yn(n):3===e?new Zn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?$n(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?$n(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Ln.exec(t))?new Zn(n[1],n[2],n[3],1):(n=zn.exec(t))?new Zn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Fn.exec(t))?$n(n[1],n[2],n[3],n[4]):(n=Bn.exec(t))?$n(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Dn.exec(t))?te(n[1],n[2]/100,n[3]/100,1):(n=Un.exec(t))?te(n[1],n[2]/100,n[3]/100,n[4]):qn.hasOwnProperty(t)?Yn(qn[t]):"transparent"===t?new Zn(NaN,NaN,NaN,0):null}function Yn(t){return new Zn(t>>16&255,t>>8&255,255&t,1)}function $n(t,n,e,r){return r<=0&&(t=n=e=NaN),new Zn(t,n,e,r)}function Xn(t){return t instanceof On||(t=Hn(t)),t?new Zn((t=t.rgb()).r,t.g,t.b,t.opacity):new Zn}function Gn(t,n,e,r){return 1===arguments.length?Xn(t):new Zn(t,n,e,null==r?1:r)}function Zn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Kn(){return"#"+Qn(this.r)+Qn(this.g)+Qn(this.b)}function Jn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Qn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function te(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new re(t,n,e,r)}function ne(t){if(t instanceof re)return new re(t.h,t.s,t.l,t.opacity);if(t instanceof On||(t=Hn(t)),!t)return new re;if(t instanceof re)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new re(u,a,c,t.opacity)}function ee(t,n,e,r){return 1===arguments.length?ne(t):new re(t,n,e,null==r?1:r)}function re(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ie(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function oe(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}Tn(On,Hn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Vn,formatHex:Vn,formatHsl:function(){return ne(this).formatHsl()},formatRgb:Wn,toString:Wn}),Tn(Zn,Gn,Nn(On,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Zn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Kn,formatHex:Kn,formatRgb:Jn,toString:Jn})),Tn(re,ee,Nn(On,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new re(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new re(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Zn(ie(t>=240?t-240:t+120,i,r),ie(t,i,r),ie(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ue=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return oe((e-r/n)*n,u,i,o,a)}},ae=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return oe((e-r/n)*n,i,o,u,a)}},ce=function(t){return function(){return t}};function fe(t,n){return function(e){return t+e*n}}function se(t,n){var e=n-t;return e?fe(t,e>180||e<-180?e-360*Math.round(e/360):e):ce(isNaN(t)?n:t)}function le(t){return 1==(t=+t)?he:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ce(isNaN(n)?e:n)}}function he(t,n){var e=n-t;return e?fe(t,e):ce(isNaN(t)?n:t)}var de=function t(n){var e=le(n);function r(t,n){var r=e((t=Gn(t)).r,(n=Gn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=he(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function pe(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Gn(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var ve=pe(ue),ye=pe(ae),be=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function ge(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}var _e=function(t,n){return(ge(n)?be:me)(t,n)};function me(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Te(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}var xe=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},we=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Me=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Te(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Se=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ke=new RegExp(Se.source,"g");var Ae,Ce,Ee=function(t,n){var e,r,i,o=Se.lastIndex=ke.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=Se.exec(t))&&(r=ke.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:we(e,r)})),o=ke.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},Te=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?ce(n):("number"===r?we:"string"===r?(e=Hn(n))?(n=e,de):Ee:n instanceof Hn?de:n instanceof Date?xe:ge(n)?be:Array.isArray(n)?me:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Me:we)(t,n)},Ne=function(){for(var t,n=sn;t=n.sourceEvent;)n=t;return n},Oe=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},je=function(t,n,e){arguments.length<3&&(e=n,n=Ne().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Oe(t,r);return null},Ie=function(t){var n=Ne();return n.changedTouches&&(n=n.changedTouches[0]),Oe(t,n)},Pe=0,Re=0,Le=0,ze=0,Fe=0,Be=0,De="object"==typeof performance&&performance.now?performance:Date,Ue="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function qe(){return Fe||(Ue(Ve),Fe=De.now()+Be)}function Ve(){Fe=0}function We(){this._call=this._time=this._next=null}function He(t,n,e){var r=new We;return r.restart(t,n,e),r}function Ye(){qe(),++Pe;for(var t,n=Ae;n;)(t=Fe-n._time)>=0&&n._call.call(null,t),n=n._next;--Pe}function $e(){Fe=(ze=De.now())+Be,Pe=Re=0;try{Ye()}finally{Pe=0,function(){var t,n,e=Ae,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ae=n);Ce=t,Ge(r)}(),Fe=0}}function Xe(){var t=De.now(),n=t-ze;n>1e3&&(Be-=n,ze=t)}function Ge(t){Pe||(Re&&(Re=clearTimeout(Re)),t-Fe>24?(t<1/0&&(Re=setTimeout($e,t-De.now()-Be)),Le&&(Le=clearInterval(Le))):(Le||(ze=De.now(),Le=setInterval(Xe,1e3)),Pe=1,Ue($e)))}We.prototype=He.prototype={constructor:We,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?qe():+e)+(null==n?0:+n),this._next||Ce===this||(Ce?Ce._next=this:Ae=this,Ce=this),this._call=t,this._time=e,Ge()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ge())}};var Ze=function(t,n,e){var r=new We;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Ke=lt("start","end","cancel","interrupt"),Je=[],Qe=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(1!==e.state)return a();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return Ze(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(Ze((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=He((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Ke,tween:Je,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function tr(t,n){var e=er(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function nr(t,n){var e=er(t,n);if(e.state>3)throw new Error("too late; already running");return e}function er(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var rr,ir,or,ur,ar=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},cr=180/Math.PI,fr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},sr=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*cr,skewX:Math.atan(c)*cr,scaleX:u,scaleY:a}};function lr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:we(t,i)},{i:c-2,x:we(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:we(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:we(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:we(t,e)},{i:a-2,x:we(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var hr=lr((function(t){return"none"===t?fr:(rr||(rr=document.createElement("DIV"),ir=document.documentElement,or=document.defaultView),rr.style.transform=t,t=or.getComputedStyle(ir.appendChild(rr),null).getPropertyValue("transform"),ir.removeChild(rr),t=t.slice(7,-1).split(","),sr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),dr=lr((function(t){return null==t?fr:(ur||(ur=document.createElementNS("http://www.w3.org/2000/svg","g")),ur.setAttribute("transform",t),(t=ur.transform.baseVal.consolidate())?(t=t.matrix,sr(t.a,t.b,t.c,t.d,t.e,t.f)):fr)}),", ",")",")");function pr(t,n){var e,r;return function(){var i=nr(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function vr(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=nr(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=a;break}c===f&&i.push(a)}o.tween=i}}function yr(t,n,e){var r=t._id;return t.each((function(){var t=nr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return er(t,r).value[n]}}var br=function(t,n){var e;return("number"==typeof n?we:n instanceof Hn?de:(e=Hn(n))?(n=e,de):Ee)(t,n)};function gr(t){return function(){this.removeAttribute(t)}}function _r(t){return function(){this.removeAttributeNS(t.space,t.local)}}function mr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function xr(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function wr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}}function Mr(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}function Sr(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function kr(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ar(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&kr(t,i)),e}return i._value=n,i}function Cr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Sr(t,i)),e}return i._value=n,i}function Er(t,n){return function(){tr(this,t).delay=+n.apply(this,arguments)}}function Tr(t,n){return n=+n,function(){tr(this,t).delay=n}}function Nr(t,n){return function(){nr(this,t).duration=+n.apply(this,arguments)}}function Or(t,n){return n=+n,function(){nr(this,t).duration=n}}function jr(t,n){if("function"!=typeof n)throw new Error;return function(){nr(this,t).ease=n}}function Ir(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?tr:nr;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var Pr=Mn.prototype.constructor;function Rr(t){return function(){this.style.removeProperty(t)}}function Lr(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function zr(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Lr(t,o,e)),r}return o._value=n,o}function Fr(t){return function(n){this.textContent=t.call(this,n)}}function Br(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Fr(r)),n}return r._value=t,r}var Dr=0;function Ur(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function qr(t){return Mn().transition(t)}function Vr(){return++Dr}var Wr=Mn.prototype;function Hr(t){return t*t*t}function Yr(t){return--t*t*t+1}function $r(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Ur.prototype=qr.prototype={constructor:Ur,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=dt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,f=r[u],s=f.length,l=o[u]=new Array(s),h=0;h<s;++h)(a=f[h])&&(c=t.call(a,a.__data__,h,f))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,Qe(l[h],n,e,h,l,er(a,e)));return new Ur(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=vt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,f=r[a],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=er(c,e),v=0,y=d.length;v<y;++v)(h=d[v])&&Qe(h,n,e,v,d,p);o.push(d),u.push(c)}return new Ur(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=yt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new Ur(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new Ur(u,this._parents,this._name,this._id)},selection:function(){return new Pr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Vr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)if(u=a[f]){var s=er(u,n);Qe(u,t,e,f,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Ur(r,this._parents,t,e)},call:Wr.call,nodes:Wr.nodes,node:Wr.node,size:Wr.size,empty:Wr.empty,each:Wr.each,on:function(t,n){var e=this._id;return arguments.length<2?er(this.node(),e).on.on(t):this.each(Ir(e,t,n))},attr:function(t,n){var e=St(t),r="transform"===e?dr:br;return this.attrTween(t,"function"==typeof n?(e.local?Mr:wr)(e,r,yr(this,"attr."+t,n)):null==n?(e.local?_r:gr)(e):(e.local?xr:mr)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=St(t);return this.tween(e,(r.local?Ar:Cr)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?hr:br;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Rt(this,t),u=(this.style.removeProperty(t),Rt(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Rr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Rt(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Rt(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,yr(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=nr(this,t),f=c.on,s=null==c.value[u]?o||(o=Rr(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(a,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Rt(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,zr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(yr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Br(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=er(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?pr:vr)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Er:Tr)(n,t)):er(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Nr:Or)(n,t)):er(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(jr(n,t)):er(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each((function(){var e=nr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n}))}))}};var Xr={time:null,delay:0,duration:250,ease:$r};function Gr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Xr.time=qe(),Xr;return e}Mn.prototype.interrupt=function(t){return this.each((function(){ar(this,t)}))},Mn.prototype.transition=function(t){var n,e;t instanceof Ur?(n=t._id,t=t._name):(n=Vr(),(e=Xr).time=qe(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)(u=a[f])&&Qe(u,t,n,f,a,e||Gr(u,n));return new Ur(r,this._parents,t,n)};var Zr=[null],Kr=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Ur([[t]],Zr,n,+r);return null},Jr=function(t){return function(){return t}},Qr=function(t,n,e){this.target=t,this.type=n,this.selection=e};function ti(){sn.stopImmediatePropagation()}var ni=function(){sn.preventDefault(),sn.stopImmediatePropagation()},ei={name:"drag"},ri={name:"space"},ii={name:"handle"},oi={name:"center"};function ui(t){return[+t[0],+t[1]]}function ai(t){return[ui(t[0]),ui(t[1])]}function ci(t){return function(n){return je(n,sn.touches,t)}}var fi={name:"x",handles:["w","e"].map(bi),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},si={name:"y",handles:["n","s"].map(bi),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},li={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(bi),input:function(t){return null==t?null:ai(t)},output:function(t){return t}},hi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},di={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},pi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},vi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},yi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function bi(t){return{type:t}}function gi(){return!sn.ctrlKey&&!sn.button}function _i(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function mi(){return navigator.maxTouchPoints||"ontouchstart"in this}function xi(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function wi(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Mi(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Si(){return Ci(fi)}function ki(){return Ci(si)}var Ai=function(){return Ci(li)};function Ci(t){var n,e=_i,r=gi,i=mi,o=!0,u=lt("start","brush","end"),a=6;function c(n){var e=n.property("__brush",v).selectAll(".overlay").data([bi("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",hi.overlay).merge(e).each((function(){var t=xi(this).extent;Sn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([bi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",hi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return hi[t.type]})),n.each(f).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(){var t=Sn(this),n=xi(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-a/2:n[0][0]-a/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-a/2:n[0][1]-a/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+a:a})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+a:a}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,n,e){return!e&&t.__brush.emitter||new l(t,n)}function l(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function h(){if((!n||sn.touches)&&r.apply(this,arguments)){var e,i,u,a,c,l,h,d,p,v,y,b=this,g=sn.target.__data__.type,_="selection"===(o&&sn.metaKey?g="overlay":g)?ei:o&&sn.altKey?oi:ii,m=t===si?null:vi[g],x=t===fi?null:yi[g],w=xi(b),M=w.extent,S=w.selection,k=M[0][0],A=M[0][1],C=M[1][0],E=M[1][1],T=0,N=0,O=m&&x&&o&&sn.shiftKey,j=sn.touches?ci(sn.changedTouches[0].identifier):Ie,I=j(b),P=I,R=s(b,arguments,!0).beforestart();"overlay"===g?(S&&(p=!0),w.selection=S=[[e=t===si?k:I[0],u=t===fi?A:I[1]],[c=t===si?C:e,h=t===fi?E:u]]):(e=S[0][0],u=S[0][1],c=S[1][0],h=S[1][1]),i=e,a=u,l=c,d=h;var L=Sn(b).attr("pointer-events","none"),z=L.selectAll(".overlay").attr("cursor",hi[g]);if(sn.touches)R.moved=B,R.ended=U;else{var F=Sn(sn.view).on("mousemove.brush",B,!0).on("mouseup.brush",U,!0);o&&F.on("keydown.brush",q,!0).on("keyup.brush",V,!0),Cn(sn.view)}ti(),ar(b),f.call(b),R.start()}function B(){var t=j(b);!O||v||y||(Math.abs(t[0]-P[0])>Math.abs(t[1]-P[1])?y=!0:v=!0),P=t,p=!0,ni(),D()}function D(){var t;switch(T=P[0]-I[0],N=P[1]-I[1],_){case ri:case ei:m&&(T=Math.max(k-e,Math.min(C-c,T)),i=e+T,l=c+T),x&&(N=Math.max(A-u,Math.min(E-h,N)),a=u+N,d=h+N);break;case ii:m<0?(T=Math.max(k-e,Math.min(C-e,T)),i=e+T,l=c):m>0&&(T=Math.max(k-c,Math.min(C-c,T)),i=e,l=c+T),x<0?(N=Math.max(A-u,Math.min(E-u,N)),a=u+N,d=h):x>0&&(N=Math.max(A-h,Math.min(E-h,N)),a=u,d=h+N);break;case oi:m&&(i=Math.max(k,Math.min(C,e-T*m)),l=Math.max(k,Math.min(C,c+T*m))),x&&(a=Math.max(A,Math.min(E,u-N*x)),d=Math.max(A,Math.min(E,h+N*x)))}l<i&&(m*=-1,t=e,e=c,c=t,t=i,i=l,l=t,g in di&&z.attr("cursor",hi[g=di[g]])),d<a&&(x*=-1,t=u,u=h,h=t,t=a,a=d,d=t,g in pi&&z.attr("cursor",hi[g=pi[g]])),w.selection&&(S=w.selection),v&&(i=S[0][0],l=S[1][0]),y&&(a=S[0][1],d=S[1][1]),S[0][0]===i&&S[0][1]===a&&S[1][0]===l&&S[1][1]===d||(w.selection=[[i,a],[l,d]],f.call(b),R.brush())}function U(){if(ti(),sn.touches){if(sn.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else En(sn.view,p),F.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);L.attr("pointer-events","all"),z.attr("cursor",hi.overlay),w.selection&&(S=w.selection),wi(S)&&(w.selection=null,f.call(b)),R.end()}function q(){switch(sn.keyCode){case 16:O=m&&x;break;case 18:_===ii&&(m&&(c=l-T*m,e=i+T*m),x&&(h=d-N*x,u=a+N*x),_=oi,D());break;case 32:_!==ii&&_!==oi||(m<0?c=l-T:m>0&&(e=i-T),x<0?h=d-N:x>0&&(u=a-N),_=ri,z.attr("cursor",hi.selection),D());break;default:return}ni()}function V(){switch(sn.keyCode){case 16:O&&(v=y=O=!1,D());break;case 18:_===oi&&(m<0?c=l:m>0&&(e=i),x<0?h=d:x>0&&(u=a),_=ii,D());break;case 32:_===ri&&(sn.altKey?(m&&(c=l-T*m,e=i+T*m),x&&(h=d-N*x,u=a+N*x),_=oi):(m<0?c=l:m>0&&(e=i),x<0?h=d:x>0&&(u=a),_=ii),z.attr("cursor",hi[g]),D());break;default:return}ni()}}function d(){s(this,arguments).moved()}function p(){s(this,arguments).ended()}function v(){var n=this.__brush||{selection:null};return n.extent=ai(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e){n.selection?n.on("start.brush",(function(){s(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){s(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=s(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),a=Te(o,u);function c(t){r.selection=1===t&&null===u?null:a(t),f.call(n),i.brush()}return null!==o&&null!==u?c:c(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=s(n,r).beforestart();ar(n),i.selection=null===o?null:o,f.call(n),u.start().brush().end()}))},c.clear=function(t){c.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){yn(new Qr(c,n,t.output(this.state.selection)),u.apply,u,[n,this.that,this.args])}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:Jr(ai(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:Jr(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:Jr(!!t),c):i},c.handleSize=function(t){return arguments.length?(a=+t,c):a},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=u.on.apply(u,arguments);return t===u?c:t},c}var Ei=Math.cos,Ti=Math.sin,Ni=Math.PI,Oi=Ni/2,ji=2*Ni,Ii=Math.max;function Pi(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var Ri=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,f,s,l=i.length,h=[],d=M(l),p=[],v=[],y=v.groups=new Array(l),b=new Array(l*l);for(o=0,f=-1;++f<l;){for(u=0,s=-1;++s<l;)u+=i[f][s];h.push(u),p.push(M(l)),o+=u}for(n&&d.sort((function(t,e){return n(h[t],h[e])})),e&&p.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=Ii(0,ji-t*l)/o)?t:ji/l,u=0,f=-1;++f<l;){for(a=u,s=-1;++s<l;){var g=d[f],_=p[g][s],m=i[g][_],x=u,w=u+=m*o;b[_*l+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:m}}y[g]={index:g,startAngle:a,endAngle:u,value:h[g]},u+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var S=b[s*l+f],k=b[f*l+s];(S.value||k.value)&&v.push(S.value<k.value?{source:k,target:S}:{source:S,target:k})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=Ii(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Pi(t))._=t,i):r&&r._},i},Li=Array.prototype.slice,zi=function(t){return function(){return t}},Fi=Math.PI,Bi=2*Fi,Di=Bi-1e-6;function Ui(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function qi(){return new Ui}Ui.prototype=qi.prototype={constructor:Ui,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,f=o-t,s=u-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*a-c*f)>1e-6&&i){var h=e-o,d=r-u,p=a*a+c*c,v=h*h+d*d,y=Math.sqrt(p),b=Math.sqrt(l),g=i*Math.tan((Fi-Math.acos((p+l-v)/(2*y*b)))/2),_=g/b,m=g/y;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*f)+","+(n+_*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+m*a)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,f=n+a,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%Bi+Bi),l>Di?this._+="A"+e+","+e+",0,1,"+s+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=Fi)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Vi=qi;function Wi(t){return t.source}function Hi(t){return t.target}function Yi(t){return t.radius}function $i(t){return t.startAngle}function Xi(t){return t.endAngle}var Gi=function(){var t=Wi,n=Hi,e=Yi,r=$i,i=Xi,o=null;function u(){var u,a=Li.call(arguments),c=t.apply(this,a),f=n.apply(this,a),s=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Oi,h=i.apply(this,a)-Oi,d=s*Ei(l),p=s*Ti(l),v=+e.apply(this,(a[0]=f,a)),y=r.apply(this,a)-Oi,b=i.apply(this,a)-Oi;if(o||(o=u=Vi()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===y&&h===b||(o.quadraticCurveTo(0,0,v*Ei(y),v*Ti(y)),o.arc(0,0,v,y,b)),o.quadraticCurveTo(0,0,d,p),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:zi(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:zi(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:zi(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function Zi(){}function Ki(t,n){var e=new Zi;if(t instanceof Zi)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}Zi.prototype=Ki.prototype={constructor:Zi,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Ji=Ki,Qi=function(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=Ji(),v=u();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each((function(t,n){a(v,n,o(t,i,u,a))})),v}return e={object:function(t){return o(t,0,to,no)},map:function(t){return o(t,0,eo,ro)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var u,a=i[o-1];return null!=n&&o>=r.length?u=e.entries():(u=[],e.each((function(n,e){u.push({key:e,values:t(n,o)})}))),null!=a?u.sort((function(t,n){return a(t.key,n.key)})):u}(o(t,0,eo,ro),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function to(){return{}}function no(t,n,e){t[n]=e}function eo(){return Ji()}function ro(t,n,e){t.set(n,e)}function io(){}var oo=Ji.prototype;function uo(t,n){var e=new io;if(t instanceof io)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}io.prototype=uo.prototype={constructor:io,has:oo.has,add:function(t){return this["$"+(t+="")]=t,this},remove:oo.remove,clear:oo.clear,values:oo.keys,size:oo.size,empty:oo.empty,each:oo.each};var ao=uo,co=function(t){var n=[];for(var e in t)n.push(e);return n},fo=function(t){var n=[];for(var e in t)n.push(t[e]);return n},so=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},lo=Math.PI/180,ho=180/Math.PI;function po(t){if(t instanceof bo)return new bo(t.l,t.a,t.b,t.opacity);if(t instanceof ko)return Ao(t);t instanceof Zn||(t=Xn(t));var n,e,r=xo(t.r),i=xo(t.g),o=xo(t.b),u=go((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=u:(n=go((.4360747*r+.3850649*i+.1430804*o)/.96422),e=go((.0139322*r+.0971045*i+.7141733*o)/.82521)),new bo(116*u-16,500*(n-u),200*(u-e),t.opacity)}function vo(t,n){return new bo(t,0,0,null==n?1:n)}function yo(t,n,e,r){return 1===arguments.length?po(t):new bo(t,n,e,null==r?1:r)}function bo(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function go(t){return t>6/29*(6/29)*(6/29)?Math.pow(t,1/3):t/(6/29*3*(6/29))+4/29}function _o(t){return t>6/29?t*t*t:6/29*3*(6/29)*(t-4/29)}function mo(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function xo(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function wo(t){if(t instanceof ko)return new ko(t.h,t.c,t.l,t.opacity);if(t instanceof bo||(t=po(t)),0===t.a&&0===t.b)return new ko(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*ho;return new ko(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Mo(t,n,e,r){return 1===arguments.length?wo(t):new ko(e,n,t,null==r?1:r)}function So(t,n,e,r){return 1===arguments.length?wo(t):new ko(t,n,e,null==r?1:r)}function ko(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Ao(t){if(isNaN(t.h))return new bo(t.l,0,0,t.opacity);var n=t.h*lo;return new bo(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}Tn(bo,yo,Nn(On,{brighter:function(t){return new bo(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new bo(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Zn(mo(3.1338561*(n=.96422*_o(n))-1.6168667*(t=1*_o(t))-.4906146*(e=.82521*_o(e))),mo(-.9787684*n+1.9161415*t+.033454*e),mo(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Tn(ko,So,Nn(On,{brighter:function(t){return new ko(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ko(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ao(this).rgb()}}));var Co=-.29227,Eo=-1.7884503806,To=3.5172982438,No=-.6557636667999999;function Oo(t){if(t instanceof Io)return new Io(t.h,t.s,t.l,t.opacity);t instanceof Zn||(t=Xn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(No*r+Eo*n-To*e)/(No+Eo-To),o=r-i,u=(1.97294*(e-i)-Co*o)/-.90649,a=Math.sqrt(u*u+o*o)/(1.97294*i*(1-i)),c=a?Math.atan2(u,o)*ho-120:NaN;return new Io(c<0?c+360:c,a,i,t.opacity)}function jo(t,n,e,r){return 1===arguments.length?Oo(t):new Io(t,n,e,null==r?1:r)}function Io(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}Tn(Io,jo,Nn(On,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Io(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Io(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*lo,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Zn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(Co*r+-.90649*i)),255*(n+e*(1.97294*r)),this.opacity)}}));var Po=Array.prototype.slice,Ro=function(t,n){return t-n},Lo=function(t){return function(){return t}},zo=function(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=Fo(t,n[r]))return e;return 0};function Fo(t,n){for(var e=n[0],r=n[1],i=-1,o=0,u=t.length,a=u-1;o<u;a=o++){var c=t[o],f=c[0],s=c[1],l=t[a],h=l[0],d=l[1];if(Bo(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function Bo(t,n,e){var r,i,o,u;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],u=n[r],i<=o&&o<=u||u<=o&&o<=i)}var Do=function(){},Uo=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],qo=function(){var t=1,n=1,e=N,r=a;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(Ro);else{var r=b(t),i=r[0],u=r[1];n=T(i,u,n),n=M(Math.floor(i/n)*n,Math.floor(u/n)*n,n)}return n.map((function(n){return o(t,n)}))}function o(e,i){var o=[],a=[];return function(e,r,i){var o,a,c,f,s,l,h=new Array,d=new Array;o=a=-1,f=e[0]>=r,Uo[f<<1].forEach(p);for(;++o<t-1;)c=f,f=e[o+1]>=r,Uo[c|f<<1].forEach(p);Uo[f<<0].forEach(p);for(;++a<n-1;){for(o=-1,f=e[a*t+t]>=r,s=e[a*t]>=r,Uo[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[a*t+t+o+1]>=r,l=s,s=e[a*t+o+1]>=r,Uo[c|f<<1|s<<2|l<<3].forEach(p);Uo[f|s<<3].forEach(p)}o=-1,s=e[a*t]>=r,Uo[s<<2].forEach(p);for(;++o<t-1;)l=s,s=e[a*t+o+1]>=r,Uo[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+a],c=[t[1][0]+o,t[1][1]+a],f=u(r),s=u(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}Uo[s<<3].forEach(p)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):a.push(t)})),a.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==zo((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function u(n){return 2*n[0]+n[1]*(t+1)*4}function a(e,r,i){e.forEach((function(e){var o,u=e[0],a=e[1],c=0|u,f=0|a,s=r[f*t+c];u>0&&u<t&&c===u&&(o=r[f*t+c-1],e[0]=u+(i-o)/(s-o)-.5),a>0&&a<n&&f===a&&(o=r[(f-1)*t+c],e[1]=a+(i-o)/(s-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(r>0&&o>0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?Lo(Po.call(t)):Lo(t),i):e},i.smooth=function(t){return arguments.length?(r=t?a:Do,i):r===a},i};function Vo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<i;++u)for(var a=0,c=0;a<r+e;++a)a<r&&(c+=t.data[a+u*r]),a>=e&&(a>=o&&(c-=t.data[a-o+u*r]),n.data[a-e+u*r]=c/Math.min(a+1,r-1+o-a,o))}function Wo(t,n,e){for(var r=t.width,i=t.height,o=1+(e<<1),u=0;u<r;++u)for(var a=0,c=0;a<i+e;++a)a<i&&(c+=t.data[u+a*r]),a>=e&&(a>=o&&(c-=t.data[u+(a-o)*r]),n.data[u+(a-e)*r]=c/Math.min(a+1,i-1+o-a,o))}function Ho(t){return t[0]}function Yo(t){return t[1]}function $o(){return 1}var Xo=function(){var t=Ho,n=Yo,e=$o,r=960,i=500,o=20,u=2,a=3*o,c=r+2*a>>u,f=i+2*a>>u,s=Lo(20);function l(r){var i=new Float32Array(c*f),l=new Float32Array(c*f);r.forEach((function(r,o,s){var l=+t(r,o,s)+a>>u,h=+n(r,o,s)+a>>u,d=+e(r,o,s);l>=0&&l<c&&h>=0&&h<f&&(i[l+h*c]+=d)})),Vo({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),Wo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),Vo({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),Wo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u),Vo({width:c,height:f,data:i},{width:c,height:f,data:l},o>>u),Wo({width:c,height:f,data:l},{width:c,height:f,data:i},o>>u);var d=s(i);if(!Array.isArray(d)){var p=R(i);d=T(0,p,d),(d=M(0,Math.floor(p/d)*d,d)).shift()}return qo().thresholds(d).size([c,f])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,u)-a,t[1]=t[1]*Math.pow(2,u)-a}function y(){return c=r+2*(a=3*o)>>u,f=i+2*a>>u,l}return l.x=function(n){return arguments.length?(t="function"==typeof n?n:Lo(+n),l):t},l.y=function(t){return arguments.length?(n="function"==typeof t?t:Lo(+t),l):n},l.weight=function(t){return arguments.length?(e="function"==typeof t?t:Lo(+t),l):e},l.size=function(t){if(!arguments.length)return[r,i];var n=Math.ceil(t[0]),e=Math.ceil(t[1]);if(!(n>=0||n>=0))throw new Error("invalid size");return r=n,i=e,y()},l.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),y()},l.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?Lo(Po.call(t)):Lo(t),l):s},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*t*t+1)-1)/2),y()},l},Go=function(t){return function(){return t}};function Zo(t,n,e,r,i,o,u,a,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=f}function Ko(){return!sn.ctrlKey&&!sn.button}function Jo(){return this.parentNode}function Qo(t){return null==t?{x:sn.x,y:sn.y}:t}function tu(){return navigator.maxTouchPoints||"ontouchstart"in this}Zo.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var nu=function(){var t,n,e,r,i=Ko,o=Jo,u=Qo,a=tu,c={},f=lt("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(a).on("touchstart.drag",y).on("touchmove.drag",b).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var u=_("mouse",o.apply(this,arguments),Ie,this,arguments);u&&(Sn(sn.view).on("mousemove.drag",p,!0).on("mouseup.drag",v,!0),Cn(sn.view),kn(),e=!1,t=sn.clientX,n=sn.clientY,u("start"))}}function p(){if(An(),!e){var r=sn.clientX-t,i=sn.clientY-n;e=r*r+i*i>l}c.mouse("drag")}function v(){Sn(sn.view).on("mousemove.drag mouseup.drag",null),En(sn.view,e),An(),c.mouse("end")}function y(){if(i.apply(this,arguments)){var t,n,e=sn.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=_(e[t].identifier,r,je,this,arguments))&&(kn(),n("start"))}}function b(){var t,n,e=sn.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(An(),n("drag"))}function g(){var t,n,e=sn.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(kn(),n("end"))}function _(t,n,e,r,i){var o,a,l,d=e(n,t),p=f.copy();if(yn(new Zo(h,"beforestart",o,t,s,d[0],d[1],0,0,p),(function(){return null!=(sn.subject=o=u.apply(r,i))&&(a=o.x-d[0]||0,l=o.y-d[1]||0,!0)})))return function u(f){var v,y=d;switch(f){case"start":c[t]=u,v=s++;break;case"end":delete c[t],--s;case"drag":d=e(n,t),v=s}yn(new Zo(h,f,o,t,v,d[0]+a,d[1]+l,d[0]-y[0],d[1]-y[1],p),p.apply,p,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:Go(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:Go(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:Go(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:Go(!!t),h):a},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},eu={},ru={};function iu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function ou(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function uu(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function au(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+uu(-n,6):n>9999?"+"+uu(n,6):uu(n,4))+"-"+uu(t.getUTCMonth()+1,2)+"-"+uu(t.getUTCDate(),2)+(o?"T"+uu(e,2)+":"+uu(r,2)+":"+uu(i,2)+"."+uu(o,3)+"Z":i?"T"+uu(e,2)+":"+uu(r,2)+":"+uu(i,2)+"Z":r||e?"T"+uu(e,2)+":"+uu(r,2)+"Z":"")}var cu=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,f=!1;function s(){if(c)return ru;if(f)return f=!1,eu;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?c=!0:10===(r=t.charCodeAt(u++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=s())!==ru;){for(var l=[];r!==eu&&r!==ru;)l.push(r),r=s();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?au(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=iu(t);return function(r,i){return n(e(r),i,t)}}(t,n):iu(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=ou(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=ou(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:u}},fu=cu(","),su=fu.parse,lu=fu.parseRows,hu=fu.format,du=fu.formatBody,pu=fu.formatRows,vu=fu.formatRow,yu=fu.formatValue,bu=cu("\t"),gu=bu.parse,_u=bu.parseRows,mu=bu.format,xu=bu.formatBody,wu=bu.formatRows,Mu=bu.formatRow,Su=bu.formatValue;function ku(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Au&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}var Au=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Cu(t){return+t}function Eu(t){return t*t}function Tu(t){return t*(2-t)}function Nu(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var Ou=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),ju=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Iu=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Pu=Math.PI,Ru=Pu/2;function Lu(t){return 1-Math.cos(t*Ru)}function zu(t){return Math.sin(t*Ru)}function Fu(t){return(1-Math.cos(Pu*t))/2}function Bu(t){return Math.pow(2,10*t-10)}function Du(t){return 1-Math.pow(2,-10*t)}function Uu(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function qu(t){return 1-Math.sqrt(1-t*t)}function Vu(t){return Math.sqrt(1- --t*t)}function Wu(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function Hu(t){return 1-Yu(1-t)}function Yu(t){return(t=+t)<4/11?7.5625*t*t:t<8/11?7.5625*(t-=6/11)*t+3/4:t<10/11?7.5625*(t-=9/11)*t+15/16:7.5625*(t-=21/22)*t+63/64}function $u(t){return((t*=2)<=1?1-Yu(1-t):Yu(t-1)+1)/2}var Xu=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),Gu=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),Zu=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),Ku=2*Math.PI,Ju=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ku);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Ku)},i.period=function(e){return t(n,e)},i}(1,.3),Qu=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ku);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Ku)},i.period=function(e){return t(n,e)},i}(1,.3),ta=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ku);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Ku)},i.period=function(e){return t(n,e)},i}(1,.3);function na(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var ea=function(t,n){return fetch(t,n).then(na)};function ra(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var ia=function(t,n){return fetch(t,n).then(ra)};function oa(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var ua=function(t,n){return fetch(t,n).then(oa)};function aa(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),ua(n,e).then((function(n){return t(n,r)}))}}function ca(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=cu(t);return ua(n,e).then((function(t){return i.parse(t,r)}))}var fa=aa(su),sa=aa(gu),la=function(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))};function ha(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}var da=function(t,n){return fetch(t,n).then(ha)};function pa(t){return function(n,e){return ua(n,e).then((function(n){return(new DOMParser).parseFromString(n,t)}))}}var va=pa("application/xml"),ya=pa("text/html"),ba=pa("image/svg+xml"),ga=function(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},_a=function(t){return function(){return t}},ma=function(){return 1e-6*(Math.random()-.5)};function xa(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,f,s,l,h,d=t._root,p={data:r},v=t._x0,y=t._y0,b=t._x1,g=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(v+b)/2))?v=o:b=o,(s=e>=(u=(y+g)/2))?y=u:g=u,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(a=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===a&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+b)/2))?v=o:b=o,(s=e>=(u=(y+g)/2))?y=u:g=u}while((l=s<<1|f)==(h=(c>=u)<<1|a>=o));return i[h]=d,i[l]=p,t}var wa=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Ma(t){return t[0]}function Sa(t){return t[1]}function ka(t,n,e){var r=new Aa(null==n?Ma:n,null==e?Sa:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Aa(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Ca(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Ea=ka.prototype=Aa.prototype;function Ta(t){return t.x+t.vx}function Na(t){return t.y+t.vy}Ea.copy=function(){var t,n,e=new Aa(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Ca(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Ca(n));return e},Ea.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return xa(this.cover(n,e),n,e,t)},Ea.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));if(c>s||f>l)return this;for(this.cover(c,f).cover(s,l),e=0;e<o;++e)xa(this,u[e],a[e],t[e]);return this},Ea.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var u,a,c=i-e,f=this._root;e>t||t>=i||r>n||n>=o;)switch(a=(n<r)<<1|t<e,(u=new Array(4))[a]=f,f=u,c*=2,a){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Ea.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Ea.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Ea.find=function(t,n,e){var r,i,o,u,a,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new wa(v,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>d||(u=c.x1)<s||(a=c.y1)<l))if(v.length){var y=(i+u)/2,b=(o+a)/2;p.push(new wa(v[3],y,b,u,a),new wa(v[2],i,b,y,a),new wa(v[1],y,o,u,b),new wa(v[0],i,o,y,b)),(f=(n>=b)<<1|t>=y)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var g=t-+this._x.call(null,v.data),_=n-+this._y.call(null,v.data),m=g*g+_*_;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=v.data}}return r},Ea.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,f,s,l,h,d=this._root,p=this._x0,v=this._y0,y=this._x1,b=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(a=(p+y)/2))?p=a:y=a,(s=u>=(c=(v+b)/2))?v=c:b=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Ea.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Ea.root=function(){return this._root},Ea.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Ea.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new wa(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var f=(r+o)/2,s=(i+u)/2;(e=c[3])&&a.push(new wa(e,f,s,o,u)),(e=c[2])&&a.push(new wa(e,r,s,f,u)),(e=c[1])&&a.push(new wa(e,f,i,o,s)),(e=c[0])&&a.push(new wa(e,r,i,f,s))}return this},Ea.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new wa(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,f=n.y1,s=(u+c)/2,l=(a+f)/2;(o=i[0])&&e.push(new wa(o,u,a,s,l)),(o=i[1])&&e.push(new wa(o,s,a,c,l)),(o=i[2])&&e.push(new wa(o,u,l,s,f)),(o=i[3])&&e.push(new wa(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Ea.x=function(t){return arguments.length?(this._x=t,this):this._x},Ea.y=function(t){return arguments.length?(this._y=t,this):this._y};var Oa=function(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=ka(n,Ta,Na).visitAfter(u),t=0;t<h;++t)a=n[t],s=e[a.index],l=s*s,c=a.x+a.vx,f=a.y+a.vy,o.visit(p);function p(t,n,e,i,o){var u=t.data,h=t.r,d=s+h;if(!u)return n>c+d||i<c-d||e>f+d||o<f-d;if(u.index>a.index){var p=c-u.x-u.vx,v=f-u.y-u.vy,y=p*p+v*v;y<d*d&&(0===p&&(y+=(p=ma())*p),0===v&&(y+=(v=ma())*v),y=(d-(y=Math.sqrt(y)))/y*r,a.vx+=(p*=y)*(d=(h*=h)/(l+h)),a.vy+=(v*=y)*d,u.vx-=p*(d=1-d),u.vy-=v*d)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=_a(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),a(),o):t},o};function ja(t){return t.index}function Ia(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var Pa=function(t){var n,e,r,i,o,u=ja,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=_a(30),f=1;function s(r){for(var i=0,u=t.length;i<f;++i)for(var a,c,s,l,h,d,p,v=0;v<u;++v)c=(a=t[v]).source,l=(s=a.target).x+s.vx-c.x-c.vx||ma(),h=s.y+s.vy-c.y-c.vy||ma(),l*=d=((d=Math.sqrt(l*l+h*h))-e[v])/d*r*n[v],h*=d,s.vx-=l*(p=o[v]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var a,c,f=r.length,s=t.length,l=Ji(r,u);for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=Ia(l,c.source)),"object"!=typeof c.target&&(c.target=Ia(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(u=t,s):u},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(a="function"==typeof t?t:_a(+t),h(),s):a},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:_a(+t),d(),s):c},s};function Ra(t){return t.x}function La(t){return t.y}var za=Math.PI*(3-Math.sqrt(5)),Fa=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=Ji(),c=He(s),f=lt("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,a.each((function(t){t(e)})),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=u:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=u:(f.y=f.fy,f.vy=0);return n}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*za;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,d(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(u=(i=n-(a=t[f]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}},Ba=function(){var t,n,e,r,i=_a(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=ka(t,Ra,La).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/a<d)return d<u&&(0===s&&(d+=(s=ma())*s),0===l&&(d+=(l=ma())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=u)){(t.data!==n||t.next)&&(0===s&&(d+=(s=ma())*s),0===l&&(d+=(l=ma())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:_a(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c},Da=function(t,n,e){var r,i,o,u=_a(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[u]-l)*i[u]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=_a(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:_a(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a},Ua=function(t){var n,e,r,i=_a(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_a(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_a(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),u(),o):t},o},qa=function(t){var n,e,r,i=_a(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=_a(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:_a(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:_a(+n),u(),o):t},o},Va=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Wa=function(t){return(t=Va(Math.abs(t)))?t[1]:NaN},Ha=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ya(t){if(!(n=Ha.exec(t)))throw new Error("invalid format: "+t);var n;return new $a({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function $a(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Ya.prototype=$a.prototype,$a.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Xa,Ga,Za,Ka,Ja=function(t,n){var e=Va(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Qa={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ja(100*t,n)},r:Ja,s:function(t,n){var e=Va(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Xa=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Va(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},tc=function(t){return t},nc=Array.prototype.map,ec=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],rc=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?tc:(n=nc.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?tc:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(nc.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"-":t.minus+"",s=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=Ya(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,v=t.comma,y=t.precision,b=t.trim,g=t.type;"n"===g?(v=!0,g="g"):Qa[g]||(void 0===y&&(y=12),b=!0,g="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===h?o:/[%p]/.test(g)?c:"",x=Qa[g],w=/[defgprs%]/.test(g);function M(t){var i,o,c,h=_,M=m;if("c"===g)M=x(t)+M,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?s:x(Math.abs(t),y),b&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),S&&0==+t&&"+"!==l&&(S=!1),h=(S?"("===l?l:f:"-"===l||"("===l?"":l)+h,M=("s"===g?ec[8+Xa/3]:"")+M+(S&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){M=(46===c?u+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}v&&!d&&(t=r(t,1/0));var k=h.length+t.length+M.length,A=k<p?new Array(p-k+1).join(n):"";switch(v&&d&&(t=r(A+t,A.length?p-M.length:1/0),A=""),e){case"<":t=h+t+M+A;break;case"=":t=h+A+t+M;break;case"^":t=A.slice(0,k=A.length>>1)+h+t+M+A.slice(k);break;default:t=A+h+t+M}return a(t)}return y=void 0===y?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=Ya(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Wa(n)/3))),i=Math.pow(10,-r),o=ec[8+r/3];return function(t){return e(i*t)+o}}}};function ic(t){return Ga=rc(t),Za=Ga.format,Ka=Ga.formatPrefix,Ga}ic({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var oc=function(t){return Math.max(0,-Wa(Math.abs(t)))},uc=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Wa(n)/3)))-Wa(Math.abs(t)))},ac=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Wa(n)-Wa(t))+1},cc=function(){return new fc};function fc(){this.reset()}fc.prototype={constructor:fc,reset:function(){this.s=this.t=0},add:function(t){lc(sc,t,this.t),lc(this,sc.s,this.s),this.s?this.t+=sc.t:this.s=sc.t},valueOf:function(){return this.s}};var sc=new fc;function lc(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var hc=Math.PI,dc=hc/2,pc=hc/4,vc=2*hc,yc=180/hc,bc=hc/180,gc=Math.abs,_c=Math.atan,mc=Math.atan2,xc=Math.cos,wc=Math.ceil,Mc=Math.exp,Sc=(Math.floor,Math.log),kc=Math.pow,Ac=Math.sin,Cc=Math.sign||function(t){return t>0?1:t<0?-1:0},Ec=Math.sqrt,Tc=Math.tan;function Nc(t){return t>1?0:t<-1?hc:Math.acos(t)}function Oc(t){return t>1?dc:t<-1?-dc:Math.asin(t)}function jc(t){return(t=Ac(t/2))*t}function Ic(){}function Pc(t,n){t&&Lc.hasOwnProperty(t.type)&&Lc[t.type](t,n)}var Rc={Feature:function(t,n){Pc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Pc(e[r].geometry,n)}},Lc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){zc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)zc(e[r],n,0)},Polygon:function(t,n){Fc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Fc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Pc(e[r],n)}};function zc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Fc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)zc(t[e],n,1);n.polygonEnd()}var Bc,Dc,Uc,qc,Vc,Wc=function(t,n){t&&Rc.hasOwnProperty(t.type)?Rc[t.type](t,n):Pc(t,n)},Hc=cc(),Yc=cc(),$c={point:Ic,lineStart:Ic,lineEnd:Ic,polygonStart:function(){Hc.reset(),$c.lineStart=Xc,$c.lineEnd=Gc},polygonEnd:function(){var t=+Hc;Yc.add(t<0?vc+t:t),this.lineStart=this.lineEnd=this.point=Ic},sphere:function(){Yc.add(vc)}};function Xc(){$c.point=Zc}function Gc(){Kc(Bc,Dc)}function Zc(t,n){$c.point=Kc,Bc=t,Dc=n,Uc=t*=bc,qc=xc(n=(n*=bc)/2+pc),Vc=Ac(n)}function Kc(t,n){var e=(t*=bc)-Uc,r=e>=0?1:-1,i=r*e,o=xc(n=(n*=bc)/2+pc),u=Ac(n),a=Vc*u,c=qc*o+a*xc(i),f=a*r*Ac(i);Hc.add(mc(f,c)),Uc=t,qc=o,Vc=u}var Jc=function(t){return Yc.reset(),Wc(t,$c),2*Yc};function Qc(t){return[mc(t[1],t[0]),Oc(t[2])]}function tf(t){var n=t[0],e=t[1],r=xc(e);return[r*xc(n),r*Ac(n),Ac(e)]}function nf(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function ef(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function rf(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function of(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function uf(t){var n=Ec(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var af,cf,ff,sf,lf,hf,df,pf,vf,yf,bf=cc(),gf={point:_f,lineStart:xf,lineEnd:wf,polygonStart:function(){gf.point=Mf,gf.lineStart=Sf,gf.lineEnd=kf,bf.reset(),$c.polygonStart()},polygonEnd:function(){$c.polygonEnd(),gf.point=_f,gf.lineStart=xf,gf.lineEnd=wf,Hc<0?(af=-(ff=180),cf=-(sf=90)):bf>1e-6?sf=90:bf<-1e-6&&(cf=-90),yf[0]=af,yf[1]=ff},sphere:function(){af=-(ff=180),cf=-(sf=90)}};function _f(t,n){vf.push(yf=[af=t,ff=t]),n<cf&&(cf=n),n>sf&&(sf=n)}function mf(t,n){var e=tf([t*bc,n*bc]);if(pf){var r=ef(pf,e),i=ef([r[1],-r[0],0],r);uf(i),i=Qc(i);var o,u=t-lf,a=u>0?1:-1,c=i[0]*yc*a,f=gc(u)>180;f^(a*lf<c&&c<a*t)?(o=i[1]*yc)>sf&&(sf=o):f^(a*lf<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*yc)<cf&&(cf=o):(n<cf&&(cf=n),n>sf&&(sf=n)),f?t<lf?Af(af,t)>Af(af,ff)&&(ff=t):Af(t,ff)>Af(af,ff)&&(af=t):ff>=af?(t<af&&(af=t),t>ff&&(ff=t)):t>lf?Af(af,t)>Af(af,ff)&&(ff=t):Af(t,ff)>Af(af,ff)&&(af=t)}else vf.push(yf=[af=t,ff=t]);n<cf&&(cf=n),n>sf&&(sf=n),pf=e,lf=t}function xf(){gf.point=mf}function wf(){yf[0]=af,yf[1]=ff,gf.point=_f,pf=null}function Mf(t,n){if(pf){var e=t-lf;bf.add(gc(e)>180?e+(e>0?360:-360):e)}else hf=t,df=n;$c.point(t,n),mf(t,n)}function Sf(){$c.lineStart()}function kf(){Mf(hf,df),$c.lineEnd(),gc(bf)>1e-6&&(af=-(ff=180)),yf[0]=af,yf[1]=ff,pf=null}function Af(t,n){return(n-=t)<0?n+360:n}function Cf(t,n){return t[0]-n[0]}function Ef(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var Tf,Nf,Of,jf,If,Pf,Rf,Lf,zf,Ff,Bf,Df,Uf,qf,Vf,Wf,Hf=function(t){var n,e,r,i,o,u,a;if(sf=ff=-(af=cf=1/0),vf=[],Wc(t,gf),e=vf.length){for(vf.sort(Cf),n=1,o=[r=vf[0]];n<e;++n)Ef(r,(i=vf[n])[0])||Ef(r,i[1])?(Af(r[0],i[1])>Af(r[0],r[1])&&(r[1]=i[1]),Af(i[0],r[1])>Af(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=Af(r[1],i[0]))>u&&(u=a,af=i[0],ff=r[1])}return vf=yf=null,af===1/0||cf===1/0?[[NaN,NaN],[NaN,NaN]]:[[af,cf],[ff,sf]]},Yf={sphere:Ic,point:$f,lineStart:Gf,lineEnd:Jf,polygonStart:function(){Yf.lineStart=Qf,Yf.lineEnd=ts},polygonEnd:function(){Yf.lineStart=Gf,Yf.lineEnd=Jf}};function $f(t,n){t*=bc;var e=xc(n*=bc);Xf(e*xc(t),e*Ac(t),Ac(n))}function Xf(t,n,e){++Tf,Of+=(t-Of)/Tf,jf+=(n-jf)/Tf,If+=(e-If)/Tf}function Gf(){Yf.point=Zf}function Zf(t,n){t*=bc;var e=xc(n*=bc);qf=e*xc(t),Vf=e*Ac(t),Wf=Ac(n),Yf.point=Kf,Xf(qf,Vf,Wf)}function Kf(t,n){t*=bc;var e=xc(n*=bc),r=e*xc(t),i=e*Ac(t),o=Ac(n),u=mc(Ec((u=Vf*o-Wf*i)*u+(u=Wf*r-qf*o)*u+(u=qf*i-Vf*r)*u),qf*r+Vf*i+Wf*o);Nf+=u,Pf+=u*(qf+(qf=r)),Rf+=u*(Vf+(Vf=i)),Lf+=u*(Wf+(Wf=o)),Xf(qf,Vf,Wf)}function Jf(){Yf.point=$f}function Qf(){Yf.point=ns}function ts(){es(Df,Uf),Yf.point=$f}function ns(t,n){Df=t,Uf=n,t*=bc,n*=bc,Yf.point=es;var e=xc(n);qf=e*xc(t),Vf=e*Ac(t),Wf=Ac(n),Xf(qf,Vf,Wf)}function es(t,n){t*=bc;var e=xc(n*=bc),r=e*xc(t),i=e*Ac(t),o=Ac(n),u=Vf*o-Wf*i,a=Wf*r-qf*o,c=qf*i-Vf*r,f=Ec(u*u+a*a+c*c),s=Oc(f),l=f&&-s/f;zf+=l*u,Ff+=l*a,Bf+=l*c,Nf+=s,Pf+=s*(qf+(qf=r)),Rf+=s*(Vf+(Vf=i)),Lf+=s*(Wf+(Wf=o)),Xf(qf,Vf,Wf)}var rs=function(t){Tf=Nf=Of=jf=If=Pf=Rf=Lf=zf=Ff=Bf=0,Wc(t,Yf);var n=zf,e=Ff,r=Bf,i=n*n+e*e+r*r;return i<1e-12&&(n=Pf,e=Rf,r=Lf,Nf<1e-6&&(n=Of,e=jf,r=If),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[mc(e,n)*yc,Oc(r/Ec(i))*yc]},is=function(t){return function(){return t}},os=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function us(t,n){return[gc(t)>hc?t+Math.round(-t/vc)*vc:t,n]}function as(t,n,e){return(t%=vc)?n||e?os(fs(t),ss(n,e)):fs(t):n||e?ss(n,e):us}function cs(t){return function(n,e){return[(n+=t)>hc?n-vc:n<-hc?n+vc:n,e]}}function fs(t){var n=cs(t);return n.invert=cs(-t),n}function ss(t,n){var e=xc(t),r=Ac(t),i=xc(n),o=Ac(n);function u(t,n){var u=xc(n),a=xc(t)*u,c=Ac(t)*u,f=Ac(n),s=f*e+a*r;return[mc(c*i-s*o,a*e-f*r),Oc(s*i+c*o)]}return u.invert=function(t,n){var u=xc(n),a=xc(t)*u,c=Ac(t)*u,f=Ac(n),s=f*i-c*o;return[mc(c*i+f*o,a*e+s*r),Oc(s*e-a*r)]},u}us.invert=us;var ls=function(t){function n(n){return(n=t(n[0]*bc,n[1]*bc))[0]*=yc,n[1]*=yc,n}return t=as(t[0]*bc,t[1]*bc,t.length>2?t[2]*bc:0),n.invert=function(n){return(n=t.invert(n[0]*bc,n[1]*bc))[0]*=yc,n[1]*=yc,n},n};function hs(t,n,e,r,i,o){if(e){var u=xc(n),a=Ac(n),c=r*e;null==i?(i=n+r*vc,o=n-c/2):(i=ds(u,i),o=ds(u,o),(r>0?i<o:i>o)&&(i+=r*vc));for(var f,s=i;r>0?s>o:s<o;s-=c)f=Qc([u,-a*xc(s),-a*Ac(s)]),t.point(f[0],f[1])}}function ds(t,n){(n=tf(n))[0]-=t,uf(n);var e=Nc(-n[1]);return((-n[2]<0?-e:e)+vc-1e-6)%vc}var ps=function(){var t,n,e=is([0,0]),r=is(90),i=is(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=yc,e[1]*=yc}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*bc,c=i.apply(this,arguments)*bc;return t=[],n=as(-u[0]*bc,-u[1]*bc,0).invert,hs(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:is([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:is(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:is(+t),u):i},u},vs=function(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:Ic,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},ys=function(t,n){return gc(t[0]-n[0])<1e-6&&gc(t[1]-n[1])<1e-6};function bs(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var gs=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(ys(r,u)){if(!r[2]&&!u[2]){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}u[0]+=2e-6}a.push(e=new bs(r,t,null,!0)),c.push(e.o=new bs(r,null,e,!1)),a.push(e=new bs(u,t,null,!1)),c.push(e.o=new bs(u,null,e,!0))}})),a.length){for(c.sort(n),_s(a),_s(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var f,s,l=a[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,u=f.length;o<u;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function _s(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var ms=cc();function xs(t){return gc(t[0])<=hc?t[0]:Cc(t[0])*((gc(t[0])+hc)%vc-hc)}var ws=function(t,n){var e=xs(n),r=n[1],i=Ac(r),o=[Ac(e),-xc(e),0],u=0,a=0;ms.reset(),1===i?r=dc+1e-6:-1===i&&(r=-dc-1e-6);for(var c=0,f=t.length;c<f;++c)if(l=(s=t[c]).length)for(var s,l,h=s[l-1],d=xs(h),p=h[1]/2+pc,v=Ac(p),y=xc(p),b=0;b<l;++b,d=_,v=x,y=w,h=g){var g=s[b],_=xs(g),m=g[1]/2+pc,x=Ac(m),w=xc(m),M=_-d,S=M>=0?1:-1,k=S*M,A=k>hc,C=v*x;if(ms.add(mc(C*S*Ac(k),y*w+C*xc(k))),u+=A?M+S*vc:M,A^d>=e^_>=e){var E=ef(tf(h),tf(g));uf(E);var T=ef(o,E);uf(T);var N=(A^M>=0?-1:1)*Oc(T[2]);(r>N||r===N&&(E[0]||E[1]))&&(a+=A^M>=0?1:-1)}}return(u<-1e-6||u<1e-6&&ms<-1e-6)^1&a},Ms=function(t,n,e,r){return function(i){var o,u,a,c=n(i),f=vs(),s=n(f),l=!1,h={point:d,lineStart:v,lineEnd:y,polygonStart:function(){h.point=b,h.lineStart=g,h.lineEnd=_,u=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=v,h.lineEnd=y,u=F(u);var t=ws(o,r);u.length?(l||(i.polygonStart(),l=!0),gs(u,ks,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function v(){h.point=p,c.lineStart()}function y(){h.point=d,c.lineEnd()}function b(t,n){a.push([t,n]),s.point(t,n)}function g(){s.lineStart(),a=[]}function _(){b(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(a.pop(),o.push(a),a=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Ss))}return h}};function Ss(t){return t.length>1}function ks(t,n){return((t=t.x)[0]<0?t[1]-dc-1e-6:dc-t[1])-((n=n.x)[0]<0?n[1]-dc-1e-6:dc-n[1])}var As=Ms((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?hc:-hc,c=gc(o-e);gc(c-hc)<1e-6?(t.point(e,r=(r+u)/2>0?dc:-dc),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=hc&&(gc(e-i)<1e-6&&(e-=1e-6*i),gc(o-a)<1e-6&&(o-=1e-6*a),r=function(t,n,e,r){var i,o,u=Ac(t-e);return gc(u)>1e-6?_c((Ac(n)*(o=xc(r))*Ac(e)-Ac(r)*(i=xc(n))*Ac(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*dc,r.point(-hc,i),r.point(0,i),r.point(hc,i),r.point(hc,0),r.point(hc,-i),r.point(0,-i),r.point(-hc,-i),r.point(-hc,0),r.point(-hc,i);else if(gc(t[0]-n[0])>1e-6){var o=t[0]<n[0]?hc:-hc;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-hc,-dc]);var Cs=function(t){var n=xc(t),e=6*bc,r=n>0,i=gc(n)>1e-6;function o(t,e){return xc(t)*xc(e)>n}function u(t,e,r){var i=[1,0,0],o=ef(tf(t),tf(e)),u=nf(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var f=n*u/c,s=-n*a/c,l=ef(i,o),h=of(i,f);rf(h,of(o,s));var d=l,p=nf(h,d),v=nf(d,d),y=p*p-v*(nf(h,h)-1);if(!(y<0)){var b=Ec(y),g=of(d,(-p-b)/v);if(rf(g,h),g=Qc(g),!r)return g;var _,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(_=m,m=x,x=_);var S=x-m,k=gc(S-hc)<1e-6;if(!k&&M<w&&(_=w,w=M,M=_),k||S<1e-6?k?w+M>0^g[1]<(gc(g[0]-m)<1e-6?w:M):w<=g[1]&&g[1]<=M:S>hc^(m<=g[0]&&g[0]<=x)){var A=of(d,(-p+b)/v);return rf(A,h),[g,Qc(A)]}}}function a(n,e){var i=r?t:hc-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Ms(o,(function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],v=o(l,h),y=r?v?0:a(l,h):v?a(l+(l<0?hc:-hc),h):0;if(!n&&(f=c=v)&&t.lineStart(),v!==c&&(!(d=u(n,p))||ys(n,d)||ys(p,d))&&(p[2]=1),v!==c)s=0,v?(t.lineStart(),d=u(p,n),t.point(d[0],d[1])):(d=u(n,p),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(i&&n&&r^v){var b;y&e||!(b=u(p,n,!0))||(s=0,r?(t.lineStart(),t.point(b[0][0],b[0][1]),t.point(b[1][0],b[1][1]),t.lineEnd()):(t.point(b[1][0],b[1][1]),t.lineEnd(),t.lineStart(),t.point(b[0][0],b[0][1],3)))}!v||n&&ys(n,p)||t.point(p[0],p[1]),n=p,c=v,e=y},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}}),(function(n,r,i,o){hs(o,t,e,i,n,r)}),r?[0,-t]:[-hc,t-hc])};function Es(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,f){var s=0,l=0;if(null==i||(s=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==l);else f.point(o[0],o[1])}function u(r,i){return gc(r[0]-t)<1e-6?i>0?0:3:gc(r[0]-e)<1e-6?i>0?2:1:gc(r[1]-n)<1e-6?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,f,s,l,h,d,p,v,y,b,g,_=u,m=vs(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]);b=!0,y=!1,p=v=NaN},lineEnd:function(){c&&(M(l,h),d&&y&&m.rejoin(),c.push(m.result()));x.point=w,y&&_.lineEnd()},polygonStart:function(){_=m,c=[],f=[],g=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,u,a=f[e],c=1,s=a.length,l=a[0],h=l[0],d=l[1];c<s;++c)o=h,u=d,l=a[c],h=l[0],d=l[1],u<=r?d>r&&(h-o)*(r-u)>(d-u)*(t-o)&&++n:d<=r&&(h-o)*(r-u)<(d-u)*(t-o)&&--n;return n}(),e=g&&n,i=(c=F(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&gs(c,a,n,o,u),u.polygonEnd());_=u,c=f=s=null}};function w(t,n){i(t,n)&&_.point(t,n)}function M(o,u){var a=i(o,u);if(f&&s.push([o,u]),b)l=o,h=u,d=a,b=!1,a&&(_.lineStart(),_.point(o,u));else if(a&&y)_.point(o,u);else{var c=[p=Math.max(-1e9,Math.min(1e9,p)),v=Math.max(-1e9,Math.min(1e9,v))],m=[o=Math.max(-1e9,Math.min(1e9,o)),u=Math.max(-1e9,Math.min(1e9,u))];!function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}}(c,m,t,n,e,r)?a&&(_.lineStart(),_.point(o,u),g=!1):(y||(_.lineStart(),_.point(c[0],c[1])),_.point(m[0],m[1]),a||_.lineEnd(),g=!1)}p=o,v=u,y=a}return x}}var Ts,Ns,Os,js=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=Es(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}},Is=cc(),Ps={sphere:Ic,point:Ic,lineStart:function(){Ps.point=Ls,Ps.lineEnd=Rs},lineEnd:Ic,polygonStart:Ic,polygonEnd:Ic};function Rs(){Ps.point=Ps.lineEnd=Ic}function Ls(t,n){Ts=t*=bc,Ns=Ac(n*=bc),Os=xc(n),Ps.point=zs}function zs(t,n){t*=bc;var e=Ac(n*=bc),r=xc(n),i=gc(t-Ts),o=xc(i),u=r*Ac(i),a=Os*e-Ns*r*o,c=Ns*e+Os*r*o;Is.add(mc(Ec(u*u+a*a),c)),Ts=t,Ns=e,Os=r}var Fs=function(t){return Is.reset(),Wc(t,Ps),+Is},Bs=[null,null],Ds={type:"LineString",coordinates:Bs},Us=function(t,n){return Bs[0]=t,Bs[1]=n,Fs(Ds)},qs={Feature:function(t,n){return Ws(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Ws(e[r].geometry,n))return!0;return!1}},Vs={Sphere:function(){return!0},Point:function(t,n){return Hs(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Hs(e[r],n))return!0;return!1},LineString:function(t,n){return Ys(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Ys(e[r],n))return!0;return!1},Polygon:function(t,n){return $s(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if($s(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Ws(e[r],n))return!0;return!1}};function Ws(t,n){return!(!t||!Vs.hasOwnProperty(t.type))&&Vs[t.type](t,n)}function Hs(t,n){return 0===Us(t,n)}function Ys(t,n){for(var e,r,i,o=0,u=t.length;o<u;o++){if(0===(r=Us(t[o],n)))return!0;if(o>0&&(i=Us(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<1e-12*i)return!0;e=r}return!1}function $s(t,n){return!!ws(t.map(Xs),Gs(n))}function Xs(t){return(t=t.map(Gs)).pop(),t}function Gs(t){return[t[0]*bc,t[1]*bc]}var Zs=function(t,n){return(t&&qs.hasOwnProperty(t.type)?qs[t.type]:Ws)(t,n)};function Ks(t,n,e){var r=M(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function Js(t,n,e){var r=M(t,n-1e-6,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function Qs(){var t,n,e,r,i,o,u,a,c,f,s,l,h=10,d=h,p=90,v=360,y=2.5;function b(){return{type:"MultiLineString",coordinates:g()}}function g(){return M(wc(r/p)*p,e,p).map(s).concat(M(wc(a/v)*v,u,v).map(l)).concat(M(wc(n/h)*h,t,h).filter((function(t){return gc(t%p)>1e-6})).map(c)).concat(M(wc(o/d)*d,i,d).filter((function(t){return gc(t%v)>1e-6})).map(f))}return b.lines=function(){return g().map((function(t){return{type:"LineString",coordinates:t}}))},b.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(u).slice(1),s(e).reverse().slice(1),l(a).reverse().slice(1))]}},b.extent=function(t){return arguments.length?b.extentMajor(t).extentMinor(t):b.extentMinor()},b.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),b.precision(y)):[[r,a],[e,u]]},b.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),b.precision(y)):[[n,o],[t,i]]},b.step=function(t){return arguments.length?b.stepMajor(t).stepMinor(t):b.stepMinor()},b.stepMajor=function(t){return arguments.length?(p=+t[0],v=+t[1],b):[p,v]},b.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],b):[h,d]},b.precision=function(h){return arguments.length?(y=+h,c=Ks(o,i,90),f=Js(n,t,y),s=Ks(a,u,90),l=Js(r,e,y),b):y},b.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function tl(){return Qs()()}var nl,el,rl,il,ol=function(t,n){var e=t[0]*bc,r=t[1]*bc,i=n[0]*bc,o=n[1]*bc,u=xc(r),a=Ac(r),c=xc(o),f=Ac(o),s=u*xc(e),l=u*Ac(e),h=c*xc(i),d=c*Ac(i),p=2*Oc(Ec(jc(o-r)+u*c*jc(i-e))),v=Ac(p),y=p?function(t){var n=Ac(t*=p)/v,e=Ac(p-t)/v,r=e*s+n*h,i=e*l+n*d,o=e*a+n*f;return[mc(i,r)*yc,mc(o,Ec(r*r+i*i))*yc]}:function(){return[e*yc,r*yc]};return y.distance=p,y},ul=function(t){return t},al=cc(),cl=cc(),fl={point:Ic,lineStart:Ic,lineEnd:Ic,polygonStart:function(){fl.lineStart=sl,fl.lineEnd=dl},polygonEnd:function(){fl.lineStart=fl.lineEnd=fl.point=Ic,al.add(gc(cl)),cl.reset()},result:function(){var t=al/2;return al.reset(),t}};function sl(){fl.point=ll}function ll(t,n){fl.point=hl,nl=rl=t,el=il=n}function hl(t,n){cl.add(il*t-rl*n),rl=t,il=n}function dl(){hl(nl,el)}var pl=fl,vl=1/0,yl=vl,bl=-vl,gl=bl;var _l,ml,xl,wl,Ml={point:function(t,n){t<vl&&(vl=t);t>bl&&(bl=t);n<yl&&(yl=n);n>gl&&(gl=n)},lineStart:Ic,lineEnd:Ic,polygonStart:Ic,polygonEnd:Ic,result:function(){var t=[[vl,yl],[bl,gl]];return bl=gl=-(yl=vl=1/0),t}},Sl=0,kl=0,Al=0,Cl=0,El=0,Tl=0,Nl=0,Ol=0,jl=0,Il={point:Pl,lineStart:Rl,lineEnd:Fl,polygonStart:function(){Il.lineStart=Bl,Il.lineEnd=Dl},polygonEnd:function(){Il.point=Pl,Il.lineStart=Rl,Il.lineEnd=Fl},result:function(){var t=jl?[Nl/jl,Ol/jl]:Tl?[Cl/Tl,El/Tl]:Al?[Sl/Al,kl/Al]:[NaN,NaN];return Sl=kl=Al=Cl=El=Tl=Nl=Ol=jl=0,t}};function Pl(t,n){Sl+=t,kl+=n,++Al}function Rl(){Il.point=Ll}function Ll(t,n){Il.point=zl,Pl(xl=t,wl=n)}function zl(t,n){var e=t-xl,r=n-wl,i=Ec(e*e+r*r);Cl+=i*(xl+t)/2,El+=i*(wl+n)/2,Tl+=i,Pl(xl=t,wl=n)}function Fl(){Il.point=Pl}function Bl(){Il.point=Ul}function Dl(){ql(_l,ml)}function Ul(t,n){Il.point=ql,Pl(_l=xl=t,ml=wl=n)}function ql(t,n){var e=t-xl,r=n-wl,i=Ec(e*e+r*r);Cl+=i*(xl+t)/2,El+=i*(wl+n)/2,Tl+=i,Nl+=(i=wl*t-xl*n)*(xl+t),Ol+=i*(wl+n),jl+=3*i,Pl(xl=t,wl=n)}var Vl=Il;function Wl(t){this._context=t}Wl.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,vc)}},result:Ic};var Hl,Yl,$l,Xl,Gl,Zl=cc(),Kl={point:Ic,lineStart:function(){Kl.point=Jl},lineEnd:function(){Hl&&Ql(Yl,$l),Kl.point=Ic},polygonStart:function(){Hl=!0},polygonEnd:function(){Hl=null},result:function(){var t=+Zl;return Zl.reset(),t}};function Jl(t,n){Kl.point=Ql,Yl=Xl=t,$l=Gl=n}function Ql(t,n){Xl-=t,Gl-=n,Zl.add(Ec(Xl*Xl+Gl*Gl)),Xl=t,Gl=n}var th=Kl;function nh(){this._string=[]}function eh(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}nh.prototype={_radius:4.5,_circle:eh(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=eh(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var rh=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Wc(t,e(r))),r.result()}return o.area=function(t){return Wc(t,e(pl)),pl.result()},o.measure=function(t){return Wc(t,e(th)),th.result()},o.bounds=function(t){return Wc(t,e(Ml)),Ml.result()},o.centroid=function(t){return Wc(t,e(Vl)),Vl.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,ul):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new nh):new Wl(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},ih=function(t){return{stream:oh(t)}};function oh(t){return function(n){var e=new uh;for(var r in t)e[r]=t[r];return e.stream=n,e}}function uh(){}function ah(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Wc(e,t.stream(Ml)),n(Ml.result()),null!=r&&t.clipExtent(r),t}function ch(t,n,e){return ah(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])}),e)}function fh(t,n,e){return ch(t,[[0,0],n],e)}function sh(t,n,e){return ah(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])}),e)}function lh(t,n,e){return ah(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])}),e)}uh.prototype={constructor:uh,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var hh=xc(30*bc),dh=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,f,s,l,h,d,p,v,y){var b=f-r,g=s-i,_=b*b+g*g;if(_>4*n&&v--){var m=u+h,x=a+d,w=c+p,M=Ec(m*m+x*x+w*w),S=Oc(w/=M),k=gc(gc(w)-1)<1e-6||gc(o-l)<1e-6?(o+l)/2:mc(x,m),A=t(k,S),C=A[0],E=A[1],T=C-r,N=E-i,O=g*T-b*N;(O*O/_>n||gc((b*T+g*N)/_-.5)>.3||u*h+a*d+c*p<hh)&&(e(r,i,o,u,a,c,C,E,k,m/=M,x/=M,w,v,y),y.point(C,E),e(C,E,k,m,x,w,f,s,l,h,d,p,v,y))}}return function(n){var r,i,o,u,a,c,f,s,l,h,d,p,v={point:y,lineStart:b,lineEnd:_,polygonStart:function(){n.polygonStart(),v.lineStart=m},polygonEnd:function(){n.polygonEnd(),v.lineStart=b}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function b(){s=NaN,v.point=g,n.lineStart()}function g(r,i){var o=tf([r,i]),u=t(r,i);e(s,l,f,h,d,p,s=u[0],l=u[1],f=r,h=o[0],d=o[1],p=o[2],16,n),n.point(s,l)}function _(){v.point=y,n.lineEnd()}function m(){b(),v.point=x,v.lineEnd=w}function x(t,n){g(r=t,n),i=s,o=l,u=h,a=d,c=p,v.point=g}function w(){e(s,l,f,h,d,p,i,o,r,u,a,c,16,n),v.lineEnd=_,_()}return v}}(t,n):function(t){return oh({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var ph=oh({point:function(t,n){this.stream.point(t*bc,n*bc)}});function vh(t,n,e,r,i){function o(o,u){return[n+t*(o*=r),e-t*(u*=i)]}return o.invert=function(o,u){return[(o-n)/t*r,(e-u)/t*i]},o}function yh(t,n,e,r,i,o){var u=xc(o),a=Ac(o),c=u*t,f=a*t,s=u/t,l=a/t,h=(a*e-u*n)/t,d=(a*n+u*e)/t;function p(t,o){return[c*(t*=r)-f*(o*=i)+n,e-f*t-c*o]}return p.invert=function(t,n){return[r*(s*t-l*n+h),i*(d-l*t-s*n)]},p}function bh(t){return gh((function(){return t}))()}function gh(t){var n,e,r,i,o,u,a,c,f,s,l=150,h=480,d=250,p=0,v=0,y=0,b=0,g=0,_=0,m=1,x=1,w=null,M=As,S=null,k=ul,A=.5;function C(t){return c(t[0]*bc,t[1]*bc)}function E(t){return(t=c.invert(t[0],t[1]))&&[t[0]*yc,t[1]*yc]}function T(){var t=yh(l,0,0,m,x,_).apply(null,n(p,v)),r=(_?yh:vh)(l,h-t[0],d-t[1],m,x,_);return e=as(y,b,g),a=os(n,r),c=os(e,a),u=dh(a,A),N()}function N(){return f=s=null,C}return C.stream=function(t){return f&&s===t?f:f=ph(function(t){return oh({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(u(k(s=t)))))},C.preclip=function(t){return arguments.length?(M=t,w=void 0,N()):M},C.postclip=function(t){return arguments.length?(k=t,S=r=i=o=null,N()):k},C.clipAngle=function(t){return arguments.length?(M=+t?Cs(w=t*bc):(w=null,As),N()):w*yc},C.clipExtent=function(t){return arguments.length?(k=null==t?(S=r=i=o=null,ul):Es(S=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),N()):null==S?null:[[S,r],[i,o]]},C.scale=function(t){return arguments.length?(l=+t,T()):l},C.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],T()):[h,d]},C.center=function(t){return arguments.length?(p=t[0]%360*bc,v=t[1]%360*bc,T()):[p*yc,v*yc]},C.rotate=function(t){return arguments.length?(y=t[0]%360*bc,b=t[1]%360*bc,g=t.length>2?t[2]%360*bc:0,T()):[y*yc,b*yc,g*yc]},C.angle=function(t){return arguments.length?(_=t%360*bc,T()):_*yc},C.reflectX=function(t){return arguments.length?(m=t?-1:1,T()):m<0},C.reflectY=function(t){return arguments.length?(x=t?-1:1,T()):x<0},C.precision=function(t){return arguments.length?(u=dh(a,A=t*t),N()):Ec(A)},C.fitExtent=function(t,n){return ch(C,t,n)},C.fitSize=function(t,n){return fh(C,t,n)},C.fitWidth=function(t,n){return sh(C,t,n)},C.fitHeight=function(t,n){return lh(C,t,n)},function(){return n=t.apply(this,arguments),C.invert=n.invert&&E,T()}}function _h(t){var n=0,e=hc/3,r=gh(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*bc,e=t[1]*bc):[n*yc,e*yc]},i}function mh(t,n){var e=Ac(t),r=(e+Ac(n))/2;if(gc(r)<1e-6)return function(t){var n=xc(t);function e(t,e){return[t*n,Ac(e)/n]}return e.invert=function(t,e){return[t/n,Oc(e*n)]},e}(t);var i=1+e*(2*r-e),o=Ec(i)/r;function u(t,n){var e=Ec(i-2*r*Ac(n))/r;return[e*Ac(t*=r),o-e*xc(t)]}return u.invert=function(t,n){var e=o-n,u=mc(t,gc(e))*Cc(e);return e*r<0&&(u-=hc*Cc(t)*Cc(e)),[u/r,Oc((i-(t*t+e*e)*r*r)/(2*r))]},u}var xh=function(){return _h(mh).scale(155.424).center([0,33.6442])},wh=function(){return xh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var Mh=function(){var t,n,e,r,i,o,u=wh(),a=xh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=xh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},s.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),s.translate(u.translate())):u.scale()},s.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=a.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+1e-6,s+.12*n+1e-6],[o-.214*n-1e-6,s+.234*n-1e-6]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+1e-6,s+.166*n+1e-6],[o-.115*n-1e-6,s+.234*n-1e-6]]).stream(f),l()},s.fitExtent=function(t,n){return ch(s,t,n)},s.fitSize=function(t,n){return fh(s,t,n)},s.fitWidth=function(t,n){return sh(s,t,n)},s.fitHeight=function(t,n){return lh(s,t,n)},s.scale(1070)};function Sh(t){return function(n,e){var r=xc(n),i=xc(e),o=t(r*i);return[o*i*Ac(n),o*Ac(e)]}}function kh(t){return function(n,e){var r=Ec(n*n+e*e),i=t(r),o=Ac(i),u=xc(i);return[mc(n*o,r*u),Oc(r&&e*o/r)]}}var Ah=Sh((function(t){return Ec(2/(1+t))}));Ah.invert=kh((function(t){return 2*Oc(t/2)}));var Ch=function(){return bh(Ah).scale(124.75).clipAngle(179.999)},Eh=Sh((function(t){return(t=Nc(t))&&t/Ac(t)}));Eh.invert=kh((function(t){return t}));var Th=function(){return bh(Eh).scale(79.4188).clipAngle(179.999)};function Nh(t,n){return[t,Sc(Tc((dc+n)/2))]}Nh.invert=function(t,n){return[t,2*_c(Mc(n))-dc]};var Oh=function(){return jh(Nh).scale(961/vc)};function jh(t){var n,e,r,i=bh(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,f=null;function s(){var o=hc*u(),a=i(ls(i.rotate()).invert([0,0]));return c(null==f?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===Nh?[[Math.max(a[0]-o,f),n],[Math.min(a[0]+o,e),r]]:[[f,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),s()):u()},i.translate=function(t){return arguments.length?(a(t),s()):a()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Ih(t){return Tc((dc+t)/2)}function Ph(t,n){var e=xc(t),r=t===n?Ac(t):Sc(e/xc(n))/Sc(Ih(n)/Ih(t)),i=e*kc(Ih(t),r)/r;if(!r)return Nh;function o(t,n){i>0?n<1e-6-dc&&(n=1e-6-dc):n>dc-1e-6&&(n=dc-1e-6);var e=i/kc(Ih(n),r);return[e*Ac(r*t),i-e*xc(r*t)]}return o.invert=function(t,n){var e=i-n,o=Cc(r)*Ec(t*t+e*e),u=mc(t,gc(e))*Cc(e);return e*r<0&&(u-=hc*Cc(t)*Cc(e)),[u/r,2*_c(kc(i/o,1/r))-dc]},o}var Rh=function(){return _h(Ph).scale(109.5).parallels([30,30])};function Lh(t,n){return[t,n]}Lh.invert=Lh;var zh=function(){return bh(Lh).scale(152.63)};function Fh(t,n){var e=xc(t),r=t===n?Ac(t):(e-xc(n))/(n-t),i=e/r+t;if(gc(r)<1e-6)return Lh;function o(t,n){var e=i-n,o=r*t;return[e*Ac(o),i-e*xc(o)]}return o.invert=function(t,n){var e=i-n,o=mc(t,gc(e))*Cc(e);return e*r<0&&(o-=hc*Cc(t)*Cc(e)),[o/r,i-Cc(r)*Ec(t*t+e*e)]},o}var Bh=function(){return _h(Fh).scale(131.154).center([0,13.9389])},Dh=1.340264,Uh=-.081106,qh=893e-6,Vh=.003796,Wh=Ec(3)/2;function Hh(t,n){var e=Oc(Wh*Ac(n)),r=e*e,i=r*r*r;return[t*xc(e)/(Wh*(Dh+3*Uh*r+i*(7*qh+9*Vh*r))),e*(Dh+Uh*r+i*(qh+Vh*r))]}Hh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Dh+Uh*i+o*(qh+Vh*i))-n)/(Dh+3*Uh*i+o*(7*qh+9*Vh*i)))*r)*i*i,!(gc(e)<1e-12));++u);return[Wh*t*(Dh+3*Uh*i+o*(7*qh+9*Vh*i))/xc(r),Oc(Ac(r)/Wh)]};var Yh=function(){return bh(Hh).scale(177.158)};function $h(t,n){var e=xc(n),r=xc(t)*e;return[e*Ac(t)/r,Ac(n)/r]}$h.invert=kh(_c);var Xh=function(){return bh($h).scale(144.049).clipAngle(60)},Gh=function(){var t,n,e,r,i,o,u,a=1,c=0,f=0,s=1,l=1,h=0,d=null,p=1,v=1,y=oh({point:function(t,n){var e=_([t,n]);this.stream.point(e[0],e[1])}}),b=ul;function g(){return p=a*s,v=a*l,o=u=null,_}function _(e){var r=e[0]*p,i=e[1]*v;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+f]}return _.invert=function(e){var r=e[0]-c,i=e[1]-f;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/v]},_.stream=function(t){return o&&u===t?o:o=y(b(u=t))},_.postclip=function(t){return arguments.length?(b=t,d=e=r=i=null,g()):b},_.clipExtent=function(t){return arguments.length?(b=null==t?(d=e=r=i=null,ul):Es(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),g()):null==d?null:[[d,e],[r,i]]},_.scale=function(t){return arguments.length?(a=+t,g()):a},_.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],g()):[c,f]},_.angle=function(e){return arguments.length?(n=Ac(h=e%360*bc),t=xc(h),g()):h*yc},_.reflectX=function(t){return arguments.length?(s=t?-1:1,g()):s<0},_.reflectY=function(t){return arguments.length?(l=t?-1:1,g()):l<0},_.fitExtent=function(t,n){return ch(_,t,n)},_.fitSize=function(t,n){return fh(_,t,n)},_.fitWidth=function(t,n){return sh(_,t,n)},_.fitHeight=function(t,n){return lh(_,t,n)},_};function Zh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Zh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(gc(e)>1e-6&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var Kh=function(){return bh(Zh).scale(175.295)};function Jh(t,n){return[xc(n)*Ac(t),Ac(n)]}Jh.invert=kh(Oc);var Qh=function(){return bh(Jh).scale(249.5).clipAngle(90.000001)};function td(t,n){var e=xc(n),r=1+xc(t)*e;return[e*Ac(t)/r,Ac(n)/r]}td.invert=kh((function(t){return 2*_c(t)}));var nd=function(){return bh(td).scale(250).clipAngle(142)};function ed(t,n){return[Sc(Tc((dc+n)/2)),-t]}ed.invert=function(t,n){return[-n,2*_c(Mc(t))-dc]};var rd=function(){var t=jh(ed),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function id(t,n){return t.parent===n.parent?1:2}function od(t,n){return t+n.x}function ud(t,n){return Math.max(t,n.y)}var ad=function(){var t=id,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(od,0)/t.length}(e),n.y=function(t){return 1+t.reduce(ud,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=a.x-t(a,c)/2,s=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function cd(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function fd(t,n){var e,r,i,o,u,a=new dd(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=sd);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new dd(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(hd)}function sd(t){return t.children}function ld(t){t.data=t.data.data}function hd(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function dd(t){this.data=t,this.depth=this.height=0,this.parent=null}dd.prototype=fd.prototype={constructor:dd,count:function(){return this.eachAfter(cd)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;t=e.pop(),n=r.pop();for(;t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return fd(this).eachBefore(ld)}};var pd=Array.prototype.slice;var vd=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(pd.call(t))).length,o=[];r<i;)n=t[r],e&&gd(e,n)?++r:(e=md(o=yd(o,n)),r=0);return e};function yd(t,n){var e,r;if(_d(n,t))return[n];for(e=0;e<t.length;++e)if(bd(n,t[e])&&_d(xd(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(bd(xd(t[e],t[r]),n)&&bd(xd(t[e],n),t[r])&&bd(xd(t[r],n),t[e])&&_d(wd(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function bd(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function gd(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function _d(t,n){for(var e=0;e<n.length;++e)if(!gd(t,n[e]))return!1;return!0}function md(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return xd(t[0],t[1]);case 3:return wd(t[0],t[1],t[2])}var n}function xd(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,s=a-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+u+f/l*s)/2,r:(l+i+a)/2}}function wd(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-u,d=r-f,p=i-a,v=i-s,y=c-o,b=l-o,g=r*r+i*i-o*o,_=g-u*u-a*a+c*c,m=g-f*f-s*s+l*l,x=d*p-h*v,w=(p*m-v*_)/(2*x)-r,M=(v*y-p*b)/x,S=(d*_-h*m)/(2*x)-i,k=(h*b-d*y)/x,A=M*M+k*k-1,C=2*(o+w*M+S*k),E=w*w+S*S-o*o,T=-(A?(C+Math.sqrt(C*C-4*A*E))/(2*A):E/C);return{x:r+w+M*T,y:i+S+k*T,r:T}}function Md(t,n,e){var r,i,o,u,a=t.x-n.x,c=t.y-n.y,f=a*a+c*c;f?(i=n.r+e.r,i*=i,u=t.r+e.r,i>(u*=u)?(r=(f+u-i)/(2*f),o=Math.sqrt(Math.max(0,u/f-r*r)),e.x=t.x-r*a-o*c,e.y=t.y-r*c+o*a):(r=(f+i-u)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*a-o*c,e.y=n.y+r*c+o*a)):(e.x=n.x+e.r,e.y=n.y)}function Sd(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function kd(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Ad(t){this._=t,this.next=null,this.previous=null}function Cd(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Md(e,n,r=t[2]),n=new Ad(n),e=new Ad(e),r=new Ad(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Md(n._,e._,r=t[a]),r=new Ad(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(Sd(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}s+=c._.r,c=c.next}else{if(Sd(f._,r._)){(n=f).next=e,e.previous=n,--a;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=kd(n);(r=r.next)!==e;)(u=kd(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=vd(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}var Ed=function(t){return Cd(t),t};function Td(t){return null==t?null:Nd(t)}function Nd(t){if("function"!=typeof t)throw new Error;return t}function Od(){return 0}var jd=function(t){return function(){return t}};function Id(t){return Math.sqrt(t.value)}var Pd=function(){var t=null,n=1,e=1,r=Od;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Rd(t)).eachAfter(Ld(r,.5)).eachBefore(zd(1)):i.eachBefore(Rd(Id)).eachAfter(Ld(Od,1)).eachAfter(Ld(r,i.r/Math.min(n,e))).eachBefore(zd(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Td(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:jd(+t),i):r},i};function Rd(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Ld(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Cd(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function zd(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var Fd=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Bd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f},Dd=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&Bd(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(Fd),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},Ud={depth:-1},qd={};function Vd(t){return t.id}function Wd(t){return t.parentId}var Hd=function(){var t=Vd,n=Wd;function e(e){var r,i,o,u,a,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],a=l[i]=new dd(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f="$"+(a.id=c)]=f in h?qd:a);for(i=0;i<s;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h["$"+c]))throw new Error("missing: "+c);if(u===qd)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=Ud,o.eachBefore((function(t){t.depth=t.parent.depth+1,--s})).eachBefore(hd),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Nd(n),e):t},e.parentId=function(t){return arguments.length?(n=Nd(t),e):n},e};function Yd(t,n){return t.parent===n.parent?1:2}function $d(t){var n=t.children;return n?n[0]:t.t}function Xd(t){var n=t.children;return n?n[n.length-1]:t.t}function Gd(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Zd(t,n,e){return t.a.parent===n.parent?t.a:e}function Kd(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}Kd.prototype=Object.create(dd.prototype);var Jd=function(){var t=Yd,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new Kd(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new Kd(r[i],i)),e.parent=n;return(u.parent=new Kd(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var f=i,s=i,l=i;i.eachBefore((function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)}));var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),v=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*v}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],f=o.m,s=u.m,l=a.m,h=c.m;a=Xd(a),o=$d(o),a&&o;)c=$d(c),(u=Xd(u)).a=n,(i=a.z+l-o.z-f+t(a._,o._))>0&&(Gd(Zd(a,n,r),n,i),f+=i,s+=i),l+=a.m,f+=o.m,h+=c.m,s+=u.m;a&&!Xd(u)&&(u.t=a,u.m+=l-s),o&&!$d(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},Qd=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f},tp=(1+Math.sqrt(5))/2;function np(t,n,e,r,i,o){for(var u,a,c,f,s,l,h,d,p,v,y,b=[],g=n.children,_=0,m=0,x=g.length,w=n.value;_<x;){c=i-e,f=o-r;do{s=g[m++].value}while(!s&&m<x);for(l=h=s,y=s*s*(v=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/y,y/l);m<x;++m){if(s+=a=g[m].value,a<l&&(l=a),a>h&&(h=a),y=s*s*v,(d=Math.max(h/y,y/l))>p){s-=a;break}p=d}b.push(u={value:s,dice:c<f,children:g.slice(_,m)}),u.dice?Bd(u,e,r,i,w?r+=f*s/w:o):Qd(u,e,r,w?e+=c*s/w:i,o),w-=s,_=m}return b}var ep=function t(n){function e(t,e,r,i,o){np(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(tp),rp=function(){var t=ep,n=!1,e=1,r=1,i=[0],o=Od,u=Od,a=Od,c=Od,f=Od;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Fd),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=Nd(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:jd(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:jd(+t),s):u},s.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:jd(+t),s):a},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:jd(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:jd(+t),s):f},s},ip=function(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var s=a[n];return s.x0=i,s.y0=o,s.x1=u,void(s.y1=c)}var l=f[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var v=d+p>>>1;f[v]<h?d=v+1:p=v}h-f[d-1]<f[d]-h&&n+1<d&&--d;var y=f[d]-l,b=r-y;if(u-i>c-o){var g=(i*b+u*y)/r;t(n,d,y,i,o,g,c),t(d,e,b,g,o,u,c)}else{var _=(o*b+c*y)/r;t(n,d,y,i,o,u,_),t(d,e,b,i,_,u,c)}}(0,c,t.value,n,e,r,i)},op=function(t,n,e,r,i){(1&t.depth?Qd:Bd)(t,n,e,r,i)},up=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,f,s,l=-1,h=u.length,d=t.value;++l<h;){for(c=(a=u[l]).children,f=a.value=0,s=c.length;f<s;++f)a.value+=c[f].value;a.dice?Bd(a,e,r,i,r+=(o-r)*a.value/d):Qd(a,e,r,e+=(i-e)*a.value/d,o),d-=a.value}else t._squarify=u=np(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(tp),ap=function(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}},cp=function(t,n){var e=se(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}},fp=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},sp=Math.SQRT2;function lp(t){return((t=Math.exp(t))+1/t)/2}var hp=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],f=n[2],s=a-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/u)/sp,e=function(t){return[i+t*s,o+t*l,u*Math.exp(sp*t*r)]};else{var d=Math.sqrt(h),p=(f*f-u*u+4*h)/(2*u*2*d),v=(f*f-u*u-4*h)/(2*f*2*d),y=Math.log(Math.sqrt(p*p+1)-p),b=Math.log(Math.sqrt(v*v+1)-v);r=(b-y)/sp,e=function(t){var n,e=t*r,a=lp(y),c=u/(2*d)*(a*(n=sp*e+y,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(y));return[i+c*s,o+c*l,u*a/lp(sp*e+y)]}}return e.duration=1e3*r,e};function dp(t){return function(n,e){var r=t((n=ee(n)).h,(e=ee(e)).h),i=he(n.s,e.s),o=he(n.l,e.l),u=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var pp=dp(se),vp=dp(he);function yp(t,n){var e=he((t=yo(t)).l,(n=yo(n)).l),r=he(t.a,n.a),i=he(t.b,n.b),o=he(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function bp(t){return function(n,e){var r=t((n=So(n)).h,(e=So(e)).h),i=he(n.c,e.c),o=he(n.l,e.l),u=he(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}var gp=bp(se),_p=bp(he);function mp(t){return function n(e){function r(n,r){var i=t((n=jo(n)).h,(r=jo(r)).h),o=he(n.s,r.s),u=he(n.l,r.l),a=he(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}var xp=mp(se),wp=mp(he);function Mp(t,n){for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var Sp=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},kp=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},Ap=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]};function Cp(t,n){return t[0]-n[0]||t[1]-n[1]}function Ep(t){for(var n,e,r,i=t.length,o=[0,1],u=2,a=2;a<i;++a){for(;u>1&&(n=t[o[u-2]],e=t[o[u-1]],r=t[a],(e[0]-n[0])*(r[1]-n[1])-(e[1]-n[1])*(r[0]-n[0])<=0);)--u;o[u++]=a}return o.slice(0,u)}var Tp=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Cp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Ep(r),u=Ep(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)f.push(t[r[u[n]][2]]);return f},Np=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=f>a&&u<(c-e)*(a-r)/(f-r)+e&&(s=!s),c=e,f=r;return s},Op=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c},jp=function(){return Math.random()},Ip=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(jp),Pp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(jp),Rp=function t(n){function e(){var t=Pp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(jp),Lp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(jp),zp=function t(n){function e(t){var e=Lp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(jp),Fp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(jp);function Bp(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Dp(t,n){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(n).domain(t)}return this}var Up=Array.prototype,qp=Up.map,Vp=Up.slice,Wp={name:"implicit"};function Hp(){var t=Ji(),n=[],e=[],r=Wp;function i(i){var o=i+"",u=t.get(o);if(!u){if(r!==Wp)return r;t.set(o,u=n.push(i))}return e[(u-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Ji();for(var r,o,u=-1,a=e.length;++u<a;)t.has(o=(r=e[u])+"")||t.set(o,n.push(r));return i},i.range=function(t){return arguments.length?(e=Vp.call(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Hp(n,e).unknown(r)},Bp.apply(i,arguments),i}function Yp(){var t,n,e=Hp().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*f,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var d=M(e).map((function(n){return l+t*n}));return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,s()):u},e.padding=function(t){return arguments.length?(a=Math.min(1,c=+t),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.min(1,t),s()):a},e.paddingOuter=function(t){return arguments.length?(c=+t,s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return Yp(r(),o).round(u).paddingInner(a).paddingOuter(c).align(f)},Bp.apply(s(),arguments)}function $p(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return $p(n())},t}function Xp(){return $p(Yp.apply(null,arguments).paddingInner(1))}var Gp=function(t){return+t},Zp=[0,1];function Kp(t){return t}function Jp(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Qp(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function tv(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Jp(i,r),o=e(u,o)):(r=Jp(r,i),o=e(o,u)),function(t){return o(r(t))}}function nv(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Jp(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=f(t,n,1,r)-1;return o[e](i[e](n))}}function ev(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function rv(){var t,n,e,r,i,o,u=Zp,a=Zp,c=Te,f=Kp;function s(){return r=Math.min(u.length,a.length)>2?nv:tv,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(a,u.map(t),we)))(e)))},l.domain=function(t){return arguments.length?(u=qp.call(t,Gp),f===Kp||(f=Qp(u)),s()):u.slice()},l.range=function(t){return arguments.length?(a=Vp.call(t),s()):a.slice()},l.rangeRound=function(t){return a=Vp.call(t),c=fp,s()},l.clamp=function(t){return arguments.length?(f=t?Qp(u):Kp,l):f!==Kp},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function iv(t,n){return rv()(t,n)}var ov=function(t,n,e,r){var i,o=T(t,n,e);switch((r=Ya(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=uc(o,u))||(r.precision=i),Ka(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=ac(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=oc(o))||(r.precision=i-2*("%"===r.type))}return Za(r)};function uv(t){var n=t.domain;return t.ticks=function(t){var e=n();return C(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ov(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=E(a,c,e))>0?r=E(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=E(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function av(){var t=iv(Kp,Kp);return t.copy=function(){return ev(t,av())},Bp.apply(t,arguments),uv(t)}function cv(t){var n;function e(t){return isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=qp.call(n,Gp),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return cv(t).unknown(n)},t=arguments.length?qp.call(t,Gp):[0,1],uv(e)}var fv=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t};function sv(t){return Math.log(t)}function lv(t){return Math.exp(t)}function hv(t){return-Math.log(-t)}function dv(t){return-Math.exp(-t)}function pv(t){return isFinite(t)?+("1e"+t):t<0?0:t}function vv(t){return function(n){return-t(-n)}}function yv(t){var n,e,r=t(sv,lv),i=r.domain,o=10;function u(){return n=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}(o),e=function(t){return 10===t?pv:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}(o),i()[0]<0?(n=vv(n),e=vv(e),t(hv,dv)):t(sv,lv),r}return r.base=function(t){return arguments.length?(o=+t,u()):o},r.domain=function(t){return arguments.length?(i(t),u()):i()},r.ticks=function(t){var r,u=i(),a=u[0],c=u[u.length-1];(r=c<a)&&(h=a,a=c,c=h);var f,s,l,h=n(a),d=n(c),p=null==t?10:+t,v=[];if(!(o%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,a>0){for(;h<d;++h)for(s=1,f=e(h);s<o;++s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else for(;h<d;++h)for(s=o-1,f=e(h);s>=1;--s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else v=C(h,d,Math.min(d-h,p)).map(e);return r?v.reverse():v},r.tickFormat=function(t,i){if(null==i&&(i=10===o?".0e":","),"function"!=typeof i&&(i=Za(i)),t===1/0)return i;null==t&&(t=10);var u=Math.max(1,o*t/r.ticks().length);return function(t){var r=t/e(Math.round(n(t)));return r*o<o-.5&&(r*=o),r<=u?i(t):""}},r.nice=function(){return i(fv(i(),{floor:function(t){return e(Math.floor(n(t)))},ceil:function(t){return e(Math.ceil(n(t)))}}))},r}function bv(){var t=yv(rv()).domain([1,10]);return t.copy=function(){return ev(t,bv()).base(t.base())},Bp.apply(t,arguments),t}function gv(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function _v(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function mv(t){var n=1,e=t(gv(n),_v(n));return e.constant=function(e){return arguments.length?t(gv(n=+e),_v(n)):n},uv(e)}function xv(){var t=mv(rv());return t.copy=function(){return ev(t,xv()).constant(t.constant())},Bp.apply(t,arguments)}function wv(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Mv(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Sv(t){return t<0?-t*t:t*t}function kv(t){var n=t(Kp,Kp),e=1;function r(){return 1===e?t(Kp,Kp):.5===e?t(Mv,Sv):t(wv(e),wv(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},uv(n)}function Av(){var t=kv(rv());return t.copy=function(){return ev(t,Av()).exponent(t.exponent())},Bp.apply(t,arguments),t}function Cv(){return Av.apply(null,arguments).exponent(.5)}function Ev(){var t,n=[],e=[],r=[];function o(){var t=0,i=Math.max(1,e.length);for(r=new Array(i-1);++t<i;)r[t-1]=j(n,t/i);return u}function u(n){return isNaN(n=+n)?t:e[f(r,n)]}return u.invertExtent=function(t){var i=e.indexOf(t);return i<0?[NaN,NaN]:[i>0?r[i-1]:n[0],i<r.length?r[i]:n[n.length-1]]},u.domain=function(t){if(!arguments.length)return n.slice();n=[];for(var e,r=0,u=t.length;r<u;++r)null==(e=t[r])||isNaN(e=+e)||n.push(e);return n.sort(i),o()},u.range=function(t){return arguments.length?(e=Vp.call(t),o()):e.slice()},u.unknown=function(n){return arguments.length?(t=n,u):t},u.quantiles=function(){return r.slice()},u.copy=function(){return Ev().domain(n).range(e).unknown(t)},Bp.apply(u,arguments)}function Tv(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function u(n){return n<=n?o[f(i,n,0,r)]:t}function a(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return u}return u.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],a()):[n,e]},u.range=function(t){return arguments.length?(r=(o=Vp.call(t)).length-1,a()):o.slice()},u.invertExtent=function(t){var u=o.indexOf(t);return u<0?[NaN,NaN]:u<1?[n,i[0]]:u>=r?[i[r-1],e]:[i[u-1],i[u]]},u.unknown=function(n){return arguments.length?(t=n,u):u},u.thresholds=function(){return i.slice()},u.copy=function(){return Tv().domain([n,e]).range(o).unknown(t)},Bp.apply(uv(u),arguments)}function Nv(){var t,n=[.5],e=[0,1],r=1;function i(i){return i<=i?e[f(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=Vp.call(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=Vp.call(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return Nv().domain(n).range(e).unknown(t)},Bp.apply(i,arguments)}var Ov=new Date,jv=new Date;function Iv(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Iv((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Ov.setTime(+n),jv.setTime(+r),t(Ov),t(jv),Math.floor(e(Ov,jv))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Pv=Iv((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Pv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Iv((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var Rv=Pv,Lv=Pv.range,zv=Iv((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Fv=zv,Bv=zv.range;function Dv(t){return Iv((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var Uv=Dv(0),qv=Dv(1),Vv=Dv(2),Wv=Dv(3),Hv=Dv(4),Yv=Dv(5),$v=Dv(6),Xv=Uv.range,Gv=qv.range,Zv=Vv.range,Kv=Wv.range,Jv=Hv.range,Qv=Yv.range,ty=$v.range,ny=Iv((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1})),ey=ny,ry=ny.range,iy=Iv((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()})),oy=iy,uy=iy.range,ay=Iv((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()})),cy=ay,fy=ay.range,sy=Iv((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()})),ly=sy,hy=sy.range,dy=Iv((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));dy.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Iv((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):dy:null};var py=dy,vy=dy.range;function yy(t){return Iv((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var by=yy(0),gy=yy(1),_y=yy(2),my=yy(3),xy=yy(4),wy=yy(5),My=yy(6),Sy=by.range,ky=gy.range,Ay=_y.range,Cy=my.range,Ey=xy.range,Ty=wy.range,Ny=My.range,Oy=Iv((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1})),jy=Oy,Iy=Oy.range,Py=Iv((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Py.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Iv((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Ry=Py,Ly=Py.range;function zy(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Fy(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function By(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function Dy(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,f=Jy(i),s=Qy(i),l=Jy(o),h=Qy(o),d=Jy(u),p=Qy(u),v=Jy(a),y=Qy(a),b=Jy(c),g=Qy(c),_={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:mb,e:mb,f:kb,H:xb,I:wb,j:Mb,L:Sb,m:Ab,M:Cb,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ng,s:eg,S:Eb,u:Tb,U:Nb,V:Ob,w:jb,W:Ib,x:null,X:null,y:Pb,Y:Rb,Z:Lb,"%":tg},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:zb,e:zb,f:qb,H:Fb,I:Bb,j:Db,L:Ub,m:Vb,M:Wb,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ng,s:eg,S:Hb,u:Yb,U:$b,V:Xb,w:Gb,W:Zb,x:null,X:null,y:Kb,Y:Jb,Z:Qb,"%":tg},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=b.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return S(t,n,e,r)},d:sb,e:sb,f:yb,H:hb,I:hb,j:lb,L:vb,m:fb,M:db,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},q:cb,Q:gb,s:_b,S:pb,u:nb,U:eb,V:rb,w:tb,W:ib,x:function(t,n,r){return S(t,e,n,r)},X:function(t,n,e){return S(t,r,n,e)},y:ub,Y:ob,Z:ab,"%":bb};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++a<f;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=Yy[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function M(t,n){return function(e){var r,i,o=By(1900,void 0,1);if(S(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Fy(By(o.y,0,1))).getUTCDay(),r=i>4||0===i?gy.ceil(r):gy(r),r=jy.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=zy(By(o.y,0,1))).getDay(),r=i>4||0===i?qv.ceil(r):qv(r),r=ey.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Fy(By(o.y,0,1)).getUTCDay():zy(By(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Fy(o)):zy(o)}}function S(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in Yy?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return _.x=w(e,_),_.X=w(r,_),_.c=w(n,_),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",_);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}var Uy,qy,Vy,Wy,Hy,Yy={"-":"",_:" ",0:"0"},$y=/^\s*\d+/,Xy=/^%/,Gy=/[\\^$*+?|[\]().{}]/g;function Zy(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Ky(t){return t.replace(Gy,"\\$&")}function Jy(t){return new RegExp("^(?:"+t.map(Ky).join("|")+")","i")}function Qy(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function tb(t,n,e){var r=$y.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function nb(t,n,e){var r=$y.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function eb(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function rb(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function ib(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function ob(t,n,e){var r=$y.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function ub(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function ab(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function cb(t,n,e){var r=$y.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function fb(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function sb(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function lb(t,n,e){var r=$y.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function hb(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function db(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function pb(t,n,e){var r=$y.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function vb(t,n,e){var r=$y.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function yb(t,n,e){var r=$y.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function bb(t,n,e){var r=Xy.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function gb(t,n,e){var r=$y.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function _b(t,n,e){var r=$y.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function mb(t,n){return Zy(t.getDate(),n,2)}function xb(t,n){return Zy(t.getHours(),n,2)}function wb(t,n){return Zy(t.getHours()%12||12,n,2)}function Mb(t,n){return Zy(1+ey.count(Rv(t),t),n,3)}function Sb(t,n){return Zy(t.getMilliseconds(),n,3)}function kb(t,n){return Sb(t,n)+"000"}function Ab(t,n){return Zy(t.getMonth()+1,n,2)}function Cb(t,n){return Zy(t.getMinutes(),n,2)}function Eb(t,n){return Zy(t.getSeconds(),n,2)}function Tb(t){var n=t.getDay();return 0===n?7:n}function Nb(t,n){return Zy(Uv.count(Rv(t)-1,t),n,2)}function Ob(t,n){var e=t.getDay();return t=e>=4||0===e?Hv(t):Hv.ceil(t),Zy(Hv.count(Rv(t),t)+(4===Rv(t).getDay()),n,2)}function jb(t){return t.getDay()}function Ib(t,n){return Zy(qv.count(Rv(t)-1,t),n,2)}function Pb(t,n){return Zy(t.getFullYear()%100,n,2)}function Rb(t,n){return Zy(t.getFullYear()%1e4,n,4)}function Lb(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Zy(n/60|0,"0",2)+Zy(n%60,"0",2)}function zb(t,n){return Zy(t.getUTCDate(),n,2)}function Fb(t,n){return Zy(t.getUTCHours(),n,2)}function Bb(t,n){return Zy(t.getUTCHours()%12||12,n,2)}function Db(t,n){return Zy(1+jy.count(Ry(t),t),n,3)}function Ub(t,n){return Zy(t.getUTCMilliseconds(),n,3)}function qb(t,n){return Ub(t,n)+"000"}function Vb(t,n){return Zy(t.getUTCMonth()+1,n,2)}function Wb(t,n){return Zy(t.getUTCMinutes(),n,2)}function Hb(t,n){return Zy(t.getUTCSeconds(),n,2)}function Yb(t){var n=t.getUTCDay();return 0===n?7:n}function $b(t,n){return Zy(by.count(Ry(t)-1,t),n,2)}function Xb(t,n){var e=t.getUTCDay();return t=e>=4||0===e?xy(t):xy.ceil(t),Zy(xy.count(Ry(t),t)+(4===Ry(t).getUTCDay()),n,2)}function Gb(t){return t.getUTCDay()}function Zb(t,n){return Zy(gy.count(Ry(t)-1,t),n,2)}function Kb(t,n){return Zy(t.getUTCFullYear()%100,n,2)}function Jb(t,n){return Zy(t.getUTCFullYear()%1e4,n,4)}function Qb(){return"+0000"}function tg(){return"%"}function ng(t){return+t}function eg(t){return Math.floor(+t/1e3)}function rg(t){return Uy=Dy(t),qy=Uy.format,Vy=Uy.parse,Wy=Uy.utcFormat,Hy=Uy.utcParse,Uy}rg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function ig(t){return new Date(t)}function og(t){return t instanceof Date?+t:+new Date(+t)}function ug(t,n,e,r,i,u,a,c,f){var s=iv(Kp,Kp),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),v=f("%I:%M"),y=f("%I %p"),b=f("%a %d"),g=f("%b %d"),_=f("%B"),m=f("%Y"),x=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,31536e6]];function w(o){return(a(o)<o?d:u(o)<o?p:i(o)<o?v:r(o)<o?y:n(o)<o?e(o)<o?b:g:t(o)<o?_:m)(o)}function M(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=o((function(t){return t[2]})).right(x,u);a===x.length?(i=T(e/31536e6,r/31536e6,n),n=t):a?(i=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(i=Math.max(T(e,r,n),1),n=c)}return null==i?n:n.every(i)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(qp.call(t,og)):h().map(ig)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(fv(e,t)):s},s.copy=function(){return ev(s,ug(t,n,e,r,i,u,a,c,f))},s}var ag=function(){return Bp.apply(ug(Rv,Fv,Uv,ey,oy,cy,ly,py,qy).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},cg=Iv((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),fg=cg,sg=cg.range,lg=Iv((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()})),hg=lg,dg=lg.range,pg=Iv((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})),vg=pg,yg=pg.range,bg=function(){return Bp.apply(ug(Ry,fg,by,jy,hg,vg,ly,py,Wy).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function gg(){var t,n,e,r,i,o=0,u=1,a=Kp,c=!1;function f(n){return isNaN(n=+n)?i:a(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}return f.domain=function(i){return arguments.length?(t=r(o=+i[0]),n=r(u=+i[1]),e=t===n?0:1/(n-t),f):[o,u]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(a=t,f):a},f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(u),e=t===n?0:1/(n-t),f}}function _g(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function mg(){var t=uv(gg()(Kp));return t.copy=function(){return _g(t,mg())},Dp.apply(t,arguments)}function xg(){var t=yv(gg()).domain([1,10]);return t.copy=function(){return _g(t,xg()).base(t.base())},Dp.apply(t,arguments)}function wg(){var t=mv(gg());return t.copy=function(){return _g(t,wg()).constant(t.constant())},Dp.apply(t,arguments)}function Mg(){var t=kv(gg());return t.copy=function(){return _g(t,Mg()).exponent(t.exponent())},Dp.apply(t,arguments)}function Sg(){return Mg.apply(null,arguments).exponent(.5)}function kg(){var t=[],n=Kp;function e(e){if(!isNaN(e=+e))return n((f(t,e)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,o=0,u=n.length;o<u;++o)null==(r=n[o])||isNaN(r=+r)||t.push(r);return t.sort(i),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return kg(n).domain(t)},Dp.apply(e,arguments)}function Ag(){var t,n,e,r,i,o,u,a=0,c=.5,f=1,s=Kp,l=!1;function h(t){return isNaN(t=+t)?u:(t=.5+((t=+o(t))-n)*(t<n?r:i),s(l?Math.max(0,Math.min(1,t)):t))}return h.domain=function(u){return arguments.length?(t=o(a=+u[0]),n=o(c=+u[1]),e=o(f=+u[2]),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h):[a,c,f]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(s=t,h):s},h.unknown=function(t){return arguments.length?(u=t,h):u},function(u){return o=u,t=u(a),n=u(c),e=u(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),h}}function Cg(){var t=uv(Ag()(Kp));return t.copy=function(){return _g(t,Cg())},Dp.apply(t,arguments)}function Eg(){var t=yv(Ag()).domain([.1,1,10]);return t.copy=function(){return _g(t,Eg()).base(t.base())},Dp.apply(t,arguments)}function Tg(){var t=mv(Ag());return t.copy=function(){return _g(t,Tg()).constant(t.constant())},Dp.apply(t,arguments)}function Ng(){var t=kv(Ag());return t.copy=function(){return _g(t,Ng()).exponent(t.exponent())},Dp.apply(t,arguments)}function Og(){return Ng.apply(null,arguments).exponent(.5)}var jg=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},Ig=jg("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Pg=jg("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Rg=jg("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Lg=jg("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),zg=jg("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Fg=jg("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Bg=jg("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Dg=jg("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ug=jg("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),qg=jg("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Vg=function(t){return ve(t[t.length-1])},Wg=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(jg),Hg=Vg(Wg),Yg=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(jg),$g=Vg(Yg),Xg=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(jg),Gg=Vg(Xg),Zg=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(jg),Kg=Vg(Zg),Jg=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(jg),Qg=Vg(Jg),t_=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(jg),n_=Vg(t_),e_=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(jg),r_=Vg(e_),i_=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(jg),o_=Vg(i_),u_=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(jg),a_=Vg(u_),c_=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(jg),f_=Vg(c_),s_=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(jg),l_=Vg(s_),h_=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(jg),d_=Vg(h_),p_=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(jg),v_=Vg(p_),y_=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(jg),b_=Vg(y_),g_=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(jg),__=Vg(g_),m_=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(jg),x_=Vg(m_),w_=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(jg),M_=Vg(w_),S_=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(jg),k_=Vg(S_),A_=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(jg),C_=Vg(A_),E_=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(jg),T_=Vg(E_),N_=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(jg),O_=Vg(N_),j_=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(jg),I_=Vg(j_),P_=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(jg),R_=Vg(P_),L_=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(jg),z_=Vg(L_),F_=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(jg),B_=Vg(F_),D_=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(jg),U_=Vg(D_),q_=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(jg),V_=Vg(q_),W_=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"},H_=wp(jo(300,.5,0),jo(-240,.5,1)),Y_=wp(jo(-100,.75,.35),jo(80,1.5,.8)),$_=wp(jo(260,.75,.35),jo(80,1.5,.8)),X_=jo(),G_=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return X_.h=360*t-100,X_.s=1.5-1.5*n,X_.l=.8-.9*n,X_+""},Z_=Gn(),K_=Math.PI/3,J_=2*Math.PI/3,Q_=function(t){var n;return t=(.5-t)*Math.PI,Z_.r=255*(n=Math.sin(t))*n,Z_.g=255*(n=Math.sin(t+K_))*n,Z_.b=255*(n=Math.sin(t+J_))*n,Z_+""},tm=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"};function nm(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var em=nm(jg("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),rm=nm(jg("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),im=nm(jg("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),om=nm(jg("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),um=function(t){return Sn(rn(t).call(document.documentElement))},am=0;function cm(){return new fm}function fm(){this._="@"+(++am).toString(36)}fm.prototype=cm.prototype={constructor:fm,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var sm=function(t){return"string"==typeof t?new xn([document.querySelectorAll(t)],[document.documentElement]):new xn([null==t?[]:t],mn)},lm=function(t,n){null==n&&(n=Ne().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Oe(t,n[e]);return i},hm=function(t){return function(){return t}},dm=Math.abs,pm=Math.atan2,vm=Math.cos,ym=Math.max,bm=Math.min,gm=Math.sin,_m=Math.sqrt,mm=Math.PI,xm=mm/2,wm=2*mm;function Mm(t){return t>1?0:t<-1?mm:Math.acos(t)}function Sm(t){return t>=1?xm:t<=-1?-xm:Math.asin(t)}function km(t){return t.innerRadius}function Am(t){return t.outerRadius}function Cm(t){return t.startAngle}function Em(t){return t.endAngle}function Tm(t){return t&&t.padAngle}function Nm(t,n,e,r,i,o,u,a){var c=e-t,f=r-n,s=u-i,l=a-o,h=l*c-s*f;if(!(h*h<1e-12))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}function Om(t,n,e,r,i,o,u){var a=t-e,c=n-r,f=(u?o:-o)/_m(a*a+c*c),s=f*c,l=-f*a,h=t+s,d=n+l,p=e+s,v=r+l,y=(h+p)/2,b=(d+v)/2,g=p-h,_=v-d,m=g*g+_*_,x=i-o,w=h*v-p*d,M=(_<0?-1:1)*_m(ym(0,x*x*m-w*w)),S=(w*_-g*M)/m,k=(-w*g-_*M)/m,A=(w*_+g*M)/m,C=(-w*g+_*M)/m,E=S-y,T=k-b,N=A-y,O=C-b;return E*E+T*T>N*N+O*O&&(S=A,k=C),{cx:S,cy:k,x01:-s,y01:-l,x11:S*(i/x-1),y11:k*(i/x-1)}}var jm=function(){var t=km,n=Am,e=hm(0),r=null,i=Cm,o=Em,u=Tm,a=null;function c(){var c,f,s=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-xm,d=o.apply(this,arguments)-xm,p=dm(d-h),v=d>h;if(a||(a=c=Vi()),l<s&&(f=l,l=s,s=f),l>1e-12)if(p>wm-1e-12)a.moveTo(l*vm(h),l*gm(h)),a.arc(0,0,l,h,d,!v),s>1e-12&&(a.moveTo(s*vm(d),s*gm(d)),a.arc(0,0,s,d,h,v));else{var y,b,g=h,_=d,m=h,x=d,w=p,M=p,S=u.apply(this,arguments)/2,k=S>1e-12&&(r?+r.apply(this,arguments):_m(s*s+l*l)),A=bm(dm(l-s)/2,+e.apply(this,arguments)),C=A,E=A;if(k>1e-12){var T=Sm(k/s*gm(S)),N=Sm(k/l*gm(S));(w-=2*T)>1e-12?(m+=T*=v?1:-1,x-=T):(w=0,m=x=(h+d)/2),(M-=2*N)>1e-12?(g+=N*=v?1:-1,_-=N):(M=0,g=_=(h+d)/2)}var O=l*vm(g),j=l*gm(g),I=s*vm(x),P=s*gm(x);if(A>1e-12){var R,L=l*vm(_),z=l*gm(_),F=s*vm(m),B=s*gm(m);if(p<mm&&(R=Nm(O,j,F,B,L,z,I,P))){var D=O-R[0],U=j-R[1],q=L-R[0],V=z-R[1],W=1/gm(Mm((D*q+U*V)/(_m(D*D+U*U)*_m(q*q+V*V)))/2),H=_m(R[0]*R[0]+R[1]*R[1]);C=bm(A,(s-H)/(W-1)),E=bm(A,(l-H)/(W+1))}}M>1e-12?E>1e-12?(y=Om(F,B,O,j,l,E,v),b=Om(L,z,I,P,l,E,v),a.moveTo(y.cx+y.x01,y.cy+y.y01),E<A?a.arc(y.cx,y.cy,E,pm(y.y01,y.x01),pm(b.y01,b.x01),!v):(a.arc(y.cx,y.cy,E,pm(y.y01,y.x01),pm(y.y11,y.x11),!v),a.arc(0,0,l,pm(y.cy+y.y11,y.cx+y.x11),pm(b.cy+b.y11,b.cx+b.x11),!v),a.arc(b.cx,b.cy,E,pm(b.y11,b.x11),pm(b.y01,b.x01),!v))):(a.moveTo(O,j),a.arc(0,0,l,g,_,!v)):a.moveTo(O,j),s>1e-12&&w>1e-12?C>1e-12?(y=Om(I,P,L,z,s,-C,v),b=Om(O,j,F,B,s,-C,v),a.lineTo(y.cx+y.x01,y.cy+y.y01),C<A?a.arc(y.cx,y.cy,C,pm(y.y01,y.x01),pm(b.y01,b.x01),!v):(a.arc(y.cx,y.cy,C,pm(y.y01,y.x01),pm(y.y11,y.x11),!v),a.arc(0,0,s,pm(y.cy+y.y11,y.cx+y.x11),pm(b.cy+b.y11,b.cx+b.x11),v),a.arc(b.cx,b.cy,C,pm(b.y11,b.x11),pm(b.y01,b.x01),!v))):a.arc(0,0,s,x,m,v):a.lineTo(I,P)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-mm/2;return[vm(r)*e,gm(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:hm(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:hm(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:hm(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c};function Im(t){this._context=t}Im.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Pm=function(t){return new Im(t)};function Rm(t){return t[0]}function Lm(t){return t[1]}var zm=function(){var t=Rm,n=Lm,e=hm(!0),r=null,i=Pm,o=null;function u(u){var a,c,f,s=u.length,l=!1;for(null==r&&(o=i(f=Vi())),a=0;a<=s;++a)!(a<s&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(f)return o=null,f+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:hm(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u},Fm=function(){var t=Rm,n=null,e=hm(0),r=Lm,i=hm(!0),o=null,u=Pm,a=null;function c(c){var f,s,l,h,d,p=c.length,v=!1,y=new Array(p),b=new Array(p);for(null==o&&(a=u(d=Vi())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===v)if(v=!v)s=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=f-1;l>=s;--l)a.point(y[l],b[l]);a.lineEnd(),a.areaEnd()}v&&(y[f]=+t(h,f,c),b[f]=+e(h,f,c),a.point(n?+n(h,f,c):y[f],r?+r(h,f,c):b[f]))}if(d)return a=null,d+""||null}function f(){return zm().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:hm(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:hm(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:hm(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:hm(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:hm(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c},Bm=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Dm=function(t){return t},Um=function(){var t=Dm,n=Bm,e=null,r=hm(0),i=hm(wm),o=hm(0);function u(u){var a,c,f,s,l,h=u.length,d=0,p=new Array(h),v=new Array(h),y=+r.apply(this,arguments),b=Math.min(wm,Math.max(-wm,i.apply(this,arguments)-y)),g=Math.min(Math.abs(b)/h,o.apply(this,arguments)),_=g*(b<0?-1:1);for(a=0;a<h;++a)(l=v[p[a]=a]=+t(u[a],a,u))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(v[t],v[e])})):null!=e&&p.sort((function(t,n){return e(u[t],u[n])})),a=0,f=d?(b-h*_)/d:0;a<h;++a,y=s)c=p[a],s=y+((l=v[c])>0?l*f:0)+_,v[c]={data:u[c],index:a,value:l,startAngle:y,endAngle:s,padAngle:g};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:hm(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:hm(+t),u):o},u},qm=Wm(Pm);function Vm(t){this._curve=t}function Wm(t){function n(n){return new Vm(t(n))}return n._curve=t,n}function Hm(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Wm(t)):n()._curve},t}Vm.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Ym=function(){return Hm(zm().curve(qm))},$m=function(){var t=Fm().curve(qm),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Hm(e())},delete t.lineX0,t.lineEndAngle=function(){return Hm(r())},delete t.lineX1,t.lineInnerRadius=function(){return Hm(i())},delete t.lineY0,t.lineOuterRadius=function(){return Hm(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Wm(t)):n()._curve},t},Xm=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Gm=Array.prototype.slice;function Zm(t){return t.source}function Km(t){return t.target}function Jm(t){var n=Zm,e=Km,r=Rm,i=Lm,o=null;function u(){var u,a=Gm.call(arguments),c=n.apply(this,a),f=e.apply(this,a);if(o||(o=u=Vi()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=f,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:hm(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Qm(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function tx(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function nx(t,n,e,r,i){var o=Xm(n,e),u=Xm(n,e=(e+i)/2),a=Xm(r,e),c=Xm(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function ex(){return Jm(Qm)}function rx(){return Jm(tx)}function ix(){var t=Jm(nx);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var ox={draw:function(t,n){var e=Math.sqrt(n/mm);t.moveTo(e,0),t.arc(0,0,e,0,wm)}},ux={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},ax=Math.sqrt(1/3),cx=2*ax,fx={draw:function(t,n){var e=Math.sqrt(n/cx),r=e*ax;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},sx=Math.sin(mm/10)/Math.sin(7*mm/10),lx=Math.sin(wm/10)*sx,hx=-Math.cos(wm/10)*sx,dx={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=lx*e,i=hx*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=wm*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},px={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},vx=Math.sqrt(3),yx={draw:function(t,n){var e=-Math.sqrt(n/(3*vx));t.moveTo(0,2*e),t.lineTo(-vx*e,-e),t.lineTo(vx*e,-e),t.closePath()}},bx=Math.sqrt(3)/2,gx=1/Math.sqrt(12),_x=3*(gx/2+1),mx={draw:function(t,n){var e=Math.sqrt(n/_x),r=e/2,i=e*gx,o=r,u=e*gx+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(-.5*r-bx*i,bx*r+-.5*i),t.lineTo(-.5*o-bx*u,bx*o+-.5*u),t.lineTo(-.5*a-bx*c,bx*a+-.5*c),t.lineTo(-.5*r+bx*i,-.5*i-bx*r),t.lineTo(-.5*o+bx*u,-.5*u-bx*o),t.lineTo(-.5*a+bx*c,-.5*c-bx*a),t.closePath()}},xx=[ox,ux,fx,px,dx,yx,mx],wx=function(){var t=hm(ox),n=hm(64),e=null;function r(){var r;if(e||(e=r=Vi()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:hm(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:hm(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},Mx=function(){};function Sx(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function kx(t){this._context=t}kx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Sx(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Sx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Ax=function(t){return new kx(t)};function Cx(t){this._context=t}Cx.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Sx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Ex=function(t){return new Cx(t)};function Tx(t){this._context=t}Tx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Sx(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var Nx=function(t){return new Tx(t)};function Ox(t,n){this._basis=new kx(t),this._beta=n}Ox.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var jx=function t(n){function e(t){return 1===n?new kx(t):new Ox(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function Ix(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Px(t,n){this._context=t,this._k=(1-n)/6}Px.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ix(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Ix(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Rx=function t(n){function e(t){return new Px(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Lx(t,n){this._context=t,this._k=(1-n)/6}Lx.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ix(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var zx=function t(n){function e(t){return new Lx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Fx(t,n){this._context=t,this._k=(1-n)/6}Fx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ix(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Bx=function t(n){function e(t){return new Fx(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Dx(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>1e-12){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>1e-12){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,u=(u*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function Ux(t,n){this._context=t,this._alpha=n}Ux.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Dx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var qx=function t(n){function e(t){return n?new Ux(t,n):new Px(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Vx(t,n){this._context=t,this._alpha=n}Vx.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Dx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Wx=function t(n){function e(t){return n?new Vx(t,n):new Lx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Hx(t,n){this._context=t,this._alpha=n}Hx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Dx(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Yx=function t(n){function e(t){return n?new Hx(t,n):new Fx(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function $x(t){this._context=t}$x.prototype={areaStart:Mx,areaEnd:Mx,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Xx=function(t){return new $x(t)};function Gx(t){return t<0?-1:1}function Zx(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(Gx(o)+Gx(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Kx(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Jx(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Qx(t){this._context=t}function tw(t){this._context=new nw(t)}function nw(t){this._context=t}function ew(t){return new Qx(t)}function rw(t){return new tw(t)}function iw(t){this._context=t}function ow(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}Qx.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Jx(this,this._t0,Kx(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Jx(this,Kx(this,e=Zx(this,t,n)),e);break;default:Jx(this,this._t0,e=Zx(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(tw.prototype=Object.create(Qx.prototype)).point=function(t,n){Qx.prototype.point.call(this,n,t)},nw.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},iw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=ow(t),i=ow(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var uw=function(t){return new iw(t)};function aw(t,n){this._context=t,this._t=n}aw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var cw=function(t){return new aw(t,.5)};function fw(t){return new aw(t,0)}function sw(t){return new aw(t,1)}var lw=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},hw=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function dw(t,n){return t[n]}var pw=function(){var t=hm([]),n=hw,e=lw,r=dw;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,f=a.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=a[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,u=n(s);o<f;++o)s[u[o]].index=o;return e(s,u),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:hm(Gm.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:hm(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?hw:"function"==typeof t?t:hm(Gm.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?lw:t,i):e},i},vw=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}lw(t,n)}},yw=function(t,n){if((a=t.length)>0)for(var e,r,i,o,u,a,c=0,f=t[n[0]].length;c<f;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):(r[0]=0,r[1]=i)},bw=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}lw(t,n)}},gw=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,f=0;a<i;++a){for(var s=t[n[a]],l=s[u][1]||0,h=(l-(s[u-1][1]||0))/2,d=0;d<a;++d){var p=t[n[d]];h+=(p[u][1]||0)-(p[u-1][1]||0)}c+=l,f+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=f/c)}e[u-1][1]+=e[u-1][0]=o,lw(t,n)}},_w=function(t){var n=t.map(mw);return hw(t).sort((function(t,e){return n[t]-n[e]}))};function mw(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}var xw=function(t){var n=t.map(ww);return hw(t).sort((function(t,e){return n[t]-n[e]}))};function ww(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var Mw=function(t){return xw(t).reverse()},Sw=function(t){var n,e,r=t.length,i=t.map(ww),o=_w(t),u=0,a=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],f.push(e));return f.reverse().concat(c)},kw=function(t){return hw(t).reverse()};var Aw=Date.prototype.toISOString?function(t){return t.toISOString()}:Wy("%Y-%m-%dT%H:%M:%S.%LZ");var Cw=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:Hy("%Y-%m-%dT%H:%M:%S.%LZ"),Ew=function(t,n,e){var r=new We,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?qe():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)},Tw=function(t){return function(){return t}};function Nw(t){return t[0]}function Ow(t){return t[1]}function jw(){this._=null}function Iw(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Pw(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Rw(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Lw(t){for(;t.L;)t=t.L;return t}jw.prototype={constructor:jw,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Lw(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Pw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Rw(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Rw(this,e),e=(t=e).U),e.C=!1,r.C=!0,Pw(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?Lw(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Pw(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Rw(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Pw(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Rw(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Pw(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Rw(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var zw=jw;function Fw(t,n,e,r){var i=[null,null],o=cM.push(i)-1;return i.left=t,i.right=n,e&&Dw(i,t,n,e),r&&Dw(i,n,t,r),uM[t.index].halfedges.push(o),uM[n.index].halfedges.push(o),i}function Bw(t,n,e){var r=[n,e];return r.left=t,r}function Dw(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Uw(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],s=0,l=1,h=a[0]-c,d=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function qw(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],v=(l+d)/2,y=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=y-(u=(l-d)/(p-h))*v,u<-1||u>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function Vw(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Ww(t,n){return n[+(n.left!==t.site)]}function Hw(t,n){return n[+(n.left===t.site)]}var Yw,$w=[];function Xw(){Iw(this),this.x=this.y=this.arc=this.site=this.cy=null}function Gw(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,f=r[1]-a,s=o[0]-u,l=o[1]-a,h=2*(c*l-f*s);if(!(h>=-sM)){var d=c*c+f*f,p=s*s+l*l,v=(l*d-f*p)/h,y=(c*p-s*d)/h,b=$w.pop()||new Xw;b.arc=t,b.site=i,b.x=v+u,b.y=(b.cy=y+a)+Math.sqrt(v*v+y*y),t.circle=b;for(var g=null,_=aM._;_;)if(b.y<_.y||b.y===_.y&&b.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}aM.insert(g,b),g||(Yw=b)}}}}function Zw(t){var n=t.circle;n&&(n.P||(Yw=n.N),aM.remove(n),$w.push(n),Iw(n),t.circle=null)}var Kw=[];function Jw(){Iw(this),this.edge=this.site=this.circle=null}function Qw(t){var n=Kw.pop()||new Jw;return n.site=t,n}function tM(t){Zw(t),oM.remove(t),Kw.push(t),Iw(t)}function nM(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];tM(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<fM&&Math.abs(r-c.circle.cy)<fM;)o=c.P,a.unshift(c),tM(c),c=o;a.unshift(c),Zw(c);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<fM&&Math.abs(r-f.circle.cy)<fM;)u=f.N,a.push(f),tM(f),f=u;a.push(f),Zw(f);var s,l=a.length;for(s=1;s<l;++s)f=a[s],c=a[s-1],Dw(f.edge,c.site,f.site,i);c=a[0],(f=a[l-1]).edge=Fw(c.site,f.site,null,i),Gw(c),Gw(f)}function eM(t){for(var n,e,r,i,o=t[0],u=t[1],a=oM._;a;)if((r=rM(a,u)-o)>fM)a=a.L;else{if(!((i=o-iM(a,u))>fM)){r>-fM?(n=a.P,e=a):i>-fM?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){uM[t.index]={site:t,halfedges:[]}}(t);var c=Qw(t);if(oM.insert(n,c),n||e){if(n===e)return Zw(n),e=Qw(n.site),oM.insert(c,e),c.edge=e.edge=Fw(n.site,c.site),Gw(n),void Gw(e);if(e){Zw(n),Zw(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,v=p[0]-s,y=p[1]-l,b=2*(h*y-d*v),g=h*h+d*d,_=v*v+y*y,m=[(y*g-d*_)/b+s,(h*_-v*g)/b+l];Dw(e.edge,f,p,m),c.edge=Fw(f,t,null,m),e.edge=Fw(t,p,null,m),Gw(n),Gw(e)}else c.edge=Fw(n.site,c.site)}}function rM(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var s=a-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+a)/2}function iM(t,n){var e=t.N;if(e)return rM(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var oM,uM,aM,cM,fM=1e-6,sM=1e-12;function lM(t,n){return n[1]-t[1]||n[0]-t[0]}function hM(t,n){var e,r,i,o=t.sort(lM).pop();for(cM=[],uM=new Array(t.length),oM=new zw,aM=new zw;;)if(i=Yw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(eM(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;nM(i.arc)}if(function(){for(var t,n,e,r,i=0,o=uM.length;i<o;++i)if((t=uM[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=Vw(t,cM[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=cM.length;o--;)qw(i=cM[o],t,n,e,r)&&Uw(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>fM||Math.abs(i[0][1]-i[1][1])>fM)||delete cM[o]}(u,a,c,f),function(t,n,e,r){var i,o,u,a,c,f,s,l,h,d,p,v,y=uM.length,b=!0;for(i=0;i<y;++i)if(o=uM[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)cM[c[a]]||c.splice(a,1);for(a=0,f=c.length;a<f;)p=(d=Hw(o,cM[c[a]]))[0],v=d[1],l=(s=Ww(o,cM[c[++a%f]]))[0],h=s[1],(Math.abs(p-l)>fM||Math.abs(v-h)>fM)&&(c.splice(a,0,cM.push(Bw(u,d,Math.abs(p-t)<fM&&r-v>fM?[t,Math.abs(l-t)<fM?h:r]:Math.abs(v-r)<fM&&e-p>fM?[Math.abs(h-r)<fM?l:e,r]:Math.abs(p-e)<fM&&v-n>fM?[e,Math.abs(l-e)<fM?h:n]:Math.abs(v-n)<fM&&p-t>fM?[Math.abs(h-n)<fM?l:t,n]:null))-1),++f);f&&(b=!1)}if(b){var g,_,m,x=1/0;for(i=0,b=null;i<y;++i)(o=uM[i])&&(m=(g=(u=o.site)[0]-t)*g+(_=u[1]-n)*_)<x&&(x=m,b=o);if(b){var w=[t,n],M=[t,r],S=[e,r],k=[e,n];b.halfedges.push(cM.push(Bw(u=b.site,w,M))-1,cM.push(Bw(u,M,S))-1,cM.push(Bw(u,S,k))-1,cM.push(Bw(u,k,w))-1)}}for(i=0;i<y;++i)(o=uM[i])&&(o.halfedges.length||delete uM[i])}(u,a,c,f)}this.edges=cM,this.cells=uM,oM=aM=cM=uM=null}hM.prototype={constructor:hM,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return Ww(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,c,f,s=e.site,l=-1,h=n[i[o-1]],d=h.left===s?h.right:h.left;++l<o;)u=d,d=(h=n[i[l]]).left===s?h.right:h.left,u&&d&&r<u.index&&r<d.index&&(c=u,f=d,((a=s)[0]-f[0])*(c[1]-a[1])-(a[0]-c[0])*(f[1]-a[1])<0)&&t.push([s.data,u.data,d.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],l=c*c+f*f;l<s&&(s=l,u=a.index)}}))}while(null!==u);return o._found=r,null==e||s<=e*e?i.site:null}};var dM=function(){var t=Nw,n=Ow,e=null;function r(r){return new hM(r.map((function(e,i){var o=[Math.round(t(e,i,r)/fM)*fM,Math.round(n(e,i,r)/fM)*fM];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:Tw(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:Tw(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},pM=function(t){return function(){return t}};function vM(t,n,e){this.target=t,this.type=n,this.transform=e}function yM(t,n,e){this.k=t,this.x=n,this.y=e}yM.prototype={constructor:yM,scale:function(t){return 1===t?this:new yM(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new yM(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var bM=new yM(1,0,0);function gM(t){for(;!t.__zoom;)if(!(t=t.parentNode))return bM;return t.__zoom}function _M(){sn.stopImmediatePropagation()}gM.prototype=yM.prototype;var mM=function(){sn.preventDefault(),sn.stopImmediatePropagation()};function xM(){return!sn.ctrlKey&&!sn.button}function wM(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function MM(){return this.__zoom||bM}function SM(){return-sn.deltaY*(1===sn.deltaMode?.05:sn.deltaMode?1:.002)}function kM(){return navigator.maxTouchPoints||"ontouchstart"in this}function AM(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}var CM=function(){var t,n,e=xM,r=wM,i=AM,o=SM,u=kM,a=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],f=250,s=hp,l=lt("start","zoom","end"),h=0;function d(t){t.property("__zoom",MM).on("wheel.zoom",m).on("mousedown.zoom",x).on("dblclick.zoom",w).filter(u).on("touchstart.zoom",M).on("touchmove.zoom",S).on("touchend.zoom touchcancel.zoom",k).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(t,n){return(n=Math.max(a[0],Math.min(a[1],n)))===t.k?t:new yM(n,t.x,t.y)}function v(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new yM(t.k,r,i)}function y(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function b(t,n,e){t.on("start.zoom",(function(){g(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){g(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=g(t,i),u=r.apply(t,i),a=null==e?y(u):"function"==typeof e?e.apply(t,i):e,c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),f=t.__zoom,l="function"==typeof n?n.apply(t,i):n,h=s(f.invert(a).concat(c/f.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=h(t),e=c/n[2];t=new yM(e,a[0]-n[0]*e,a[1]-n[1]*e)}o.zoom(null,t)}}))}function g(t,n,e){return!e&&t.__zooming||new _(t,n)}function _(t,n){this.that=t,this.args=n,this.active=0,this.extent=r.apply(t,n),this.taps=0}function m(){if(e.apply(this,arguments)){var t=g(this,arguments),n=this.__zoom,r=Math.max(a[0],Math.min(a[1],n.k*Math.pow(2,o.apply(this,arguments)))),u=Ie(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],ar(this),t.start()}mM(),t.wheel=setTimeout(f,150),t.zoom("mouse",i(v(p(n,r),t.mouse[0],t.mouse[1]),t.extent,c))}function f(){t.wheel=null,t.end()}}function x(){if(!n&&e.apply(this,arguments)){var t=g(this,arguments,!0),r=Sn(sn.view).on("mousemove.zoom",f,!0).on("mouseup.zoom",s,!0),o=Ie(this),u=sn.clientX,a=sn.clientY;Cn(sn.view),_M(),t.mouse=[o,this.__zoom.invert(o)],ar(this),t.start()}function f(){if(mM(),!t.moved){var n=sn.clientX-u,e=sn.clientY-a;t.moved=n*n+e*e>h}t.zoom("mouse",i(v(t.that.__zoom,t.mouse[0]=Ie(t.that),t.mouse[1]),t.extent,c))}function s(){r.on("mousemove.zoom mouseup.zoom",null),En(sn.view,t.moved),mM(),t.end()}}function w(){if(e.apply(this,arguments)){var t=this.__zoom,n=Ie(this),o=t.invert(n),u=t.k*(sn.shiftKey?.5:2),a=i(v(p(t,u),n,o),r.apply(this,arguments),c);mM(),f>0?Sn(this).transition().duration(f).call(b,a,n):Sn(this).call(d.transform,a)}}function M(){if(e.apply(this,arguments)){var n,r,i,o,u=sn.touches,a=u.length,c=g(this,arguments,sn.changedTouches.length===a);for(_M(),r=0;r<a;++r)i=u[r],o=[o=je(this,u,i.identifier),this.__zoom.invert(o),i.identifier],c.touch0?c.touch1||c.touch0[2]===o[2]||(c.touch1=o,c.taps=0):(c.touch0=o,n=!0,c.taps=1+!!t);t&&(t=clearTimeout(t)),n&&(c.taps<2&&(t=setTimeout((function(){t=null}),500)),ar(this),c.start())}}function S(){if(this.__zooming){var n,e,r,o,u=g(this,arguments),a=sn.changedTouches,f=a.length;for(mM(),t&&(t=clearTimeout(t)),u.taps=0,n=0;n<f;++n)e=a[n],r=je(this,a,e.identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var s=u.touch0[0],l=u.touch0[1],h=u.touch1[0],d=u.touch1[1],y=(y=h[0]-s[0])*y+(y=h[1]-s[1])*y,b=(b=d[0]-l[0])*b+(b=d[1]-l[1])*b;e=p(e,Math.sqrt(y/b)),r=[(s[0]+h[0])/2,(s[1]+h[1])/2],o=[(l[0]+d[0])/2,(l[1]+d[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",i(v(e,r,o),u.extent,c))}}function k(){if(this.__zooming){var t,e,r=g(this,arguments),i=sn.changedTouches,o=i.length;for(_M(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var u=Sn(this).on("dblclick.zoom");u&&u.apply(this,arguments)}}}return d.transform=function(t,n,e){var r=t.selection?t.selection():t;r.property("__zoom",MM),t!==r?b(t,n,e):r.interrupt().each((function(){g(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},d.scaleBy=function(t,n,e){d.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e)},d.scaleTo=function(t,n,e){d.transform(t,(function(){var t=r.apply(this,arguments),o=this.__zoom,u=null==e?y(t):"function"==typeof e?e.apply(this,arguments):e,a=o.invert(u),f="function"==typeof n?n.apply(this,arguments):n;return i(v(p(o,f),u,a),t,c)}),e)},d.translateBy=function(t,n,e){d.transform(t,(function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments),c)}))},d.translateTo=function(t,n,e,o){d.transform(t,(function(){var t=r.apply(this,arguments),u=this.__zoom,a=null==o?y(t):"function"==typeof o?o.apply(this,arguments):o;return i(bM.translate(a[0],a[1]).scale(u.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)}),o)},_.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){yn(new vM(d,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},d.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:pM(+t),d):o},d.filter=function(t){return arguments.length?(e="function"==typeof t?t:pM(!!t),d):e},d.touchable=function(t){return arguments.length?(u="function"==typeof t?t:pM(!!t),d):u},d.extent=function(t){return arguments.length?(r="function"==typeof t?t:pM([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),d):r},d.scaleExtent=function(t){return arguments.length?(a[0]=+t[0],a[1]=+t[1],d):[a[0],a[1]]},d.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],d):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},d.constrain=function(t){return arguments.length?(i=t,d):i},d.duration=function(t){return arguments.length?(f=+t,d):f},d.interpolate=function(t){return arguments.length?(s=t,d):s},d.on=function(){var t=l.on.apply(l,arguments);return t===l?d:t},d.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,d):Math.sqrt(h)},d}},function(t,n,e){"use strict";e.d(n,"b",(function(){return s})),e.d(n,"a",(function(){return l}));var r=e(0),i=e(9),o=e(7),u=e(15),a=e(12),c=e(28),f={};function s(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=void 0,r=void 0;return Object(i.a)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(o.a)(t[0])&&(t=t[0]),Object(c.a)(t,r).lift(new l(e))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new h(t,this.resultSelector))},t}(),h=function(t){function n(n,e){var r=t.call(this,n)||this;return r.resultSelector=e,r.active=0,r.values=[],r.observables=[],r}return r.a(n,t),n.prototype._next=function(t){this.values.push(f),this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{this.active=n,this.toRespond=n;for(var e=0;e<n;e++){var r=t[e];this.add(Object(a.a)(this,r,void 0,e))}}},n.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},n.prototype.notifyNext=function(t,n,e){var r=this.values,i=r[e],o=this.toRespond?i===f?--this.toRespond:this.toRespond:0;r[e]=n,0===o&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))},n.prototype._tryResultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(25),i=e(14);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),Object(r.b)(i.a,t)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(3);function i(t,n){return n?new r.a((function(e){return n.schedule(o,0,{error:t,subscriber:e})})):new r.a((function(n){return n.error(t)}))}function o(t){var n=t.error;t.subscriber.error(n)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(0),i=e(1);function o(){return function(t){return t.lift(new u(t))}}var u=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,n){var e=this.connectable;e._refCount++;var r=new a(t,e),i=n.subscribe(r);return r.closed||(r.connection=e.connect()),i},t}(),a=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.a(n,t),n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._refCount;if(n<=0)this.connection=null;else if(t._refCount=n-1,n>1)this.connection=null;else{var e=this.connection,r=t._connection;this.connection=null,!r||e&&r!==e||r.unsubscribe()}}else this.connection=null},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(0),i=e(5),o=e(52),u=e(4),a=e(61),c=e(22),f=e(69),s=function(t){function n(n,e,r){void 0===n&&(n=Number.POSITIVE_INFINITY),void 0===e&&(e=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=n<1?1:n,i._windowTime=e<1?1:e,e===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.a(n,t),n.prototype.nextInfiniteTimeWindow=function(n){var e=this._events;e.push(n),e.length>this._bufferSize&&e.shift(),t.prototype.next.call(this,n)},n.prototype.nextTimeWindow=function(n){this._events.push(new l(this._getNow(),n)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,n)},n.prototype._subscribe=function(t){var n,e=this._infiniteTimeWindow,r=e?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.a;if(this.isStopped||this.hasError?n=u.a.EMPTY:(this.observers.push(t),n=new f.a(this,t)),i&&t.add(t=new a.a(t,i)),e)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),n},n.prototype._getNow=function(){return(this.scheduler||o.a).now()},n.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),n=this._bufferSize,e=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<e);)o++;return i>n&&(o=Math.max(o,i-n)),o>0&&r.splice(0,o),r},n}(i.a),l=function(){return function(t,n){this.time=t,this.value=n}}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(3),i=e(11),o=e(10);function u(t){return new r.a((function(n){var e;try{e=t()}catch(t){return void n.error(t)}return(e?Object(i.a)(e):Object(o.b)()).subscribe(n)}))}},function(t,n,e){"use strict";e.d(n,"b",(function(){return f})),e.d(n,"a",(function(){return s}));var r=e(0),i=e(28),o=e(7),u=e(1),a=e(19),c=e(2);function f(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return"function"==typeof e&&t.pop(),Object(i.a)(t,void 0).lift(new s(e))}var s=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new l(t,this.resultSelector))},t}(),l=function(t){function n(n,e,r){void 0===r&&(r=Object.create(null));var i=t.call(this,n)||this;return i.resultSelector=e,i.iterators=[],i.active=0,i.resultSelector="function"==typeof e?e:void 0,i}return r.a(n,t),n.prototype._next=function(t){var n=this.iterators;Object(o.a)(t)?n.push(new d(t)):"function"==typeof t[a.a]?n.push(new h(t[a.a]())):n.push(new p(this.destination,this,t))},n.prototype._complete=function(){var t=this.iterators,n=t.length;if(this.unsubscribe(),0!==n){this.active=n;for(var e=0;e<n;e++){var r=t[e];if(r.stillUnsubscribed)this.destination.add(r.subscribe());else this.active--}}else this.destination.complete()},n.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},n.prototype.checkIterators=function(){for(var t=this.iterators,n=t.length,e=this.destination,r=0;r<n;r++){if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return}var i=!1,o=[];for(r=0;r<n;r++){var u,a=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),a.done)return void e.complete();o.push(a.value)}this.resultSelector?this._tryresultSelector(o):e.next(o),i&&e.complete()},n.prototype._tryresultSelector=function(t){var n;try{n=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(u.a),h=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),d=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[a.a]=function(){return this},t.prototype.next=function(t){var n=this.index++,e=this.array;return n<this.length?{value:e[n],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),p=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.parent=e,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.a(n,t),n.prototype[a.a]=function(){return this},n.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},n.prototype.hasValue=function(){return this.buffer.length>0},n.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},n.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},n.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},n.prototype.subscribe=function(){return Object(c.c)(this.observable,new c.a(this))},n}(c.b)},function(t,n,e){"use strict";function r(t){return null!==t&&"object"==typeof t}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(1);function i(t){for(;t;){var n=t,e=n.closed,i=n.destination,o=n.isStopped;if(e||o)return!1;t=i&&i instanceof r.a?i:null}return!0}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(3),i=e(4);function o(t,n){return new r.a((function(e){var r=new i.a,o=0;return r.add(n.schedule((function(){o!==t.length?(e.next(t[o++]),e.closed||r.add(this.schedule())):e.complete()}))),r}))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return o}));var r=e(13),i=e(34),o={closed:!0,next:function(t){},error:function(t){if(r.a.useDeprecatedSynchronousErrorHandling)throw t;Object(i.a)(t)},complete:function(){}}},function(t,n,e){"use strict";e.d(n,"b",(function(){return o})),e.d(n,"a",(function(){return u}));var r=e(0),i=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return r.a(n,t),n.prototype.schedule=function(n,e){return void 0===e&&(e=0),e>0?t.prototype.schedule.call(this,n,e):(this.delay=e,this.state=n,this.scheduler.flush(this),this)},n.prototype.execute=function(n,e){return e>0||this.closed?t.prototype.execute.call(this,n,e):this._execute(n,e)},n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,n,e,r):n.flush(this)},n}(e(30).a),o=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n}(e(27).a))(i),u=o},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(n,e){void 0===e&&(e=t.now),this.SchedulerAction=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.SchedulerAction(this,t).schedule(e,n)},t.now=function(){return Date.now()},t}()},function(t,n,e){"use strict";var r=this&&this.__spreadArrays||function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),i=0;for(n=0;n<e;n++)for(var o=arguments[n],u=0,a=o.length;u<a;u++,i++)r[i]=o[u];return r};function i(t){var n={};for(var e in t)if(0!==t[e].length)for(var r=0,i=t[e];r<i.length;r++){n[l=i[r]]?n[l]++:n[l]=1}var o=[];for(var u in n)1===n[u]&&0===t[u].length&&o.push(parseInt(u));var a={},c={};for(var e in t)if(0!==t[e].length){a[e]=[];for(var f=0,s=t[e];f<s.length;f++){var l=s[f];-1===o.indexOf(l)?(a[e]?a[e].push(l):a[e]=[l],a.hasOwnProperty(l)||(a[l]=[])):c[e]?c[e].push(l):c[e]=[l]}}return{filteredRelations:a,leafRelations:c}}function o(t){var n=0;for(var e in t)n+=t[e];return n}function u(t,n){var e={};for(var r in n)if(0!==n[r].length)for(var i=0,o=n[r];i<o.length;i++){e[r+","+o[i]]=0}for(var u in e)for(var a=u.split(",").map((function(t){return parseInt(t)})),s=a[0],l=a[1],h=t.indexOf(s),d=t.indexOf(l),p=h<d?h:d,v=h<d?d:h,y=0,b=Object.keys(e);y<b.length;y++){var g=b[y];if(u!==g){var _=g.split(",").map((function(t){return parseInt(t)})),m=_[0],x=_[1],w=t.indexOf(m),M=t.indexOf(x);(c(p,v,w)&&f(p,v,M)||f(p,v,w)&&c(p,v,M))&&e[u]++}}return e}function a(t,n,e,r,i,o){return[{x:t+e*(r-t)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i)),y:n+e*(i-n)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i))},{x:r-o*(r-t)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i)),y:i-o*(i-n)/Math.sqrt((t-r)*(t-r)+(n-i)*(n-i))}]}function c(t,n,e){return e<n&&e>t}function f(t,n,e){return e>n||e<t}function s(t,n,e,r,i){if(void 0===i){for(var o=r.length,u=.8*n*Math.sin(Math.PI/o)/(1+Math.sin(Math.PI/o)),c=2*Math.PI/o,f=[],s=[],l={},h=0;h<o;h++){var d={r:u,id:r[h],cx:t.x+(n-u)*Math.sin(c*h),cy:t.y-(n-u)*Math.cos(c*h)};l[r[h]]=[d.cx,d.cy,u],f.push(d)}for(var p in e)if(0!==e[p].length)for(var v=0,y=e[p];v<y.length;v++){var b=y[v];d={start:parseInt(p),end:parseInt(b),path:a(l[p][0],l[p][1],l[p][2],l[b][0],l[b][1],l[b][2])};s.push(d)}return{nodes:f,edges:s}}o=r.length;console.log("count",o);u=.8*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1)));var g=1.6*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1)));for(c=2*Math.PI/(o+1),f=[],s=[],l={},h=0;h<o;h++)if(r.indexOf(i)>h){d={r:u,id:r[h],cx:t.x+(n-u)*Math.sin(c*h),cy:t.y-(n-u)*Math.cos(c*h)};l[r[h]]=[d.cx,d.cy,u],f.push(d)}else if(r.indexOf(i)===h){d={r:g,id:r[h],cx:t.x+(n-g)*Math.sin(c*h+c/2),cy:t.y-(n-g)*Math.cos(c*h+c/2)};l[r[h]]=[d.cx,d.cy,g],f.push(d)}else{d={r:u,id:r[h],cx:t.x+(n-u)*Math.sin(c*h+c),cy:t.y-(n-u)*Math.cos(c*h+c)};l[r[h]]=[d.cx,d.cy,u],f.push(d)}for(var p in e)if(0!==e[p].length)for(var _=0,m=e[p];_<m.length;_++){b=m[_],d={start:parseInt(p),end:parseInt(b),path:a(l[p][0],l[p][1],l[p][2],l[b][0],l[b][1],l[b][2])};s.push(d)}return{nodes:f,edges:s}}function l(t,n,e,r,i,o,u){var a,c,f,s,l=(e-2*o)/5*3,h=(e-2*o)/5*4;return t<r&&Math.abs((n-i)/(t-r))<=.8?(a=t+l,f=n-(n-i)/(r-t)*l,c=t+(r-t)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):t>r&&Math.abs((n-i)/(t-r))<=.8?(a=t-l,f=n-(n-i)/(t-r)*l,c=t-(t-r)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):t<r&&Math.abs((n-i)/(t-r))>.8?n<i?(f=n+h,a=t+h/(i-n)*(r-t),c=t+(r-t)/(e-o)*(e-2*o),s=n+(i-n)/(e-o)*(e-2*o)):(f=n-h,a=t+h/(n-i)*(r-t),c=t+(r-t)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):t>r&&Math.abs((n-i)/(t-r))>.8?n<i?(f=n+h,a=t-h/(i-n)*(t-r),c=t-(t-r)/(e-o)*(e-2*o),s=n+(i-n)/(e-o)*(e-2*o)):(f=n-h,a=t-h/(n-i)*(t-r),c=t-(t-r)/(e-o)*(e-2*o),s=n-(n-i)/(e-o)*(e-2*o)):(a=t,c=t,n<i?(f=n+h,s=n+e-2*o):(f=n-h,s=n-e+2*o)),u?[{x:a,y:f},{x:c,y:s}]:[{x:c,y:s},{x:a,y:f}]}Object.defineProperty(n,"__esModule",{value:!0}),n.calNodeWithSelectedOutComCrossCom=n.calNodeWithSelecteOutTopicCrossCom=n.calNodeWithSelectedInTopicCrossCom=n.calNodeWithSelectedInComCrossCom=n.calcEdgeWithSelectedComCrossCom=n.calcEdgeWithSelectedNodeCrossCom=n.calcLinkSourceTargetBetweenRectAndCircle=n.calcEdgeWithSelectedNode=n.calcCircleLayoutSecondLayer1=n.calcCircleLayoutSecondLayer=n.calcCircleLayoutWithoutReduceCrossing=n.calcCircleLayout=n.calcLinkSourceTargetBetweenCircles=void 0,n.calcLinkSourceTargetBetweenCircles=a,n.calcCircleLayout=function(t,n,e,a){if(1===Object.keys(e).length&&0===e[Object.keys(e)[0]].length)return{sequence:Object.keys(e),nodes:[],edges:[]};for(var c=[],f=i(e),l=f.filteredRelations,h=f.leafRelations;0!==Object.keys(h).length;){if(1===Object.keys(l).length){c.push(Object.assign({},h));break}c.push(Object.assign({},h));var d=i(l);l=d.filteredRelations,h=d.leafRelations}for(var p=function(t){var n,e,i=Array.prototype.concat([],Object.keys(t).map((function(t){return parseInt(t)}))),a={};for(var c in t)if(0!==t[c].length)for(var f=0,s=t[c];f<s.length;f++){var l=s[f];a[c]?a[c]++:a[c]=1,a[l]?a[l]+=.5:a[l]=.5}for(var h=1/0,d=u(i,t),p=Object.keys(d).reduce((function(t,n){return t?d[t]<d[n]?n:t:n}),""),v=o(d),y=r(i);v<h&&v>0;){c=void 0,l=void 0;if(1===d[p]){var b=[];for(var g in d)1===d[g]&&b.push(g.split(",").map((function(t){return parseInt(t)})));for(var _=1/0,m=-1,x=0;x<b.length;x++)for(var w=0,M=b[x];w<M.length;w++){var S=M[w];a[S]<_&&(m=x,_=a[S])}c=(n=b[m])[0],l=n[1]}else c=(e=p.split(",").map((function(t){return parseInt(t)})))[0],l=e[1];if(a[c]<a[l]?(i.splice(i.indexOf(c),1),i.splice(i.indexOf(l),0,c)):(i.splice(i.indexOf(l),1),i.splice(i.indexOf(c),0,l)),d=u(i,t),p=Object.keys(d).reduce((function(t,n){return t?d[t]<d[n]?n:t:n}),""),v<o(d))break;h=v,v=o(d),y=r(i)}return y}(l),v=[p];c.length>0;){var y=Array.of.apply(Array,v[v.length-1]),b=c.pop();for(var g in b)for(var _=0,m=b[g];_<m.length;_++){var x=m[_];y.splice(y.indexOf(parseInt(g))+1,0,x)}v.push(y)}p=v[v.length-1];var w={};for(var g in e)if(0!==e[g].length)for(var M=0,S=e[g];M<S.length;M++){x=S[M];w[g]?w[g]++:w[g]=1,w[x]?w[x]++:w[x]=1}if(void 0===a){var k=[];for(var g in e){var A=!0;for(var C in e)if(C!==g)for(var E=0,T=e[C];E<T.length;E++){x=T[E];parseInt(g)===x&&(A=!1)}A&&k.push(parseInt(g))}if(k.length>0){var N=k.reduce((function(t,n){return t&&w[t]>w[n]?t:n})),O=p.indexOf(N);p=p.slice(O).concat(p.slice(0,O))}}else p=p.slice(p.indexOf(a)).concat(p.slice(0,p.indexOf(a)));return Object.assign({sequence:p},s(t,n,e,p,void 0))},n.calcCircleLayoutWithoutReduceCrossing=s,n.calcCircleLayoutSecondLayer=function(t,n,e,r,i){for(var o=r.length,u=.4*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1))),a=2*Math.PI/(o+1),c=[],f={},s=0;s<o;s++)if(r.indexOf(i)>s){var l={r:u,id:r[s],cx:t.x+(n-u)*Math.sin(a*s),cy:t.y-(n-u)*Math.cos(a*s)};f[r[s]]=[l.cx,l.cy,u],c.push(l)}else if(r.indexOf(i)===s){l={r:.9*(n-2*u),id:r[s],cx:t.x,cy:t.y};f[r[s]]=[l.cx,l.cy,l.r],c.push(l)}else{l={r:u,id:r[s],cx:t.x+(n-u)*Math.sin(a*s+a),cy:t.y-(n-u)*Math.cos(a*s+a)};f[r[s]]=[l.cx,l.cy,u],c.push(l)}return{nodes:c,edges:[]}},n.calcCircleLayoutSecondLayer1=function(t,n,e,r,i){for(var o=r.length,u=.4*n*Math.sin(Math.PI/(o+1))/(1+Math.sin(Math.PI/(o+1))),a=(Math.PI,[]),c=o/2,f={},s=0;s<o;s++)if(r.indexOf(i)===s){var l={r:n,id:r[s],cx:t.x,cy:t.y};f[r[s]]=[l.cx,l.cy,l.r],a.push(l)}else if(s<c){l={r:u,id:r[s],cx:t.x-n+(2*s+1)*u+2*n/(2*c-.01)*s,cy:t.y-(n-u)};f[r[s]]=[l.cx,l.cy,u]}else{l={r:u,id:r[s],cx:t.x-n+(2*(s-c-1)+1)*u+2*n/(2*c-.01)*(s-c),cy:t.y+(n-u)};f[r[s]]=[l.cx,l.cy,u]}return{nodes:a,edges:[]}},n.calcEdgeWithSelectedNode=function(t,n,e,r,i){var o=[];for(var u in e)0!==e[u].length&&-1!==e[u].indexOf(i)&&o.push(parseInt(u));for(var a=[],c=function(e){var i=r.filter((function(t){return t.id===e}))[0];a.push(l(t.x,t.y,n,i.cx,i.cy,i.r,!1))},f=0,s=o;f<s.length;f++){c(s[f])}for(var h=function(e){var i=r.filter((function(t){return t.id===e}))[0];a.push(l(t.x,t.y,n,i.cx,i.cy,i.r,!0))},d=0,p=e[i];d<p.length;d++){h(p[d])}return a},n.calcLinkSourceTargetBetweenRectAndCircle=l,n.calcEdgeWithSelectedNodeCrossCom=function(t,n,e,r,i,o){for(var u=[],c=function(r){if(r[0]===e)if(u.filter((function(t){return t.end===i[r[1]]})).length>0)for(var c=0,f=u;c<f.length;c++){(d=f[c]).end===i[r[1]]&&d.topics.push(r[1])}else{var s=o.filter((function(t){return t.id===i[r[1]]}))[0];u.push({start:i[e],end:i[r[1]],topics:[r[1]],path:a(t.x,t.y,n,s.cx,s.cy,s.r)})}if(r[1]===e)if(u.filter((function(t){return t.start===i[r[0]]})).length>0)for(var l=0,h=u;l<h.length;l++){var d;(d=h[l]).start===i[r[0]]&&d.topics.push(r[0])}else{s=o.filter((function(t){return t.id===i[r[0]]}))[0];u.push({start:i[r[0]],end:i[e],topics:[r[0]],path:a(s.cx,s.cy,s.r,t.x,t.y,n)})}},f=0,s=r;f<s.length;f++){c(s[f])}return u},n.calcEdgeWithSelectedComCrossCom=function(t,n,e){var r=[];for(var i in n)if(parseInt(i)===t)for(var o=0,u=n[i];o<u.length;o++){var c=u[o];r.push([t,c])}else for(var f=0,s=n[i];f<s.length;f++){(c=s[f])===t&&r.push([parseInt(i),t])}for(var l=[],h=function(t){var n=e.filter((function(n){return n.id===t[0]}))[0],r=e.filter((function(n){return n.id===t[1]}))[0];l.push({start:t[0],end:t[1],path:a(n.cx,n.cy,n.r,r.cx,r.cy,r.r)})},d=0,p=r;d<p.length;d++){h(p[d])}return l},n.calNodeWithSelectedInComCrossCom=function(t,n,e){var r=[],i=[];for(var o in n)if(parseInt(o)===t)for(var u=0,a=n[o];u<a.length;u++){var c=a[u];i.push([c,e[c]])}else for(var f=0,s=n[o];f<s.length;f++){(c=s[f])===t&&r.push([parseInt(o),e[parseInt(o)]])}return r},n.calNodeWithSelectedInTopicCrossCom=function(t,n,e,r){var i=[],o=[];for(var u in e[t])if(parseInt(u)===n)for(var a=0,c=e[t][u];a<c.length;a++){var f=c[a];o.push([f,r[f]])}else for(var s=0,l=e[t][u];s<l.length;s++){(f=l[s])===n&&i.push([parseInt(u),r[parseInt(u)]])}return console.log("InTopic",i),console.log("OutTopic",o),i},n.calNodeWithSelecteOutTopicCrossCom=function(t,n,e,r){var i=[],o=[];for(var u in e[t])if(parseInt(u)===n)for(var a=0,c=e[t][u];a<c.length;a++){var f=c[a];o.push([f,r[f]])}else for(var s=0,l=e[t][u];s<l.length;s++){(f=l[s])===n&&i.push([parseInt(u),r[parseInt(u)]])}return o},n.calNodeWithSelectedOutComCrossCom=function(t,n,e){var r=[];for(var i in n)if(parseInt(i)===t)for(var o=0,u=n[i];o<u.length;o++){var a=u[o];r.push([a,e[a]])}return r}},function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(105));n.generate=i.default;var o={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"};n.presetPrimaryColors=o;var u={};n.presetPalettes=u,Object.keys(o).forEach((function(t){u[t]=i.default(o[t]),u[t].primary=u[t][5]}));var a=u.red;n.red=a;var c=u.volcano;n.volcano=c;var f=u.gold;n.gold=f;var s=u.orange;n.orange=s;var l=u.yellow;n.yellow=l;var h=u.lime;n.lime=h;var d=u.green;n.green=d;var p=u.cyan;n.cyan=p;var v=u.blue;n.blue=v;var y=u.geekblue;n.geekblue=y;var b=u.purple;n.purple=b;var g=u.magenta;n.magenta=g;var _=u.grey;n.grey=_},function(t,n,e){"use strict";e.d(n,"b",(function(){return c})),e.d(n,"a",(function(){return h}));var r=e(0),i=e(1),o=e(4),u=e(3),a=e(5);function c(t,n,e,r){return function(i){return i.lift(new f(t,n,e,r))}}var f=function(){function t(t,n,e,r){this.keySelector=t,this.elementSelector=n,this.durationSelector=e,this.subjectSelector=r}return t.prototype.call=function(t,n){return n.subscribe(new s(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),s=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.keySelector=e,u.elementSelector=r,u.durationSelector=i,u.subjectSelector=o,u.groups=null,u.attemptedToUnsubscribe=!1,u.count=0,u}return r.a(n,t),n.prototype._next=function(t){var n;try{n=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,n)},n.prototype._group=function(t,n){var e=this.groups;e||(e=this.groups=new Map);var r,i=e.get(n);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new a.a,e.set(n,i);var o=new h(n,i,this);if(this.destination.next(o),this.durationSelector){var u=void 0;try{u=this.durationSelector(new h(n,i))}catch(t){return void this.error(t)}this.add(u.subscribe(new l(n,i,this)))}}i.closed||i.next(r)},n.prototype._error=function(t){var n=this.groups;n&&(n.forEach((function(n,e){n.error(t)})),n.clear()),this.destination.error(t)},n.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,n){t.complete()})),t.clear()),this.destination.complete()},n.prototype.removeGroup=function(t){this.groups.delete(t)},n.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},n}(i.a),l=function(t){function n(n,e,r){var i=t.call(this,e)||this;return i.key=n,i.group=e,i.parent=r,i}return r.a(n,t),n.prototype._next=function(t){this.complete()},n.prototype._unsubscribe=function(){var t=this.parent,n=this.key;this.key=this.parent=null,t&&t.removeGroup(n)},n}(i.a),h=function(t){function n(n,e,r){var i=t.call(this)||this;return i.key=n,i.groupSubject=e,i.refCountSubscription=r,i}return r.a(n,t),n.prototype._subscribe=function(t){var n=new o.a,e=this.refCountSubscription,r=this.groupSubject;return e&&!e.closed&&n.add(new d(e)),n.add(r.subscribe(t)),n},n}(u.a),d=function(t){function n(n){var e=t.call(this)||this;return e.parent=n,n.count++,e}return r.a(n,t),n.prototype.unsubscribe=function(){var n=this.parent;n.closed||this.closed||(t.prototype.unsubscribe.call(this),n.count-=1,0===n.count&&n.attemptedToUnsubscribe&&n.unsubscribe())},n}(o.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e(3),i=e(6),o=e(31),u=e(9);function a(t,n,e){void 0===t&&(t=0);var a=-1;return Object(o.a)(n)?a=Number(n)<1?1:Number(n):Object(u.a)(n)&&(e=n),Object(u.a)(e)||(e=i.a),new r.a((function(n){var r=Object(o.a)(t)?t:+t-e.now();return e.schedule(c,r,{index:0,period:a,subscriber:n})}))}function c(t){var n=t.index,e=t.period,r=t.subscriber;if(r.next(n),!r.closed){if(-1===e)return r.complete();t.index=n+1,this.schedule(t,e)}}},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(42);function i(){return Object(r.a)(1)}},function(t,n,e){"use strict";e.d(n,"a",(function(){return a}));var r=e(3),i=e(9),o=e(42),u=e(28);function a(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Number.POSITIVE_INFINITY,a=null,c=t[t.length-1];return Object(i.a)(c)?(a=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(e=t.pop())):"number"==typeof c&&(e=t.pop()),null===a&&1===t.length&&t[0]instanceof r.a?t[0]:Object(o.a)(e)(Object(u.a)(t,a))}},function(t,n,e){"use strict";e.d(n,"a",(function(){return f})),e.d(n,"b",(function(){return s}));var r=e(0),i=e(5),o=e(3),u=e(1),a=e(4),c=e(44),f=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subjectFactory=e,r._refCount=0,r._isComplete=!1,r}return r.a(n,t),n.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},n.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},n.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new a.a).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=a.a.EMPTY)),t},n.prototype.refCount=function(){return Object(c.a)()(this)},n}(o.a),s=function(){var t=f.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function n(n,e){var r=t.call(this,n)||this;return r.connectable=e,r}return r.a(n,t),n.prototype._error=function(n){this._unsubscribe(),t.prototype._error.call(this,n)},n.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var n=t._connection;t._refCount=0,t._subject=null,t._connection=null,n&&n.unsubscribe()}},n}(i.b);u.a},function(t,n,e){"use strict";e.d(n,"b",(function(){return u})),e.d(n,"a",(function(){return c}));var r=e(0),i=e(1),o=e(17);function u(t,n){return void 0===n&&(n=0),function(e){return e.lift(new a(t,n))}}var a=function(){function t(t,n){void 0===n&&(n=0),this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return n.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function n(n,e,r){void 0===r&&(r=0);var i=t.call(this,n)||this;return i.scheduler=e,i.delay=r,i}return r.a(n,t),n.dispatch=function(t){var n=t.notification,e=t.destination;n.observe(e),this.unsubscribe()},n.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(n.dispatch,this.delay,new f(t,this.destination)))},n.prototype._next=function(t){this.scheduleMessage(o.a.createNext(t))},n.prototype._error=function(t){this.scheduleMessage(o.a.createError(t)),this.unsubscribe()},n.prototype._complete=function(){this.scheduleMessage(o.a.createComplete()),this.unsubscribe()},n}(i.a),f=function(){return function(t,n){this.notification=t,this.destination=n}}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return u}));var r=e(0),i=e(5),o=e(22),u=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return r.a(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return e&&!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.a;return this._value},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(i.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return c}));var r=e(0),i=e(7),o=e(28),u=e(15),a=e(12);function c(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){if(!Object(i.a)(t[0]))return t[0];t=t[0]}return Object(o.a)(t,void 0).lift(new f)}var f=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new s(t))},t}(),s=function(t){function n(n){var e=t.call(this,n)||this;return e.hasFirst=!1,e.observables=[],e.subscriptions=[],e}return r.a(n,t),n.prototype._next=function(t){this.observables.push(t)},n.prototype._complete=function(){var t=this.observables,n=t.length;if(0===n)this.destination.complete();else{for(var e=0;e<n&&!this.hasFirst;e++){var r=t[e],i=Object(a.a)(this,r,void 0,e);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},n.prototype.notifyNext=function(t,n,e){if(!this.hasFirst){this.hasFirst=!0;for(var r=0;r<this.subscriptions.length;r++)if(r!==e){var i=this.subscriptions[r];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(n)},n}(u.a)},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},function(t,n,e){"use strict";e.d(n,"a",(function(){return s}));var r=e(3),i=e(4),o=e(21);var u=e(50),a=e(19);var c=e(68),f=e(66);function s(t,n){if(null!=t){if(function(t){return t&&"function"==typeof t[o.a]}(t))return function(t,n){return new r.a((function(e){var r=new i.a;return r.add(n.schedule((function(){var i=t[o.a]();r.add(i.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(Object(c.a)(t))return function(t,n){return new r.a((function(e){var r=new i.a;return r.add(n.schedule((function(){return t.then((function(t){r.add(n.schedule((function(){e.next(t),r.add(n.schedule((function(){return e.complete()})))})))}),(function(t){r.add(n.schedule((function(){return e.error(t)})))}))}))),r}))}(t,n);if(Object(f.a)(t))return Object(u.a)(t,n);if(function(t){return t&&"function"==typeof t[a.a]}(t)||"string"==typeof t)return function(t,n){if(!t)throw new Error("Iterable cannot be null");return new r.a((function(e){var r,o=new i.a;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(n.schedule((function(){r=t[a.a](),o.add(n.schedule((function(){if(!e.closed){var t,n;try{var i=r.next();t=i.value,n=i.done}catch(t){return void e.error(t)}n?e.complete():(e.next(t),this.schedule())}})))}))),o}))}(t,n)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},function(t,n,e){"use strict";e.d(n,"a",(function(){return r}));var r=function(t){return function(n){for(var e=0,r=t.length;e<r&&!n.closed;e++)n.next(t[e]);n.complete()}}},function(t,n,e){"use strict";function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";e.d(n,"a",(function(){return i}));var r=e(0),i=function(t){function n(n,e){var r=t.call(this)||this;return r.subject=n,r.subscriber=e,r.closed=!1,r}return r.a(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,n=t.observers;if(this.subject=null,n&&0!==n.length&&!t.isStopped&&!t.closed){var e=n.indexOf(this.subscriber);-1!==e&&n.splice(e,1)}}},n}(e(4).a)},function(t,n,e){"use strict";function r(t,n){function e(){return!e.pred.apply(e.thisArg,arguments)}return e.pred=t,e.thisArg=n,e}e.d(n,"a",(function(){return r}))},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},i=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.completeObj=n.judgementStringLengthWithChinese=n.drawMap=n.link=void 0;var o=e(40),u=e(87),a=e(55),c=e(107),f=e(54),s=[];for(var l in a.presetPalettes)s.push(a.presetPalettes[l].slice(0,10));function h(t){for(var n=0,e=0;e<t.length;e++)/[a-z0-9\*\\\|\(\)\&\^\%\$\#\@\!\,\.\?\<\>\/]/.test(t[e])?n+=.5:n+=1;return n}function d(t){var n=new Set;for(var e in t){n.add(parseInt(e));for(var r=0,i=t[e];r<i.length;r++){var o=i[r];n.add(parseInt(o))}}for(var u=0,a=Array.from(n);u<a.length;u++){t[e=a[u]]||(t[e]=[])}return t}n.link=o.line().x((function(t){return t.x})).y((function(t){return t.y})).curve(o.curveCatmullRom.alpha(.5)),n.drawMap=function(t,e,a,l,p,v,y){return void 0===p&&(p=[]),r(this,void 0,void 0,(function(){function r(t){switch(o.select("#edgeWithTopicInCom").remove(),o.select("#edgeWithTopicCrossCom").remove(),o.select("#comPaths").remove(),o.select("#inComPaths").remove(),o.select("#learningPaths").selectAll("path").style("visibility","hidden"),a.style.visibility="hidden",k){case 0:l(t.id),k=1;break;case 1:B.com===t.id?(k=2,b(t.id)):l(t.id);break;case 2:l(t.id),k=1;break;case 3:B.com===t.id?(b(t.id),k=2):(l(t.id),k=1)}B.com=t.id}function l(t){var e=f.calcCircleLayoutWithoutReduceCrossing({x:j,y:j},j,S,z,t),r=e.nodes,i=e.edges;A.select("#com").selectAll("circle").data(r).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("display","inline"),A.select("#com2com").selectAll("path").data(i).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("display","inline").style("visibility",0!==p.length?"hidden":"visible"),A.select("#comText").selectAll("text").data(r).transition().delay(300).attr("x",(function(t){return t.cx-14*h(m[F[t.id][0]])/2})).attr("y",(function(t,n){return r[n].cy<j?t.cy-t.r-24:t.cy+t.r+24})).attr("font-size",14).attr("display","inline");for(var u=0,a=r;u<a.length;u++){for(var c=a[u],s=f.calcCircleLayoutWithoutReduceCrossing({x:c.cx,y:c.cy},c.r,x[c.id],F[c.id],void 0),l=0,d=s.nodes;l<d.length;l++){var v=d[l];D[v.id]=v}var y=document.getElementById(c.id+"nodes");o.select(y).selectAll("circle").data(s.nodes).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display","inline");var b=document.getElementById(c.id+"edges");o.select(b).selectAll("path").data(s.edges).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("stroke-width",2).attr("fill","none").attr("display","inline").style("visibility",0!==p.length?"hidden":"visible");var g=document.getElementById(c.id+"text");o.select(g).selectAll("text").data(s.nodes).transition().delay(300).attr("font-size",(function(t){var n=(2*t.r-4)/h(m[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/h(m[t.id]);return t.cx-h(m[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/h(m[t.id])>24?t.cy+12:t.cy+(t.r-2)/h(m[t.id])})).text((function(t){return m[t.id]})).attr("fill","#ffffff").attr("display","inline")}if(0!==p.length){for(var _=[],w=0;w<p.length-1;w++)_.push([p[w],p[w+1]]);A.select("#learningPaths").selectAll("path").data(_).transition().delay(300).style("visibility","visible").attr("d",(function(t){return n.link(f.calcLinkSourceTargetBetweenCircles(D[t[0]].cx,D[t[0]].cy,D[t[0]].r,D[t[1]].cx,D[t[1]].cy,D[t[1]].r))}))}}function b(t){var e=f.calcCircleLayoutSecondLayer({x:j,y:j},j,S,z,t),r=e.nodes,i=(e.edges,f.calcEdgeWithSelectedComCrossCom(t,S,r));A.select("#com").selectAll("circle").data(r).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})),A.select("#com2com").selectAll("path").attr("display","none"),A.select("#com2com").selectAll("path").data(i).attr("d",(function(t){return n.link(t.path)})).attr("display","inline"),A.select("#comText").selectAll("text").data(r).transition().delay(300).attr("x",(function(t){var n=(2*t.r-4)/h(m[F[t.id][0]]);return t.cx-h(m[F[t.id][0]])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/h(m[F[t.id][0]])>24?t.cy+12:t.cy+(t.r-2)/h(m[F[t.id][0]])})).attr("font-size",(function(n){if(n.id===t)return 0;var e=(2*n.r-4)/h(m[F[n.id][0]]);return e>24?24:e}));for(var u={},a=0,c=r;a<c.length;a++){var s=c[a];if(s.id!==t){var l=document.getElementById(s.id+"nodes");o.select(l).selectAll("circle").attr("display","none");var d=document.getElementById(s.id+"edges");o.select(d).selectAll("path").attr("display","none");var v=document.getElementById(s.id+"text");o.select(v).selectAll("text").attr("display","none")}else{for(var y=f.calcCircleLayoutWithoutReduceCrossing({x:s.cx,y:s.cy},s.r,x[s.id],F[s.id],void 0),b=0,g=y.nodes;b<g.length;b++){var _=g[b];u[_.id]=_}l=document.getElementById(s.id+"nodes");o.select(l).selectAll("circle").data(y.nodes).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display","inline");d=document.getElementById(s.id+"edges");o.select(d).selectAll("path").data(y.edges).transition().delay(300).attr("d",(function(t){return n.link(t.path)})).attr("stroke-width",2).attr("fill","none").attr("display","inline");v=document.getElementById(s.id+"text");o.select(v).selectAll("text").data(y.nodes).transition().delay(300).attr("font-size",(function(t){var n=(2*t.r-4)/h(m[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/h(m[t.id]);return t.cx-h(m[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/h(m[t.id])>24?t.cy+12:t.cy+(t.r-2)/h(m[t.id])})).text((function(t){return m[t.id]})).attr("fill","#ffffff").attr("display","inline")}}if(0!==p.length){for(var M=p.map((function(t){return w[t]})),k=[],C=0;C<M.length-1;C++)k.push([M[C],M[C+1]]);k=k.filter((function(t){return t[0]!==t[1]})),A.select("#learningPaths").style("visibility","hidden"),A.append("g").attr("id","comPaths").selectAll("path").data(k).enter().append("path").transition().delay(300).attr("d",(function(t){return n.link(f.calcLinkSourceTargetBetweenCircles(r.filter((function(n){return n.id===t[0]}))[0].cx,r.filter((function(n){return n.id===t[0]}))[0].cy,r.filter((function(n){return n.id===t[0]}))[0].r,r.filter((function(n){return n.id===t[1]}))[0].cx,r.filter((function(n){return n.id===t[1]}))[0].cy,r.filter((function(n){return n.id===t[1]}))[0].r))})).attr("stroke","#873800").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)");var E=[];for(C=0;C<p.length-1;C++)-1!==Object.keys(u).map((function(t){return parseInt(t)})).indexOf(p[C])&&-1!==Object.keys(u).map((function(t){return parseInt(t)})).indexOf(p[C+1])&&E.push([p[C],p[C+1]]);A.append("g").attr("id","inComPaths").selectAll("path").data(E).enter().append("path").transition().delay(300).attr("d",(function(t){return n.link(f.calcLinkSourceTargetBetweenCircles(u[t[0]].cx,u[t[0]].cy,u[t[0]].r,u[t[1]].cx,u[t[1]].cy,u[t[1]].r))})).attr("stroke","#873800").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}}function g(t,n){if(o.select("#edgeWithTopicInCom").remove(),o.select("#edgeWithTopicCrossCom").remove(),o.select("#comPaths").remove(),o.select("#inComPaths").remove(),a.style.visibility="hidden",B.topicId=t.id,B.com=n.id,-1===t.id)return b(n.id),void(k=2);switch(k){case 0:case 1:b(n.id),k=2;break;case 2:_(t.id,n),k=3;break;case 3:_(t.id,n)}v(t.id,m[t.id])}function _(t,i){var s=f.calcCircleLayoutSecondLayer({x:j,y:j},j,S,z,i.id),l=s.nodes;s.edges;A.select("#com").selectAll("circle").data(l).transition().delay(300).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})),A.select("#com2com").selectAll("path").attr("display","none"),A.select("#comText").selectAll("text").data(l).transition().delay(300).attr("x",(function(t){var n=(2*t.r-4)/h(m[F[t.id][0]]);return t.cx-h(m[F[t.id][0]])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/h(m[F[t.id][0]])>24?t.cy+12:t.cy+(t.r-2)/h(m[F[t.id][0]])})).attr("font-size",(function(t){if(t.id===i.id)return 0;var n=(2*t.r-4)/h(m[F[t.id][0]]);return n>24?24:n}));for(var d=function(s){if(s.id!==i.id){var d=document.getElementById(s.id+"nodes");o.select(d).selectAll("circle").attr("display","none");var p=document.getElementById(s.id+"edges");o.select(p).selectAll("path").attr("display","none");var v=document.getElementById(s.id+"text");o.select(v).selectAll("text").attr("display","none")}else{var b=f.calcCircleLayoutSecondLayer({x:s.cx,y:s.cy},s.r,x[s.id],F[s.id],t);d=document.getElementById(s.id+"nodes");o.select(d).selectAll("circle").data(b.nodes).attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display",(function(n){return n.id===t?"none":"inline"}));p=document.getElementById(s.id+"edges");o.select(p).selectAll("path").attr("display","none");v=document.getElementById(s.id+"text");o.select(v).selectAll("text").data(b.nodes).attr("font-size",(function(t){var n=(2*t.r-4)/h(m[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/h(m[t.id]);return t.cx-h(m[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/h(m[t.id])>24?t.cy+12:t.cy+(t.r-2)/h(m[t.id])})).text((function(t){return m[t.id]})).attr("fill","#ffffff").attr("display",(function(n){return n.id===t?"none":"inline"}));var g=F[s.id].length,_=.4*s.r*Math.sin(Math.PI/(g+1))/(1+Math.sin(Math.PI/(g+1)));a.style.width=(2*s.r-4*_)/5*3+"px",a.style.height=(2*s.r-4*_)/5*4+"px",a.style.left=e.clientWidth/2-(s.r-2*_)/5*3-24+"px",a.style.top=e.clientHeight/2-(s.r-2*_)/5*4-24+"px",a.style.visibility="visible",-1!==t&&m[t]&&u.default.post("http://yotta.xjtushilei.com:8083/topic/getCompleteTopicByTopicName?topicName="+encodeURIComponent(m[t])+"&hasFragment=emptyAssembleContent").then((function(t){c.drawTree(a,t.data.data,y)})).catch((function(t){return console.log(t)}));var S=f.calcEdgeWithSelectedNode({x:s.cx,y:s.cy},s.r,x[s.id],b.nodes,t);A.append("g").attr("id","edgeWithTopicInCom").selectAll("path").data(S).enter().append("path").attr("d",(function(t){return n.link(t)})).attr("stroke","#873800").attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow)");var k=f.calcEdgeWithSelectedNodeCrossCom({x:s.cx,y:s.cy},s.r,t,M,w,l);A.append("g").attr("id","edgeWithTopicCrossCom").selectAll("path").data(k).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#873800").attr("stroke-width",4).attr("fill","none").style("cursor","pointer").on("mouseover",(function(t){for(var n="",e=0,r=t.topics;e<r.length;e++){var i=r[e];n+=m[i]+" "}C.transition().duration(200).style("opacity",.9),C.html(n.trim()).style("left",o.event.pageX+"px").style("top",o.event.pageY-28+"px")})).on("mouseout",(function(t){C.transition().duration(500).style("opacity",0)})).on("click",(function(t){C.transition().duration(500).style("opacity",0),s.id===t.start?(B.com=t.end,r({id:t.end})):(B.com=t.start,r({id:t.start}))})).attr("marker-end","url(#arrow)")}},p=0,v=l;p<v.length;p++){d(v[p])}}var m,x,w,M,S,k,A,C,E,T,N,O,j,I,P,R,L,z,F,B,D,U,q,V,W,H,Y,$,X,G,Z,K,J;return i(this,(function(i){for(m=t.topics,x=t.graph,w=t.topicId2Community,M=t.relationCrossCommunity,S=t.communityRelation,k=0,A=o.select(e),C=o.select("body").append("div").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px").style("top",0),E=A.append("defs"),T=E.append("marker").attr("id","arrow").attr("markerUnits","strokeWidth").attr("markerWidth","6").attr("markerHeight","6").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto"),"M2,2 L10,6 L2,10 L6,6 L2,2",T.append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill","#873800"),X=0;X<s.length;X++)N=E.append("marker").attr("id","arrow"+X).attr("markerUnits","strokeWidth").attr("markerWidth","8").attr("markerHeight","8").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto"),"M2,2 L10,6 L2,10 L6,6 L2,2",N.append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill",s[X][9]);for(O in x)x[O]=d(x[O]);for(S=d(S),j=e.clientHeight<e.clientWidth?e.clientHeight/2-24:e.clientWidth/2-24,I=f.calcCircleLayout({x:j,y:j},j,S,void 0!==w[-1]?w[-1]:void 0),P=I.nodes,R=I.edges,L=I.sequence,z=L,F={},B={com:void 0,topicId:void 0},A.append("g").attr("id","com2com").selectAll("path").data(R).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke","#873800").attr("stroke-width",4).attr("fill","none").style("cursor","pointer").style("visibility",0!==p.length?"hidden":"visible").on("mouseover",(function(t){for(var n="",e=0,r=M;e<r.length;e++){var i=r[e];w[i[0]]===t.start&&w[i[1]]===t.end&&(n+=m[i[0]]+"->"+m[i[1]]+"\n")}C.transition().duration(200).style("opacity",.9),C.html(n.trim()).style("left",o.event.pageX+"px").style("top",o.event.pageY-28+"px")})).on("mouseout",(function(t){C.transition().duration(500).style("opacity",0)})).attr("marker-end","url(#arrow)"),A.append("g").attr("id","com").selectAll("circle").data(P).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return"com"+t.id})).attr("fill",(function(t,n){return s[n%s.length][1]})),D={},U=0,q=P;U<q.length;U++){for(J=q[U],V=f.calcCircleLayout({x:J.cx,y:J.cy},J.r,x[J.id],J.id===w[-1]?-1:void 0),W=0,H=V.nodes;W<H.length;W++)Y=H[W],D[Y.id]=Y;F[J.id]=V.sequence,A.append("g").attr("id",J.id+"edges").selectAll("path").data(V.edges).enter().append("path").attr("d",(function(t){return n.link(t.path)})).attr("stroke",s[z.indexOf(J.id)%s.length][8]).attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow"+z.indexOf(J.id)+")").style("visibility",0!==p.length?"hidden":"visible"),A.append("g").attr("id",J.id+"nodes").selectAll("circle").data(V.nodes).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("fill",s[z.indexOf(J.id)%s.length][6]),A.append("g").attr("id",J.id+"text").selectAll("text").data(V.nodes).enter().append("text").attr("font-size",(function(t){var n=(2*t.r-4)/h(m[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/h(m[t.id]);return n>24?t.cx-12*h(m[t.id]):t.cx-n/2*h(m[t.id])})).attr("y",(function(t){return t.cy+(t.r-2)/h(m[t.id])})).text((function(t){return m[t.id]})).attr("fill","#ffffff").attr("cursor","pointer")}if(A.append("g").attr("id","comText").selectAll("text").data(P).enter().append("text").attr("font-size",14).attr("x",(function(t){return t.cx-14*h(m[F[t.id][0]])/2})).attr("y",(function(t,n){return P[n].cy<j?t.cy-t.r-24:t.cy+t.r+24})).text((function(t){return m[F[t.id][0]]})).attr("fill","#000000").attr("cursor","pointer"),0!==p.length){for($=[],X=0;X<p.length-1;X++)$.push([p[X],p[X+1]]);A.append("g").attr("id","learningPaths").selectAll("path").data($).enter().append("path").attr("d",(function(t){return n.link(f.calcLinkSourceTargetBetweenCircles(D[t[0]].cx,D[t[0]].cy,D[t[0]].r,D[t[1]].cx,D[t[1]].cy,D[t[1]].r))})).attr("stroke","#873800").attr("stroke-width",2).attr("fill","none").style("cursor","pointer").attr("marker-end","url(#arrow)")}for(G=function(t){var n=document.getElementById(t.id+"nodes");o.select(n).selectAll("circle").on("click",(function(n){return g(n,t)}));var e=document.getElementById(t.id+"text");o.select(e).selectAll("text").on("click",(function(n){return g(n,t)}))},Z=0,K=P;Z<K.length;Z++)J=K[Z],G(J);return A.select("#com").selectAll("circle").on("click",(function(t){return r(t)})),A.select("#comText").selectAll("text").on("click",(function(t){return r(t)})),[2]}))}))},n.judgementStringLengthWithChinese=h,n.completeObj=d},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.globalData=n.globalState=void 0;var r=e(85);n.globalState=new r.BehaviorSubject({currentFacetId:-1,expandedFacetId:"-2,-2",init:!1}),n.globalData={treeData:null}},function(t,n,e){"use strict";t.exports=function(t,n){return function(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];return t.apply(n,e)}}},function(t,n,e){"use strict";var r=e(18);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,n,e){if(!n)return t;var o;if(e)o=e(n);else if(r.isURLSearchParams(n))o=n.toString();else{var u=[];r.forEach(n,(function(t,n){null!=t&&(r.isArray(t)?n+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),u.push(i(n)+"="+i(t))})))})),o=u.join("&")}if(o){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}},function(t,n,e){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,n,e){"use strict";(function(n){var r=e(18),i=e(94),o={"Content-Type":"application/x-www-form-urlencoded"};function u(t,n){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=n)}var a,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==n&&"[object process]"===Object.prototype.toString.call(n))&&(a=e(77)),a),transformRequest:[function(t,n){return i(n,"Accept"),i(n,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(u(n,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(u(n,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){c.headers[t]=r.merge(o)})),t.exports=c}).call(this,e(93))},function(t,n,e){"use strict";var r=e(18),i=e(95),o=e(74),u=e(97),a=e(100),c=e(101),f=e(78);t.exports=function(t){return new Promise((function(n,s){var l=t.data,h=t.headers;r.isFormData(l)&&delete h["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",v=t.auth.password||"";h.Authorization="Basic "+btoa(p+":"+v)}var y=u(t.baseURL,t.url);if(d.open(t.method.toUpperCase(),o(y,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:e,config:t,request:d};i(n,s,r),d=null}},d.onabort=function(){d&&(s(f("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){s(f("Network Error",t,null,d)),d=null},d.ontimeout=function(){var n="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(n=t.timeoutErrorMessage),s(f(n,t,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var b=e(102),g=(t.withCredentials||c(y))&&t.xsrfCookieName?b.read(t.xsrfCookieName):void 0;g&&(h[t.xsrfHeaderName]=g)}if("setRequestHeader"in d&&r.forEach(h,(function(t,n){void 0===l&&"content-type"===n.toLowerCase()?delete h[n]:d.setRequestHeader(n,t)})),r.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),t.responseType)try{d.responseType=t.responseType}catch(n){if("json"!==t.responseType)throw n}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),s(t),d=null)})),void 0===l&&(l=null),d.send(l)}))}},function(t,n,e){"use strict";var r=e(96);t.exports=function(t,n,e,i,o){var u=new Error(t);return r(u,n,e,i,o)}},function(t,n,e){"use strict";var r=e(18);t.exports=function(t,n){n=n||{};var e={},i=["url","method","params","data"],o=["headers","auth","proxy"],u=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(i,(function(t){void 0!==n[t]&&(e[t]=n[t])})),r.forEach(o,(function(i){r.isObject(n[i])?e[i]=r.deepMerge(t[i],n[i]):void 0!==n[i]?e[i]=n[i]:r.isObject(t[i])?e[i]=r.deepMerge(t[i]):void 0!==t[i]&&(e[i]=t[i])})),r.forEach(u,(function(r){void 0!==n[r]?e[r]=n[r]:void 0!==t[r]&&(e[r]=t[r])}));var a=i.concat(o).concat(u),c=Object.keys(n).filter((function(t){return-1===a.indexOf(t)}));return r.forEach(c,(function(r){void 0!==n[r]?e[r]=n[r]:void 0!==t[r]&&(e[r]=t[r])})),e}},function(t,n,e){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,n,e){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o="Expected a function",u="__lodash_placeholder__",a=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],c="[object Arguments]",f="[object Array]",s="[object Boolean]",l="[object Date]",h="[object Error]",d="[object Function]",p="[object GeneratorFunction]",v="[object Map]",y="[object Number]",b="[object Object]",g="[object RegExp]",_="[object Set]",m="[object String]",x="[object Symbol]",w="[object WeakMap]",M="[object ArrayBuffer]",S="[object DataView]",k="[object Float32Array]",A="[object Float64Array]",C="[object Int8Array]",E="[object Int16Array]",T="[object Int32Array]",N="[object Uint8Array]",O="[object Uint16Array]",j="[object Uint32Array]",I=/\b__p \+= '';/g,P=/\b(__p \+=) '' \+/g,R=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,z=/[&<>"']/g,F=RegExp(L.source),B=RegExp(z.source),D=/<%-([\s\S]+?)%>/g,U=/<%([\s\S]+?)%>/g,q=/<%=([\s\S]+?)%>/g,V=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,W=/^\w*$/,H=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Y=/[\\^$.*+?()[\]{}|]/g,$=RegExp(Y.source),X=/^\s+|\s+$/g,G=/^\s+/,Z=/\s+$/,K=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,J=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,nt=/\\(\\)?/g,et=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,ut=/^\[object .+?Constructor\]$/,at=/^0o[0-7]+$/i,ct=/^(?:0|[1-9]\d*)$/,ft=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,st=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",dt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pt="[\\ud800-\\udfff]",vt="["+dt+"]",yt="["+ht+"]",bt="\\d+",gt="[\\u2700-\\u27bf]",_t="[a-z\\xdf-\\xf6\\xf8-\\xff]",mt="[^\\ud800-\\udfff"+dt+bt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",xt="\\ud83c[\\udffb-\\udfff]",wt="[^\\ud800-\\udfff]",Mt="(?:\\ud83c[\\udde6-\\uddff]){2}",St="[\\ud800-\\udbff][\\udc00-\\udfff]",kt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",At="(?:"+_t+"|"+mt+")",Ct="(?:"+kt+"|"+mt+")",Et="(?:"+yt+"|"+xt+")"+"?",Tt="[\\ufe0e\\ufe0f]?"+Et+("(?:\\u200d(?:"+[wt,Mt,St].join("|")+")[\\ufe0e\\ufe0f]?"+Et+")*"),Nt="(?:"+[gt,Mt,St].join("|")+")"+Tt,Ot="(?:"+[wt+yt+"?",yt,Mt,St,pt].join("|")+")",jt=RegExp("['’]","g"),It=RegExp(yt,"g"),Pt=RegExp(xt+"(?="+xt+")|"+Ot+Tt,"g"),Rt=RegExp([kt+"?"+_t+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[vt,kt,"$"].join("|")+")",Ct+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[vt,kt+At,"$"].join("|")+")",kt+"?"+At+"+(?:['’](?:d|ll|m|re|s|t|ve))?",kt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",bt,Nt].join("|"),"g"),Lt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),zt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ft=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Bt=-1,Dt={};Dt[k]=Dt[A]=Dt[C]=Dt[E]=Dt[T]=Dt[N]=Dt["[object Uint8ClampedArray]"]=Dt[O]=Dt[j]=!0,Dt[c]=Dt[f]=Dt[M]=Dt[s]=Dt[S]=Dt[l]=Dt[h]=Dt[d]=Dt[v]=Dt[y]=Dt[b]=Dt[g]=Dt[_]=Dt[m]=Dt[w]=!1;var Ut={};Ut[c]=Ut[f]=Ut[M]=Ut[S]=Ut[s]=Ut[l]=Ut[k]=Ut[A]=Ut[C]=Ut[E]=Ut[T]=Ut[v]=Ut[y]=Ut[b]=Ut[g]=Ut[_]=Ut[m]=Ut[x]=Ut[N]=Ut["[object Uint8ClampedArray]"]=Ut[O]=Ut[j]=!0,Ut[h]=Ut[d]=Ut[w]=!1;var qt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Vt=parseFloat,Wt=parseInt,Ht="object"==typeof t&&t&&t.Object===Object&&t,Yt="object"==typeof self&&self&&self.Object===Object&&self,$t=Ht||Yt||Function("return this")(),Xt=n&&!n.nodeType&&n,Gt=Xt&&"object"==typeof r&&r&&!r.nodeType&&r,Zt=Gt&&Gt.exports===Xt,Kt=Zt&&Ht.process,Jt=function(){try{var t=Gt&&Gt.require&&Gt.require("util").types;return t||Kt&&Kt.binding&&Kt.binding("util")}catch(t){}}(),Qt=Jt&&Jt.isArrayBuffer,tn=Jt&&Jt.isDate,nn=Jt&&Jt.isMap,en=Jt&&Jt.isRegExp,rn=Jt&&Jt.isSet,on=Jt&&Jt.isTypedArray;function un(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function an(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function cn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function fn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function sn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function ln(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function hn(t,n){return!!(null==t?0:t.length)&&wn(t,n,0)>-1}function dn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function pn(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function vn(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function yn(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function bn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function gn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var _n=An("length");function mn(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function xn(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function wn(t,n,e){return n==n?function(t,n,e){var r=e-1,i=t.length;for(;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):xn(t,Sn,e)}function Mn(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function Sn(t){return t!=t}function kn(t,n){var e=null==t?0:t.length;return e?Tn(t,n)/e:NaN}function An(t){return function(n){return null==n?void 0:n[t]}}function Cn(t){return function(n){return null==t?void 0:t[n]}}function En(t,n,e,r,i){return i(t,(function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)})),e}function Tn(t,n){for(var e,r=-1,i=t.length;++r<i;){var o=n(t[r]);void 0!==o&&(e=void 0===e?o:e+o)}return e}function Nn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function On(t){return function(n){return t(n)}}function jn(t,n){return pn(n,(function(n){return t[n]}))}function In(t,n){return t.has(n)}function Pn(t,n){for(var e=-1,r=t.length;++e<r&&wn(n,t[e],0)>-1;);return e}function Rn(t,n){for(var e=t.length;e--&&wn(n,t[e],0)>-1;);return e}function Ln(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var zn=Cn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Fn=Cn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Bn(t){return"\\"+qt[t]}function Dn(t){return Lt.test(t)}function Un(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function qn(t,n){return function(e){return t(n(e))}}function Vn(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var a=t[e];a!==n&&a!==u||(t[e]=u,o[i++]=e)}return o}function Wn(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function Hn(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function Yn(t){return Dn(t)?function(t){var n=Pt.lastIndex=0;for(;Pt.test(t);)++n;return n}(t):_n(t)}function $n(t){return Dn(t)?function(t){return t.match(Pt)||[]}(t):function(t){return t.split("")}(t)}var Xn=Cn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Gn=function t(n){var e,r=(n=null==n?$t:Gn.defaults($t.Object(),n,Gn.pick($t,Ft))).Array,i=n.Date,ht=n.Error,dt=n.Function,pt=n.Math,vt=n.Object,yt=n.RegExp,bt=n.String,gt=n.TypeError,_t=r.prototype,mt=dt.prototype,xt=vt.prototype,wt=n["__core-js_shared__"],Mt=mt.toString,St=xt.hasOwnProperty,kt=0,At=(e=/[^.]+$/.exec(wt&&wt.keys&&wt.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Ct=xt.toString,Et=Mt.call(vt),Tt=$t._,Nt=yt("^"+Mt.call(St).replace(Y,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ot=Zt?n.Buffer:void 0,Pt=n.Symbol,Lt=n.Uint8Array,qt=Ot?Ot.allocUnsafe:void 0,Ht=qn(vt.getPrototypeOf,vt),Yt=vt.create,Xt=xt.propertyIsEnumerable,Gt=_t.splice,Kt=Pt?Pt.isConcatSpreadable:void 0,Jt=Pt?Pt.iterator:void 0,_n=Pt?Pt.toStringTag:void 0,Cn=function(){try{var t=Qi(vt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Zn=n.clearTimeout!==$t.clearTimeout&&n.clearTimeout,Kn=i&&i.now!==$t.Date.now&&i.now,Jn=n.setTimeout!==$t.setTimeout&&n.setTimeout,Qn=pt.ceil,te=pt.floor,ne=vt.getOwnPropertySymbols,ee=Ot?Ot.isBuffer:void 0,re=n.isFinite,ie=_t.join,oe=qn(vt.keys,vt),ue=pt.max,ae=pt.min,ce=i.now,fe=n.parseInt,se=pt.random,le=_t.reverse,he=Qi(n,"DataView"),de=Qi(n,"Map"),pe=Qi(n,"Promise"),ve=Qi(n,"Set"),ye=Qi(n,"WeakMap"),be=Qi(vt,"create"),ge=ye&&new ye,_e={},me=Co(he),xe=Co(de),we=Co(pe),Me=Co(ve),Se=Co(ye),ke=Pt?Pt.prototype:void 0,Ae=ke?ke.valueOf:void 0,Ce=ke?ke.toString:void 0;function Ee(t){if(Wu(t)&&!Iu(t)&&!(t instanceof je)){if(t instanceof Oe)return t;if(St.call(t,"__wrapped__"))return Eo(t)}return new Oe(t)}var Te=function(){function t(){}return function(n){if(!Vu(n))return{};if(Yt)return Yt(n);t.prototype=n;var e=new t;return t.prototype=void 0,e}}();function Ne(){}function Oe(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=void 0}function je(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Ie(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Pe(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Re(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Le(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new Re;++n<e;)this.add(t[n])}function ze(t){var n=this.__data__=new Pe(t);this.size=n.size}function Fe(t,n){var e=Iu(t),r=!e&&ju(t),i=!e&&!r&&zu(t),o=!e&&!r&&!i&&Ju(t),u=e||r||i||o,a=u?Nn(t.length,bt):[],c=a.length;for(var f in t)!n&&!St.call(t,f)||u&&("length"==f||i&&("offset"==f||"parent"==f)||o&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||uo(f,c))||a.push(f);return a}function Be(t){var n=t.length;return n?t[Lr(0,n-1)]:void 0}function De(t,n){return So(bi(t),Ge(n,0,t.length))}function Ue(t){return So(bi(t))}function qe(t,n,e){(void 0!==e&&!Tu(t[n],e)||void 0===e&&!(n in t))&&$e(t,n,e)}function Ve(t,n,e){var r=t[n];St.call(t,n)&&Tu(r,e)&&(void 0!==e||n in t)||$e(t,n,e)}function We(t,n){for(var e=t.length;e--;)if(Tu(t[e][0],n))return e;return-1}function He(t,n,e,r){return tr(t,(function(t,i,o){n(r,t,e(t),o)})),r}function Ye(t,n){return t&&gi(n,ma(n),t)}function $e(t,n,e){"__proto__"==n&&Cn?Cn(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function Xe(t,n){for(var e=-1,i=n.length,o=r(i),u=null==t;++e<i;)o[e]=u?void 0:va(t,n[e]);return o}function Ge(t,n,e){return t==t&&(void 0!==e&&(t=t<=e?t:e),void 0!==n&&(t=t>=n?t:n)),t}function Ze(t,n,e,r,i,o){var u,a=1&n,f=2&n,h=4&n;if(e&&(u=i?e(t,r,i,o):e(t)),void 0!==u)return u;if(!Vu(t))return t;var w=Iu(t);if(w){if(u=function(t){var n=t.length,e=new t.constructor(n);n&&"string"==typeof t[0]&&St.call(t,"index")&&(e.index=t.index,e.input=t.input);return e}(t),!a)return bi(t,u)}else{var I=eo(t),P=I==d||I==p;if(zu(t))return li(t,a);if(I==b||I==c||P&&!i){if(u=f||P?{}:io(t),!a)return f?function(t,n){return gi(t,no(t),n)}(t,function(t,n){return t&&gi(n,xa(n),t)}(u,t)):function(t,n){return gi(t,to(t),n)}(t,Ye(u,t))}else{if(!Ut[I])return i?t:{};u=function(t,n,e){var r=t.constructor;switch(n){case M:return hi(t);case s:case l:return new r(+t);case S:return function(t,n){var e=n?hi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case k:case A:case C:case E:case T:case N:case"[object Uint8ClampedArray]":case O:case j:return di(t,e);case v:return new r;case y:case m:return new r(t);case g:return function(t){var n=new t.constructor(t.source,rt.exec(t));return n.lastIndex=t.lastIndex,n}(t);case _:return new r;case x:return i=t,Ae?vt(Ae.call(i)):{}}var i}(t,I,a)}}o||(o=new ze);var R=o.get(t);if(R)return R;o.set(t,u),Gu(t)?t.forEach((function(r){u.add(Ze(r,n,e,r,t,o))})):Hu(t)&&t.forEach((function(r,i){u.set(i,Ze(r,n,e,i,t,o))}));var L=w?void 0:(h?f?Yi:Hi:f?xa:ma)(t);return cn(L||t,(function(r,i){L&&(r=t[i=r]),Ve(u,i,Ze(r,n,e,i,t,o))})),u}function Ke(t,n,e){var r=e.length;if(null==t)return!r;for(t=vt(t);r--;){var i=e[r],o=n[i],u=t[i];if(void 0===u&&!(i in t)||!o(u))return!1}return!0}function Je(t,n,e){if("function"!=typeof t)throw new gt(o);return mo((function(){t.apply(void 0,e)}),n)}function Qe(t,n,e,r){var i=-1,o=hn,u=!0,a=t.length,c=[],f=n.length;if(!a)return c;e&&(n=pn(n,On(e))),r?(o=dn,u=!1):n.length>=200&&(o=In,u=!1,n=new Le(n));t:for(;++i<a;){var s=t[i],l=null==e?s:e(s);if(s=r||0!==s?s:0,u&&l==l){for(var h=f;h--;)if(n[h]===l)continue t;c.push(s)}else o(n,l,r)||c.push(s)}return c}Ee.templateSettings={escape:D,evaluate:U,interpolate:q,variable:"",imports:{_:Ee}},Ee.prototype=Ne.prototype,Ee.prototype.constructor=Ee,Oe.prototype=Te(Ne.prototype),Oe.prototype.constructor=Oe,je.prototype=Te(Ne.prototype),je.prototype.constructor=je,Ie.prototype.clear=function(){this.__data__=be?be(null):{},this.size=0},Ie.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},Ie.prototype.get=function(t){var n=this.__data__;if(be){var e=n[t];return"__lodash_hash_undefined__"===e?void 0:e}return St.call(n,t)?n[t]:void 0},Ie.prototype.has=function(t){var n=this.__data__;return be?void 0!==n[t]:St.call(n,t)},Ie.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=be&&void 0===n?"__lodash_hash_undefined__":n,this},Pe.prototype.clear=function(){this.__data__=[],this.size=0},Pe.prototype.delete=function(t){var n=this.__data__,e=We(n,t);return!(e<0)&&(e==n.length-1?n.pop():Gt.call(n,e,1),--this.size,!0)},Pe.prototype.get=function(t){var n=this.__data__,e=We(n,t);return e<0?void 0:n[e][1]},Pe.prototype.has=function(t){return We(this.__data__,t)>-1},Pe.prototype.set=function(t,n){var e=this.__data__,r=We(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},Re.prototype.clear=function(){this.size=0,this.__data__={hash:new Ie,map:new(de||Pe),string:new Ie}},Re.prototype.delete=function(t){var n=Ki(this,t).delete(t);return this.size-=n?1:0,n},Re.prototype.get=function(t){return Ki(this,t).get(t)},Re.prototype.has=function(t){return Ki(this,t).has(t)},Re.prototype.set=function(t,n){var e=Ki(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},Le.prototype.add=Le.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Le.prototype.has=function(t){return this.__data__.has(t)},ze.prototype.clear=function(){this.__data__=new Pe,this.size=0},ze.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},ze.prototype.get=function(t){return this.__data__.get(t)},ze.prototype.has=function(t){return this.__data__.has(t)},ze.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Pe){var r=e.__data__;if(!de||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new Re(r)}return e.set(t,n),this.size=e.size,this};var tr=xi(cr),nr=xi(fr,!0);function er(t,n){var e=!0;return tr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function rr(t,n,e){for(var r=-1,i=t.length;++r<i;){var o=t[r],u=n(o);if(null!=u&&(void 0===a?u==u&&!Ku(u):e(u,a)))var a=u,c=o}return c}function ir(t,n){var e=[];return tr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function or(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=oo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?or(a,n-1,e,r,i):vn(i,a):r||(i[i.length]=a)}return i}var ur=wi(),ar=wi(!0);function cr(t,n){return t&&ur(t,n,ma)}function fr(t,n){return t&&ar(t,n,ma)}function sr(t,n){return ln(n,(function(n){return Du(t[n])}))}function lr(t,n){for(var e=0,r=(n=ai(n,t)).length;null!=t&&e<r;)t=t[Ao(n[e++])];return e&&e==r?t:void 0}function hr(t,n,e){var r=n(t);return Iu(t)?r:vn(r,e(t))}function dr(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":_n&&_n in vt(t)?function(t){var n=St.call(t,_n),e=t[_n];try{t[_n]=void 0;var r=!0}catch(t){}var i=Ct.call(t);r&&(n?t[_n]=e:delete t[_n]);return i}(t):function(t){return Ct.call(t)}(t)}function pr(t,n){return t>n}function vr(t,n){return null!=t&&St.call(t,n)}function yr(t,n){return null!=t&&n in vt(t)}function br(t,n,e){for(var i=e?dn:hn,o=t[0].length,u=t.length,a=u,c=r(u),f=1/0,s=[];a--;){var l=t[a];a&&n&&(l=pn(l,On(n))),f=ae(l.length,f),c[a]=!e&&(n||o>=120&&l.length>=120)?new Le(a&&l):void 0}l=t[0];var h=-1,d=c[0];t:for(;++h<o&&s.length<f;){var p=l[h],v=n?n(p):p;if(p=e||0!==p?p:0,!(d?In(d,v):i(s,v,e))){for(a=u;--a;){var y=c[a];if(!(y?In(y,v):i(t[a],v,e)))continue t}d&&d.push(v),s.push(p)}}return s}function gr(t,n,e){var r=null==(t=yo(t,n=ai(n,t)))?t:t[Ao(Bo(n))];return null==r?void 0:un(r,t,e)}function _r(t){return Wu(t)&&dr(t)==c}function mr(t,n,e,r,i){return t===n||(null==t||null==n||!Wu(t)&&!Wu(n)?t!=t&&n!=n:function(t,n,e,r,i,o){var u=Iu(t),a=Iu(n),d=u?f:eo(t),p=a?f:eo(n),w=(d=d==c?b:d)==b,k=(p=p==c?b:p)==b,A=d==p;if(A&&zu(t)){if(!zu(n))return!1;u=!0,w=!1}if(A&&!w)return o||(o=new ze),u||Ju(t)?Vi(t,n,e,r,i,o):function(t,n,e,r,i,o,u){switch(e){case S:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case M:return!(t.byteLength!=n.byteLength||!o(new Lt(t),new Lt(n)));case s:case l:case y:return Tu(+t,+n);case h:return t.name==n.name&&t.message==n.message;case g:case m:return t==n+"";case v:var a=Un;case _:var c=1&r;if(a||(a=Wn),t.size!=n.size&&!c)return!1;var f=u.get(t);if(f)return f==n;r|=2,u.set(t,n);var d=Vi(a(t),a(n),r,i,o,u);return u.delete(t),d;case x:if(Ae)return Ae.call(t)==Ae.call(n)}return!1}(t,n,d,e,r,i,o);if(!(1&e)){var C=w&&St.call(t,"__wrapped__"),E=k&&St.call(n,"__wrapped__");if(C||E){var T=C?t.value():t,N=E?n.value():n;return o||(o=new ze),i(T,N,e,r,o)}}if(!A)return!1;return o||(o=new ze),function(t,n,e,r,i,o){var u=1&e,a=Hi(t),c=a.length,f=Hi(n).length;if(c!=f&&!u)return!1;var s=c;for(;s--;){var l=a[s];if(!(u?l in n:St.call(n,l)))return!1}var h=o.get(t),d=o.get(n);if(h&&d)return h==n&&d==t;var p=!0;o.set(t,n),o.set(n,t);var v=u;for(;++s<c;){l=a[s];var y=t[l],b=n[l];if(r)var g=u?r(b,y,l,n,t,o):r(y,b,l,t,n,o);if(!(void 0===g?y===b||i(y,b,e,r,o):g)){p=!1;break}v||(v="constructor"==l)}if(p&&!v){var _=t.constructor,m=n.constructor;_==m||!("constructor"in t)||!("constructor"in n)||"function"==typeof _&&_ instanceof _&&"function"==typeof m&&m instanceof m||(p=!1)}return o.delete(t),o.delete(n),p}(t,n,e,r,i,o)}(t,n,e,r,mr,i))}function xr(t,n,e,r){var i=e.length,o=i,u=!r;if(null==t)return!o;for(t=vt(t);i--;){var a=e[i];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var c=(a=e[i])[0],f=t[c],s=a[1];if(u&&a[2]){if(void 0===f&&!(c in t))return!1}else{var l=new ze;if(r)var h=r(f,s,c,t,n,l);if(!(void 0===h?mr(s,f,3,r,l):h))return!1}}return!0}function wr(t){return!(!Vu(t)||(n=t,At&&At in n))&&(Du(t)?Nt:ut).test(Co(t));var n}function Mr(t){return"function"==typeof t?t:null==t?Ya:"object"==typeof t?Iu(t)?Tr(t[0],t[1]):Er(t):nc(t)}function Sr(t){if(!lo(t))return oe(t);var n=[];for(var e in vt(t))St.call(t,e)&&"constructor"!=e&&n.push(e);return n}function kr(t){if(!Vu(t))return function(t){var n=[];if(null!=t)for(var e in vt(t))n.push(e);return n}(t);var n=lo(t),e=[];for(var r in t)("constructor"!=r||!n&&St.call(t,r))&&e.push(r);return e}function Ar(t,n){return t<n}function Cr(t,n){var e=-1,i=Ru(t)?r(t.length):[];return tr(t,(function(t,r,o){i[++e]=n(t,r,o)})),i}function Er(t){var n=Ji(t);return 1==n.length&&n[0][2]?po(n[0][0],n[0][1]):function(e){return e===t||xr(e,t,n)}}function Tr(t,n){return co(t)&&ho(n)?po(Ao(t),n):function(e){var r=va(e,t);return void 0===r&&r===n?ya(e,t):mr(n,r,3)}}function Nr(t,n,e,r,i){t!==n&&ur(n,(function(o,u){if(i||(i=new ze),Vu(o))!function(t,n,e,r,i,o,u){var a=go(t,e),c=go(n,e),f=u.get(c);if(f)return void qe(t,e,f);var s=o?o(a,c,e+"",t,n,u):void 0,l=void 0===s;if(l){var h=Iu(c),d=!h&&zu(c),p=!h&&!d&&Ju(c);s=c,h||d||p?Iu(a)?s=a:Lu(a)?s=bi(a):d?(l=!1,s=li(c,!0)):p?(l=!1,s=di(c,!0)):s=[]:$u(c)||ju(c)?(s=a,ju(a)?s=ua(a):Vu(a)&&!Du(a)||(s=io(c))):l=!1}l&&(u.set(c,s),i(s,c,r,o,u),u.delete(c));qe(t,e,s)}(t,n,u,e,Nr,r,i);else{var a=r?r(go(t,u),o,u+"",t,n,i):void 0;void 0===a&&(a=o),qe(t,u,a)}}),xa)}function Or(t,n){var e=t.length;if(e)return uo(n+=n<0?e:0,e)?t[n]:void 0}function jr(t,n,e){n=n.length?pn(n,(function(t){return Iu(t)?function(n){return lr(n,1===t.length?t[0]:t)}:t})):[Ya];var r=-1;return n=pn(n,On(Zi())),function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(Cr(t,(function(t,e,i){return{criteria:pn(n,(function(n){return n(t)})),index:++r,value:t}})),(function(t,n){return function(t,n,e){var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;for(;++r<u;){var c=pi(i[r],o[r]);if(c){if(r>=a)return c;var f=e[r];return c*("desc"==f?-1:1)}}return t.index-n.index}(t,n,e)}))}function Ir(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=lr(t,u);e(a,u)&&Ur(o,ai(u,t),a)}return o}function Pr(t,n,e,r){var i=r?Mn:wn,o=-1,u=n.length,a=t;for(t===n&&(n=bi(n)),e&&(a=pn(t,On(e)));++o<u;)for(var c=0,f=n[o],s=e?e(f):f;(c=i(a,s,c,r))>-1;)a!==t&&Gt.call(a,c,1),Gt.call(t,c,1);return t}function Rr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;uo(i)?Gt.call(t,i,1):Qr(t,i)}}return t}function Lr(t,n){return t+te(se()*(n-t+1))}function zr(t,n){var e="";if(!t||n<1||n>9007199254740991)return e;do{n%2&&(e+=t),(n=te(n/2))&&(t+=t)}while(n);return e}function Fr(t,n){return xo(vo(t,n,Ya),t+"")}function Br(t){return Be(Ta(t))}function Dr(t,n){var e=Ta(t);return So(e,Ge(n,0,e.length))}function Ur(t,n,e,r){if(!Vu(t))return t;for(var i=-1,o=(n=ai(n,t)).length,u=o-1,a=t;null!=a&&++i<o;){var c=Ao(n[i]),f=e;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(i!=u){var s=a[c];void 0===(f=r?r(s,c,a):void 0)&&(f=Vu(s)?s:uo(n[i+1])?[]:{})}Ve(a,c,f),a=a[c]}return t}var qr=ge?function(t,n){return ge.set(t,n),t}:Ya,Vr=Cn?function(t,n){return Cn(t,"toString",{configurable:!0,enumerable:!1,value:Va(n),writable:!0})}:Ya;function Wr(t){return So(Ta(t))}function Hr(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+n];return u}function Yr(t,n){var e;return tr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function $r(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!Ku(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return Xr(t,n,Ya,e)}function Xr(t,n,e,r){var i=0,o=null==t?0:t.length;if(0===o)return 0;for(var u=(n=e(n))!=n,a=null===n,c=Ku(n),f=void 0===n;i<o;){var s=te((i+o)/2),l=e(t[s]),h=void 0!==l,d=null===l,p=l==l,v=Ku(l);if(u)var y=r||p;else y=f?p&&(r||h):a?p&&h&&(r||!d):c?p&&h&&!d&&(r||!v):!d&&!v&&(r?l<=n:l<n);y?i=s+1:o=s}return ae(o,4294967294)}function Gr(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!Tu(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function Zr(t){return"number"==typeof t?t:Ku(t)?NaN:+t}function Kr(t){if("string"==typeof t)return t;if(Iu(t))return pn(t,Kr)+"";if(Ku(t))return Ce?Ce.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Jr(t,n,e){var r=-1,i=hn,o=t.length,u=!0,a=[],c=a;if(e)u=!1,i=dn;else if(o>=200){var f=n?null:zi(t);if(f)return Wn(f);u=!1,i=In,c=new Le}else c=n?[]:a;t:for(;++r<o;){var s=t[r],l=n?n(s):s;if(s=e||0!==s?s:0,u&&l==l){for(var h=c.length;h--;)if(c[h]===l)continue t;n&&c.push(l),a.push(s)}else i(c,l,e)||(c!==a&&c.push(l),a.push(s))}return a}function Qr(t,n){return null==(t=yo(t,n=ai(n,t)))||delete t[Ao(Bo(n))]}function ti(t,n,e,r){return Ur(t,n,e(lr(t,n)),r)}function ni(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?Hr(t,r?0:o,r?o+1:i):Hr(t,r?o+1:0,r?i:o)}function ei(t,n){var e=t;return e instanceof je&&(e=e.value()),yn(n,(function(t,n){return n.func.apply(n.thisArg,vn([t],n.args))}),e)}function ri(t,n,e){var i=t.length;if(i<2)return i?Jr(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=Qe(u[o]||a,t[c],n,e));return Jr(or(u,1),n,e)}function ii(t,n,e){for(var r=-1,i=t.length,o=n.length,u={};++r<i;){var a=r<o?n[r]:void 0;e(u,t[r],a)}return u}function oi(t){return Lu(t)?t:[]}function ui(t){return"function"==typeof t?t:Ya}function ai(t,n){return Iu(t)?t:co(t,n)?[t]:ko(aa(t))}var ci=Fr;function fi(t,n,e){var r=t.length;return e=void 0===e?r:e,!n&&e>=r?t:Hr(t,n,e)}var si=Zn||function(t){return $t.clearTimeout(t)};function li(t,n){if(n)return t.slice();var e=t.length,r=qt?qt(e):new t.constructor(e);return t.copy(r),r}function hi(t){var n=new t.constructor(t.byteLength);return new Lt(n).set(new Lt(t)),n}function di(t,n){var e=n?hi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function pi(t,n){if(t!==n){var e=void 0!==t,r=null===t,i=t==t,o=Ku(t),u=void 0!==n,a=null===n,c=n==n,f=Ku(n);if(!a&&!f&&!o&&t>n||o&&u&&c&&!a&&!f||r&&u&&c||!e&&c||!i)return 1;if(!r&&!o&&!f&&t<n||f&&e&&i&&!r&&!o||a&&e&&i||!u&&i||!c)return-1}return 0}function vi(t,n,e,i){for(var o=-1,u=t.length,a=e.length,c=-1,f=n.length,s=ue(u-a,0),l=r(f+s),h=!i;++c<f;)l[c]=n[c];for(;++o<a;)(h||o<u)&&(l[e[o]]=t[o]);for(;s--;)l[c++]=t[o++];return l}function yi(t,n,e,i){for(var o=-1,u=t.length,a=-1,c=e.length,f=-1,s=n.length,l=ue(u-c,0),h=r(l+s),d=!i;++o<l;)h[o]=t[o];for(var p=o;++f<s;)h[p+f]=n[f];for(;++a<c;)(d||o<u)&&(h[p+e[a]]=t[o++]);return h}function bi(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function gi(t,n,e,r){var i=!e;e||(e={});for(var o=-1,u=n.length;++o<u;){var a=n[o],c=r?r(e[a],t[a],a,e,t):void 0;void 0===c&&(c=t[a]),i?$e(e,a,c):Ve(e,a,c)}return e}function _i(t,n){return function(e,r){var i=Iu(e)?an:He,o=n?n():{};return i(e,t,Zi(r,2),o)}}function mi(t){return Fr((function(n,e){var r=-1,i=e.length,o=i>1?e[i-1]:void 0,u=i>2?e[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,u&&ao(e[0],e[1],u)&&(o=i<3?void 0:o,i=1),n=vt(n);++r<i;){var a=e[r];a&&t(n,a,r,o)}return n}))}function xi(t,n){return function(e,r){if(null==e)return e;if(!Ru(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=vt(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function wi(t){return function(n,e,r){for(var i=-1,o=vt(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function Mi(t){return function(n){var e=Dn(n=aa(n))?$n(n):void 0,r=e?e[0]:n.charAt(0),i=e?fi(e,1).join(""):n.slice(1);return r[t]()+i}}function Si(t){return function(n){return yn(Da(ja(n).replace(jt,"")),t,"")}}function ki(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Te(t.prototype),r=t.apply(e,n);return Vu(r)?r:e}}function Ai(t){return function(n,e,r){var i=vt(n);if(!Ru(n)){var o=Zi(e,3);n=ma(n),e=function(t){return o(i[t],t,i)}}var u=t(n,e,r);return u>-1?i[o?n[u]:u]:void 0}}function Ci(t){return Wi((function(n){var e=n.length,r=e,i=Oe.prototype.thru;for(t&&n.reverse();r--;){var u=n[r];if("function"!=typeof u)throw new gt(o);if(i&&!a&&"wrapper"==Xi(u))var a=new Oe([],!0)}for(r=a?r:e;++r<e;){var c=Xi(u=n[r]),f="wrapper"==c?$i(u):void 0;a=f&&fo(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?a[Xi(f[0])].apply(a,f[3]):1==u.length&&fo(u)?a[c]():a.thru(u)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&Iu(r))return a.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}}))}function Ei(t,n,e,i,o,u,a,c,f,s){var l=128&n,h=1&n,d=2&n,p=24&n,v=512&n,y=d?void 0:ki(t);return function b(){for(var g=arguments.length,_=r(g),m=g;m--;)_[m]=arguments[m];if(p)var x=Gi(b),w=Ln(_,x);if(i&&(_=vi(_,i,o,p)),u&&(_=yi(_,u,a,p)),g-=w,p&&g<s){var M=Vn(_,x);return Ri(t,n,Ei,b.placeholder,e,_,M,c,f,s-g)}var S=h?e:this,k=d?S[t]:t;return g=_.length,c?_=bo(_,c):v&&g>1&&_.reverse(),l&&f<g&&(_.length=f),this&&this!==$t&&this instanceof b&&(k=y||ki(k)),k.apply(S,_)}}function Ti(t,n){return function(e,r){return function(t,n,e,r){return cr(t,(function(t,i,o){n(r,e(t),i,o)})),r}(e,t,n(r),{})}}function Ni(t,n){return function(e,r){var i;if(void 0===e&&void 0===r)return n;if(void 0!==e&&(i=e),void 0!==r){if(void 0===i)return r;"string"==typeof e||"string"==typeof r?(e=Kr(e),r=Kr(r)):(e=Zr(e),r=Zr(r)),i=t(e,r)}return i}}function Oi(t){return Wi((function(n){return n=pn(n,On(Zi())),Fr((function(e){var r=this;return t(n,(function(t){return un(t,r,e)}))}))}))}function ji(t,n){var e=(n=void 0===n?" ":Kr(n)).length;if(e<2)return e?zr(n,t):n;var r=zr(n,Qn(t/Yn(n)));return Dn(n)?fi($n(r),0,t).join(""):r.slice(0,t)}function Ii(t){return function(n,e,i){return i&&"number"!=typeof i&&ao(n,e,i)&&(e=i=void 0),n=ea(n),void 0===e?(e=n,n=0):e=ea(e),function(t,n,e,i){for(var o=-1,u=ue(Qn((n-t)/(e||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=e;return a}(n,e,i=void 0===i?n<e?1:-1:ea(i),t)}}function Pi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=oa(n),e=oa(e)),t(n,e)}}function Ri(t,n,e,r,i,o,u,a,c,f){var s=8&n;n|=s?32:64,4&(n&=~(s?64:32))||(n&=-4);var l=[t,n,i,s?o:void 0,s?u:void 0,s?void 0:o,s?void 0:u,a,c,f],h=e.apply(void 0,l);return fo(t)&&_o(h,l),h.placeholder=r,wo(h,t,n)}function Li(t){var n=pt[t];return function(t,e){if(t=oa(t),(e=null==e?0:ae(ra(e),292))&&re(t)){var r=(aa(t)+"e").split("e");return+((r=(aa(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var zi=ve&&1/Wn(new ve([,-0]))[1]==1/0?function(t){return new ve(t)}:Ka;function Fi(t){return function(n){var e=eo(n);return e==v?Un(n):e==_?Hn(n):function(t,n){return pn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Bi(t,n,e,i,a,c,f,s){var l=2&n;if(!l&&"function"!=typeof t)throw new gt(o);var h=i?i.length:0;if(h||(n&=-97,i=a=void 0),f=void 0===f?f:ue(ra(f),0),s=void 0===s?s:ra(s),h-=a?a.length:0,64&n){var d=i,p=a;i=a=void 0}var v=l?void 0:$i(t),y=[t,n,e,i,a,d,p,c,f,s];if(v&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<131,a=128==r&&8==e||128==r&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!o&&!a)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var f=t[3];t[3]=f?vi(f,c,n[4]):c,t[4]=f?Vn(t[3],u):n[4]}(c=n[5])&&(f=t[5],t[5]=f?yi(f,c,n[6]):c,t[6]=f?Vn(t[5],u):n[6]);(c=n[7])&&(t[7]=c);128&r&&(t[8]=null==t[8]?n[8]:ae(t[8],n[8]));null==t[9]&&(t[9]=n[9]);t[0]=n[0],t[1]=i}(y,v),t=y[0],n=y[1],e=y[2],i=y[3],a=y[4],!(s=y[9]=void 0===y[9]?l?0:t.length:ue(y[9]-h,0))&&24&n&&(n&=-25),n&&1!=n)b=8==n||16==n?function(t,n,e){var i=ki(t);return function o(){for(var u=arguments.length,a=r(u),c=u,f=Gi(o);c--;)a[c]=arguments[c];var s=u<3&&a[0]!==f&&a[u-1]!==f?[]:Vn(a,f);if((u-=s.length)<e)return Ri(t,n,Ei,o.placeholder,void 0,a,s,void 0,void 0,e-u);var l=this&&this!==$t&&this instanceof o?i:t;return un(l,this,a)}}(t,n,s):32!=n&&33!=n||a.length?Ei.apply(void 0,y):function(t,n,e,i){var o=1&n,u=ki(t);return function n(){for(var a=-1,c=arguments.length,f=-1,s=i.length,l=r(s+c),h=this&&this!==$t&&this instanceof n?u:t;++f<s;)l[f]=i[f];for(;c--;)l[f++]=arguments[++a];return un(h,o?e:this,l)}}(t,n,e,i);else var b=function(t,n,e){var r=1&n,i=ki(t);return function n(){var o=this&&this!==$t&&this instanceof n?i:t;return o.apply(r?e:this,arguments)}}(t,n,e);return wo((v?qr:_o)(b,y),t,n)}function Di(t,n,e,r){return void 0===t||Tu(t,xt[e])&&!St.call(r,e)?n:t}function Ui(t,n,e,r,i,o){return Vu(t)&&Vu(n)&&(o.set(n,t),Nr(t,n,void 0,Ui,o),o.delete(n)),t}function qi(t){return $u(t)?void 0:t}function Vi(t,n,e,r,i,o){var u=1&e,a=t.length,c=n.length;if(a!=c&&!(u&&c>a))return!1;var f=o.get(t),s=o.get(n);if(f&&s)return f==n&&s==t;var l=-1,h=!0,d=2&e?new Le:void 0;for(o.set(t,n),o.set(n,t);++l<a;){var p=t[l],v=n[l];if(r)var y=u?r(v,p,l,n,t,o):r(p,v,l,t,n,o);if(void 0!==y){if(y)continue;h=!1;break}if(d){if(!gn(n,(function(t,n){if(!In(d,n)&&(p===t||i(p,t,e,r,o)))return d.push(n)}))){h=!1;break}}else if(p!==v&&!i(p,v,e,r,o)){h=!1;break}}return o.delete(t),o.delete(n),h}function Wi(t){return xo(vo(t,void 0,Po),t+"")}function Hi(t){return hr(t,ma,to)}function Yi(t){return hr(t,xa,no)}var $i=ge?function(t){return ge.get(t)}:Ka;function Xi(t){for(var n=t.name+"",e=_e[n],r=St.call(_e,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function Gi(t){return(St.call(Ee,"placeholder")?Ee:t).placeholder}function Zi(){var t=Ee.iteratee||$a;return t=t===$a?Mr:t,arguments.length?t(arguments[0],arguments[1]):t}function Ki(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function Ji(t){for(var n=ma(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,ho(i)]}return n}function Qi(t,n){var e=function(t,n){return null==t?void 0:t[n]}(t,n);return wr(e)?e:void 0}var to=ne?function(t){return null==t?[]:(t=vt(t),ln(ne(t),(function(n){return Xt.call(t,n)})))}:ic,no=ne?function(t){for(var n=[];t;)vn(n,to(t)),t=Ht(t);return n}:ic,eo=dr;function ro(t,n,e){for(var r=-1,i=(n=ai(n,t)).length,o=!1;++r<i;){var u=Ao(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&qu(i)&&uo(u,i)&&(Iu(t)||ju(t))}function io(t){return"function"!=typeof t.constructor||lo(t)?{}:Te(Ht(t))}function oo(t){return Iu(t)||ju(t)||!!(Kt&&t&&t[Kt])}function uo(t,n){var e=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==e||"symbol"!=e&&ct.test(t))&&t>-1&&t%1==0&&t<n}function ao(t,n,e){if(!Vu(e))return!1;var r=typeof n;return!!("number"==r?Ru(e)&&uo(n,e.length):"string"==r&&n in e)&&Tu(e[n],t)}function co(t,n){if(Iu(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!Ku(t))||(W.test(t)||!V.test(t)||null!=n&&t in vt(n))}function fo(t){var n=Xi(t),e=Ee[n];if("function"!=typeof e||!(n in je.prototype))return!1;if(t===e)return!0;var r=$i(e);return!!r&&t===r[0]}(he&&eo(new he(new ArrayBuffer(1)))!=S||de&&eo(new de)!=v||pe&&"[object Promise]"!=eo(pe.resolve())||ve&&eo(new ve)!=_||ye&&eo(new ye)!=w)&&(eo=function(t){var n=dr(t),e=n==b?t.constructor:void 0,r=e?Co(e):"";if(r)switch(r){case me:return S;case xe:return v;case we:return"[object Promise]";case Me:return _;case Se:return w}return n});var so=wt?Du:oc;function lo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||xt)}function ho(t){return t==t&&!Vu(t)}function po(t,n){return function(e){return null!=e&&(e[t]===n&&(void 0!==n||t in vt(e)))}}function vo(t,n,e){return n=ue(void 0===n?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ue(i.length-n,0),a=r(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(a),un(t,this,c)}}function yo(t,n){return n.length<2?t:lr(t,Hr(n,0,-1))}function bo(t,n){for(var e=t.length,r=ae(n.length,e),i=bi(t);r--;){var o=n[r];t[r]=uo(o,e)?i[o]:void 0}return t}function go(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var _o=Mo(qr),mo=Jn||function(t,n){return $t.setTimeout(t,n)},xo=Mo(Vr);function wo(t,n,e){var r=n+"";return xo(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(K,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return cn(a,(function(e){var r="_."+e[0];n&e[1]&&!hn(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(J);return n?n[1].split(Q):[]}(r),e)))}function Mo(t){var n=0,e=0;return function(){var r=ce(),i=16-(r-e);if(e=r,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}function So(t,n){var e=-1,r=t.length,i=r-1;for(n=void 0===n?r:n;++e<n;){var o=Lr(e,i),u=t[o];t[o]=t[e],t[e]=u}return t.length=n,t}var ko=function(t){var n=Mu(t,(function(t){return 500===e.size&&e.clear(),t})),e=n.cache;return n}((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(H,(function(t,e,r,i){n.push(r?i.replace(nt,"$1"):e||t)})),n}));function Ao(t){if("string"==typeof t||Ku(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Co(t){if(null!=t){try{return Mt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Eo(t){if(t instanceof je)return t.clone();var n=new Oe(t.__wrapped__,t.__chain__);return n.__actions__=bi(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var To=Fr((function(t,n){return Lu(t)?Qe(t,or(n,1,Lu,!0)):[]})),No=Fr((function(t,n){var e=Bo(n);return Lu(e)&&(e=void 0),Lu(t)?Qe(t,or(n,1,Lu,!0),Zi(e,2)):[]})),Oo=Fr((function(t,n){var e=Bo(n);return Lu(e)&&(e=void 0),Lu(t)?Qe(t,or(n,1,Lu,!0),void 0,e):[]}));function jo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ra(e);return i<0&&(i=ue(r+i,0)),xn(t,Zi(n,3),i)}function Io(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return void 0!==e&&(i=ra(e),i=e<0?ue(r+i,0):ae(i,r-1)),xn(t,Zi(n,3),i,!0)}function Po(t){return(null==t?0:t.length)?or(t,1):[]}function Ro(t){return t&&t.length?t[0]:void 0}var Lo=Fr((function(t){var n=pn(t,oi);return n.length&&n[0]===t[0]?br(n):[]})),zo=Fr((function(t){var n=Bo(t),e=pn(t,oi);return n===Bo(e)?n=void 0:e.pop(),e.length&&e[0]===t[0]?br(e,Zi(n,2)):[]})),Fo=Fr((function(t){var n=Bo(t),e=pn(t,oi);return(n="function"==typeof n?n:void 0)&&e.pop(),e.length&&e[0]===t[0]?br(e,void 0,n):[]}));function Bo(t){var n=null==t?0:t.length;return n?t[n-1]:void 0}var Do=Fr(Uo);function Uo(t,n){return t&&t.length&&n&&n.length?Pr(t,n):t}var qo=Wi((function(t,n){var e=null==t?0:t.length,r=Xe(t,n);return Rr(t,pn(n,(function(t){return uo(t,e)?+t:t})).sort(pi)),r}));function Vo(t){return null==t?t:le.call(t)}var Wo=Fr((function(t){return Jr(or(t,1,Lu,!0))})),Ho=Fr((function(t){var n=Bo(t);return Lu(n)&&(n=void 0),Jr(or(t,1,Lu,!0),Zi(n,2))})),Yo=Fr((function(t){var n=Bo(t);return n="function"==typeof n?n:void 0,Jr(or(t,1,Lu,!0),void 0,n)}));function $o(t){if(!t||!t.length)return[];var n=0;return t=ln(t,(function(t){if(Lu(t))return n=ue(t.length,n),!0})),Nn(n,(function(n){return pn(t,An(n))}))}function Xo(t,n){if(!t||!t.length)return[];var e=$o(t);return null==n?e:pn(e,(function(t){return un(n,void 0,t)}))}var Go=Fr((function(t,n){return Lu(t)?Qe(t,n):[]})),Zo=Fr((function(t){return ri(ln(t,Lu))})),Ko=Fr((function(t){var n=Bo(t);return Lu(n)&&(n=void 0),ri(ln(t,Lu),Zi(n,2))})),Jo=Fr((function(t){var n=Bo(t);return n="function"==typeof n?n:void 0,ri(ln(t,Lu),void 0,n)})),Qo=Fr($o);var tu=Fr((function(t){var n=t.length,e=n>1?t[n-1]:void 0;return e="function"==typeof e?(t.pop(),e):void 0,Xo(t,e)}));function nu(t){var n=Ee(t);return n.__chain__=!0,n}function eu(t,n){return n(t)}var ru=Wi((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,i=function(n){return Xe(n,t)};return!(n>1||this.__actions__.length)&&r instanceof je&&uo(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:eu,args:[i],thisArg:void 0}),new Oe(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var iu=_i((function(t,n,e){St.call(t,e)?++t[e]:$e(t,e,1)}));var ou=Ai(jo),uu=Ai(Io);function au(t,n){return(Iu(t)?cn:tr)(t,Zi(n,3))}function cu(t,n){return(Iu(t)?fn:nr)(t,Zi(n,3))}var fu=_i((function(t,n,e){St.call(t,e)?t[e].push(n):$e(t,e,[n])}));var su=Fr((function(t,n,e){var i=-1,o="function"==typeof n,u=Ru(t)?r(t.length):[];return tr(t,(function(t){u[++i]=o?un(n,t,e):gr(t,n,e)})),u})),lu=_i((function(t,n,e){$e(t,e,n)}));function hu(t,n){return(Iu(t)?pn:Cr)(t,Zi(n,3))}var du=_i((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]}));var pu=Fr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&ao(t,n[0],n[1])?n=[]:e>2&&ao(n[0],n[1],n[2])&&(n=[n[0]]),jr(t,or(n,1),[])})),vu=Kn||function(){return $t.Date.now()};function yu(t,n,e){return n=e?void 0:n,Bi(t,128,void 0,void 0,void 0,void 0,n=t&&null==n?t.length:n)}function bu(t,n){var e;if("function"!=typeof n)throw new gt(o);return t=ra(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=void 0),e}}var gu=Fr((function(t,n,e){var r=1;if(e.length){var i=Vn(e,Gi(gu));r|=32}return Bi(t,r,n,e,i)})),_u=Fr((function(t,n,e){var r=3;if(e.length){var i=Vn(e,Gi(_u));r|=32}return Bi(n,r,t,e,i)}));function mu(t,n,e){var r,i,u,a,c,f,s=0,l=!1,h=!1,d=!0;if("function"!=typeof t)throw new gt(o);function p(n){var e=r,o=i;return r=i=void 0,s=n,a=t.apply(o,e)}function v(t){return s=t,c=mo(b,n),l?p(t):a}function y(t){var e=t-f;return void 0===f||e>=n||e<0||h&&t-s>=u}function b(){var t=vu();if(y(t))return g(t);c=mo(b,function(t){var e=n-(t-f);return h?ae(e,u-(t-s)):e}(t))}function g(t){return c=void 0,d&&r?p(t):(r=i=void 0,a)}function _(){var t=vu(),e=y(t);if(r=arguments,i=this,f=t,e){if(void 0===c)return v(f);if(h)return si(c),c=mo(b,n),p(f)}return void 0===c&&(c=mo(b,n)),a}return n=oa(n)||0,Vu(e)&&(l=!!e.leading,u=(h="maxWait"in e)?ue(oa(e.maxWait)||0,n):u,d="trailing"in e?!!e.trailing:d),_.cancel=function(){void 0!==c&&si(c),s=0,r=f=i=c=void 0},_.flush=function(){return void 0===c?a:g(vu())},_}var xu=Fr((function(t,n){return Je(t,1,n)})),wu=Fr((function(t,n,e){return Je(t,oa(n)||0,e)}));function Mu(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new gt(o);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(Mu.Cache||Re),e}function Su(t){if("function"!=typeof t)throw new gt(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Mu.Cache=Re;var ku=ci((function(t,n){var e=(n=1==n.length&&Iu(n[0])?pn(n[0],On(Zi())):pn(or(n,1),On(Zi()))).length;return Fr((function(r){for(var i=-1,o=ae(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return un(t,this,r)}))})),Au=Fr((function(t,n){return Bi(t,32,void 0,n,Vn(n,Gi(Au)))})),Cu=Fr((function(t,n){return Bi(t,64,void 0,n,Vn(n,Gi(Cu)))})),Eu=Wi((function(t,n){return Bi(t,256,void 0,void 0,void 0,n)}));function Tu(t,n){return t===n||t!=t&&n!=n}var Nu=Pi(pr),Ou=Pi((function(t,n){return t>=n})),ju=_r(function(){return arguments}())?_r:function(t){return Wu(t)&&St.call(t,"callee")&&!Xt.call(t,"callee")},Iu=r.isArray,Pu=Qt?On(Qt):function(t){return Wu(t)&&dr(t)==M};function Ru(t){return null!=t&&qu(t.length)&&!Du(t)}function Lu(t){return Wu(t)&&Ru(t)}var zu=ee||oc,Fu=tn?On(tn):function(t){return Wu(t)&&dr(t)==l};function Bu(t){if(!Wu(t))return!1;var n=dr(t);return n==h||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!$u(t)}function Du(t){if(!Vu(t))return!1;var n=dr(t);return n==d||n==p||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Uu(t){return"number"==typeof t&&t==ra(t)}function qu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Vu(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function Wu(t){return null!=t&&"object"==typeof t}var Hu=nn?On(nn):function(t){return Wu(t)&&eo(t)==v};function Yu(t){return"number"==typeof t||Wu(t)&&dr(t)==y}function $u(t){if(!Wu(t)||dr(t)!=b)return!1;var n=Ht(t);if(null===n)return!0;var e=St.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Mt.call(e)==Et}var Xu=en?On(en):function(t){return Wu(t)&&dr(t)==g};var Gu=rn?On(rn):function(t){return Wu(t)&&eo(t)==_};function Zu(t){return"string"==typeof t||!Iu(t)&&Wu(t)&&dr(t)==m}function Ku(t){return"symbol"==typeof t||Wu(t)&&dr(t)==x}var Ju=on?On(on):function(t){return Wu(t)&&qu(t.length)&&!!Dt[dr(t)]};var Qu=Pi(Ar),ta=Pi((function(t,n){return t<=n}));function na(t){if(!t)return[];if(Ru(t))return Zu(t)?$n(t):bi(t);if(Jt&&t[Jt])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[Jt]());var n=eo(t);return(n==v?Un:n==_?Wn:Ta)(t)}function ea(t){return t?(t=oa(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ra(t){var n=ea(t),e=n%1;return n==n?e?n-e:n:0}function ia(t){return t?Ge(ra(t),0,4294967295):0}function oa(t){if("number"==typeof t)return t;if(Ku(t))return NaN;if(Vu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=Vu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(X,"");var e=ot.test(t);return e||at.test(t)?Wt(t.slice(2),e?2:8):it.test(t)?NaN:+t}function ua(t){return gi(t,xa(t))}function aa(t){return null==t?"":Kr(t)}var ca=mi((function(t,n){if(lo(n)||Ru(n))gi(n,ma(n),t);else for(var e in n)St.call(n,e)&&Ve(t,e,n[e])})),fa=mi((function(t,n){gi(n,xa(n),t)})),sa=mi((function(t,n,e,r){gi(n,xa(n),t,r)})),la=mi((function(t,n,e,r){gi(n,ma(n),t,r)})),ha=Wi(Xe);var da=Fr((function(t,n){t=vt(t);var e=-1,r=n.length,i=r>2?n[2]:void 0;for(i&&ao(n[0],n[1],i)&&(r=1);++e<r;)for(var o=n[e],u=xa(o),a=-1,c=u.length;++a<c;){var f=u[a],s=t[f];(void 0===s||Tu(s,xt[f])&&!St.call(t,f))&&(t[f]=o[f])}return t})),pa=Fr((function(t){return t.push(void 0,Ui),un(Ma,void 0,t)}));function va(t,n,e){var r=null==t?void 0:lr(t,n);return void 0===r?e:r}function ya(t,n){return null!=t&&ro(t,n,yr)}var ba=Ti((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Ct.call(n)),t[n]=e}),Va(Ya)),ga=Ti((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Ct.call(n)),St.call(t,n)?t[n].push(e):t[n]=[e]}),Zi),_a=Fr(gr);function ma(t){return Ru(t)?Fe(t):Sr(t)}function xa(t){return Ru(t)?Fe(t,!0):kr(t)}var wa=mi((function(t,n,e){Nr(t,n,e)})),Ma=mi((function(t,n,e,r){Nr(t,n,e,r)})),Sa=Wi((function(t,n){var e={};if(null==t)return e;var r=!1;n=pn(n,(function(n){return n=ai(n,t),r||(r=n.length>1),n})),gi(t,Yi(t),e),r&&(e=Ze(e,7,qi));for(var i=n.length;i--;)Qr(e,n[i]);return e}));var ka=Wi((function(t,n){return null==t?{}:function(t,n){return Ir(t,n,(function(n,e){return ya(t,e)}))}(t,n)}));function Aa(t,n){if(null==t)return{};var e=pn(Yi(t),(function(t){return[t]}));return n=Zi(n),Ir(t,e,(function(t,e){return n(t,e[0])}))}var Ca=Fi(ma),Ea=Fi(xa);function Ta(t){return null==t?[]:jn(t,ma(t))}var Na=Si((function(t,n,e){return n=n.toLowerCase(),t+(e?Oa(n):n)}));function Oa(t){return Ba(aa(t).toLowerCase())}function ja(t){return(t=aa(t))&&t.replace(ft,zn).replace(It,"")}var Ia=Si((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Pa=Si((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Ra=Mi("toLowerCase");var La=Si((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()}));var za=Si((function(t,n,e){return t+(e?" ":"")+Ba(n)}));var Fa=Si((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Ba=Mi("toUpperCase");function Da(t,n,e){return t=aa(t),void 0===(n=e?void 0:n)?function(t){return zt.test(t)}(t)?function(t){return t.match(Rt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(n)||[]}var Ua=Fr((function(t,n){try{return un(t,void 0,n)}catch(t){return Bu(t)?t:new ht(t)}})),qa=Wi((function(t,n){return cn(n,(function(n){n=Ao(n),$e(t,n,gu(t[n],t))})),t}));function Va(t){return function(){return t}}var Wa=Ci(),Ha=Ci(!0);function Ya(t){return t}function $a(t){return Mr("function"==typeof t?t:Ze(t,1))}var Xa=Fr((function(t,n){return function(e){return gr(e,t,n)}})),Ga=Fr((function(t,n){return function(e){return gr(t,e,n)}}));function Za(t,n,e){var r=ma(n),i=sr(n,r);null!=e||Vu(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=sr(n,ma(n)));var o=!(Vu(e)&&"chain"in e&&!e.chain),u=Du(t);return cn(i,(function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__),i=e.__actions__=bi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,vn([this.value()],arguments))})})),t}function Ka(){}var Ja=Oi(pn),Qa=Oi(sn),tc=Oi(gn);function nc(t){return co(t)?An(Ao(t)):function(t){return function(n){return lr(n,t)}}(t)}var ec=Ii(),rc=Ii(!0);function ic(){return[]}function oc(){return!1}var uc=Ni((function(t,n){return t+n}),0),ac=Li("ceil"),cc=Ni((function(t,n){return t/n}),1),fc=Li("floor");var sc,lc=Ni((function(t,n){return t*n}),1),hc=Li("round"),dc=Ni((function(t,n){return t-n}),0);return Ee.after=function(t,n){if("function"!=typeof n)throw new gt(o);return t=ra(t),function(){if(--t<1)return n.apply(this,arguments)}},Ee.ary=yu,Ee.assign=ca,Ee.assignIn=fa,Ee.assignInWith=sa,Ee.assignWith=la,Ee.at=ha,Ee.before=bu,Ee.bind=gu,Ee.bindAll=qa,Ee.bindKey=_u,Ee.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Iu(t)?t:[t]},Ee.chain=nu,Ee.chunk=function(t,n,e){n=(e?ao(t,n,e):void 0===n)?1:ue(ra(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var o=0,u=0,a=r(Qn(i/n));o<i;)a[u++]=Hr(t,o,o+=n);return a},Ee.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},Ee.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return vn(Iu(e)?bi(e):[e],or(n,1))},Ee.cond=function(t){var n=null==t?0:t.length,e=Zi();return t=n?pn(t,(function(t){if("function"!=typeof t[1])throw new gt(o);return[e(t[0]),t[1]]})):[],Fr((function(e){for(var r=-1;++r<n;){var i=t[r];if(un(i[0],this,e))return un(i[1],this,e)}}))},Ee.conforms=function(t){return function(t){var n=ma(t);return function(e){return Ke(e,t,n)}}(Ze(t,1))},Ee.constant=Va,Ee.countBy=iu,Ee.create=function(t,n){var e=Te(t);return null==n?e:Ye(e,n)},Ee.curry=function t(n,e,r){var i=Bi(n,8,void 0,void 0,void 0,void 0,void 0,e=r?void 0:e);return i.placeholder=t.placeholder,i},Ee.curryRight=function t(n,e,r){var i=Bi(n,16,void 0,void 0,void 0,void 0,void 0,e=r?void 0:e);return i.placeholder=t.placeholder,i},Ee.debounce=mu,Ee.defaults=da,Ee.defaultsDeep=pa,Ee.defer=xu,Ee.delay=wu,Ee.difference=To,Ee.differenceBy=No,Ee.differenceWith=Oo,Ee.drop=function(t,n,e){var r=null==t?0:t.length;return r?Hr(t,(n=e||void 0===n?1:ra(n))<0?0:n,r):[]},Ee.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?Hr(t,0,(n=r-(n=e||void 0===n?1:ra(n)))<0?0:n):[]},Ee.dropRightWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3),!0,!0):[]},Ee.dropWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3),!0):[]},Ee.fill=function(t,n,e,r){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&ao(t,n,e)&&(e=0,r=i),function(t,n,e,r){var i=t.length;for((e=ra(e))<0&&(e=-e>i?0:i+e),(r=void 0===r||r>i?i:ra(r))<0&&(r+=i),r=e>r?0:ia(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},Ee.filter=function(t,n){return(Iu(t)?ln:ir)(t,Zi(n,3))},Ee.flatMap=function(t,n){return or(hu(t,n),1)},Ee.flatMapDeep=function(t,n){return or(hu(t,n),1/0)},Ee.flatMapDepth=function(t,n,e){return e=void 0===e?1:ra(e),or(hu(t,n),e)},Ee.flatten=Po,Ee.flattenDeep=function(t){return(null==t?0:t.length)?or(t,1/0):[]},Ee.flattenDepth=function(t,n){return(null==t?0:t.length)?or(t,n=void 0===n?1:ra(n)):[]},Ee.flip=function(t){return Bi(t,512)},Ee.flow=Wa,Ee.flowRight=Ha,Ee.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},Ee.functions=function(t){return null==t?[]:sr(t,ma(t))},Ee.functionsIn=function(t){return null==t?[]:sr(t,xa(t))},Ee.groupBy=fu,Ee.initial=function(t){return(null==t?0:t.length)?Hr(t,0,-1):[]},Ee.intersection=Lo,Ee.intersectionBy=zo,Ee.intersectionWith=Fo,Ee.invert=ba,Ee.invertBy=ga,Ee.invokeMap=su,Ee.iteratee=$a,Ee.keyBy=lu,Ee.keys=ma,Ee.keysIn=xa,Ee.map=hu,Ee.mapKeys=function(t,n){var e={};return n=Zi(n,3),cr(t,(function(t,r,i){$e(e,n(t,r,i),t)})),e},Ee.mapValues=function(t,n){var e={};return n=Zi(n,3),cr(t,(function(t,r,i){$e(e,r,n(t,r,i))})),e},Ee.matches=function(t){return Er(Ze(t,1))},Ee.matchesProperty=function(t,n){return Tr(t,Ze(n,1))},Ee.memoize=Mu,Ee.merge=wa,Ee.mergeWith=Ma,Ee.method=Xa,Ee.methodOf=Ga,Ee.mixin=Za,Ee.negate=Su,Ee.nthArg=function(t){return t=ra(t),Fr((function(n){return Or(n,t)}))},Ee.omit=Sa,Ee.omitBy=function(t,n){return Aa(t,Su(Zi(n)))},Ee.once=function(t){return bu(2,t)},Ee.orderBy=function(t,n,e,r){return null==t?[]:(Iu(n)||(n=null==n?[]:[n]),Iu(e=r?void 0:e)||(e=null==e?[]:[e]),jr(t,n,e))},Ee.over=Ja,Ee.overArgs=ku,Ee.overEvery=Qa,Ee.overSome=tc,Ee.partial=Au,Ee.partialRight=Cu,Ee.partition=du,Ee.pick=ka,Ee.pickBy=Aa,Ee.property=nc,Ee.propertyOf=function(t){return function(n){return null==t?void 0:lr(t,n)}},Ee.pull=Do,Ee.pullAll=Uo,Ee.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Pr(t,n,Zi(e,2)):t},Ee.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Pr(t,n,void 0,e):t},Ee.pullAt=qo,Ee.range=ec,Ee.rangeRight=rc,Ee.rearg=Eu,Ee.reject=function(t,n){return(Iu(t)?ln:ir)(t,Su(Zi(n,3)))},Ee.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=Zi(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return Rr(t,i),e},Ee.rest=function(t,n){if("function"!=typeof t)throw new gt(o);return Fr(t,n=void 0===n?n:ra(n))},Ee.reverse=Vo,Ee.sampleSize=function(t,n,e){return n=(e?ao(t,n,e):void 0===n)?1:ra(n),(Iu(t)?De:Dr)(t,n)},Ee.set=function(t,n,e){return null==t?t:Ur(t,n,e)},Ee.setWith=function(t,n,e,r){return r="function"==typeof r?r:void 0,null==t?t:Ur(t,n,e,r)},Ee.shuffle=function(t){return(Iu(t)?Ue:Wr)(t)},Ee.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&ao(t,n,e)?(n=0,e=r):(n=null==n?0:ra(n),e=void 0===e?r:ra(e)),Hr(t,n,e)):[]},Ee.sortBy=pu,Ee.sortedUniq=function(t){return t&&t.length?Gr(t):[]},Ee.sortedUniqBy=function(t,n){return t&&t.length?Gr(t,Zi(n,2)):[]},Ee.split=function(t,n,e){return e&&"number"!=typeof e&&ao(t,n,e)&&(n=e=void 0),(e=void 0===e?4294967295:e>>>0)?(t=aa(t))&&("string"==typeof n||null!=n&&!Xu(n))&&!(n=Kr(n))&&Dn(t)?fi($n(t),0,e):t.split(n,e):[]},Ee.spread=function(t,n){if("function"!=typeof t)throw new gt(o);return n=null==n?0:ue(ra(n),0),Fr((function(e){var r=e[n],i=fi(e,0,n);return r&&vn(i,r),un(t,this,i)}))},Ee.tail=function(t){var n=null==t?0:t.length;return n?Hr(t,1,n):[]},Ee.take=function(t,n,e){return t&&t.length?Hr(t,0,(n=e||void 0===n?1:ra(n))<0?0:n):[]},Ee.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?Hr(t,(n=r-(n=e||void 0===n?1:ra(n)))<0?0:n,r):[]},Ee.takeRightWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3),!1,!0):[]},Ee.takeWhile=function(t,n){return t&&t.length?ni(t,Zi(n,3)):[]},Ee.tap=function(t,n){return n(t),t},Ee.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new gt(o);return Vu(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),mu(t,n,{leading:r,maxWait:n,trailing:i})},Ee.thru=eu,Ee.toArray=na,Ee.toPairs=Ca,Ee.toPairsIn=Ea,Ee.toPath=function(t){return Iu(t)?pn(t,Ao):Ku(t)?[t]:bi(ko(aa(t)))},Ee.toPlainObject=ua,Ee.transform=function(t,n,e){var r=Iu(t),i=r||zu(t)||Ju(t);if(n=Zi(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:Vu(t)&&Du(o)?Te(Ht(t)):{}}return(i?cn:cr)(t,(function(t,r,i){return n(e,t,r,i)})),e},Ee.unary=function(t){return yu(t,1)},Ee.union=Wo,Ee.unionBy=Ho,Ee.unionWith=Yo,Ee.uniq=function(t){return t&&t.length?Jr(t):[]},Ee.uniqBy=function(t,n){return t&&t.length?Jr(t,Zi(n,2)):[]},Ee.uniqWith=function(t,n){return n="function"==typeof n?n:void 0,t&&t.length?Jr(t,void 0,n):[]},Ee.unset=function(t,n){return null==t||Qr(t,n)},Ee.unzip=$o,Ee.unzipWith=Xo,Ee.update=function(t,n,e){return null==t?t:ti(t,n,ui(e))},Ee.updateWith=function(t,n,e,r){return r="function"==typeof r?r:void 0,null==t?t:ti(t,n,ui(e),r)},Ee.values=Ta,Ee.valuesIn=function(t){return null==t?[]:jn(t,xa(t))},Ee.without=Go,Ee.words=Da,Ee.wrap=function(t,n){return Au(ui(n),t)},Ee.xor=Zo,Ee.xorBy=Ko,Ee.xorWith=Jo,Ee.zip=Qo,Ee.zipObject=function(t,n){return ii(t||[],n||[],Ve)},Ee.zipObjectDeep=function(t,n){return ii(t||[],n||[],Ur)},Ee.zipWith=tu,Ee.entries=Ca,Ee.entriesIn=Ea,Ee.extend=fa,Ee.extendWith=sa,Za(Ee,Ee),Ee.add=uc,Ee.attempt=Ua,Ee.camelCase=Na,Ee.capitalize=Oa,Ee.ceil=ac,Ee.clamp=function(t,n,e){return void 0===e&&(e=n,n=void 0),void 0!==e&&(e=(e=oa(e))==e?e:0),void 0!==n&&(n=(n=oa(n))==n?n:0),Ge(oa(t),n,e)},Ee.clone=function(t){return Ze(t,4)},Ee.cloneDeep=function(t){return Ze(t,5)},Ee.cloneDeepWith=function(t,n){return Ze(t,5,n="function"==typeof n?n:void 0)},Ee.cloneWith=function(t,n){return Ze(t,4,n="function"==typeof n?n:void 0)},Ee.conformsTo=function(t,n){return null==n||Ke(t,n,ma(n))},Ee.deburr=ja,Ee.defaultTo=function(t,n){return null==t||t!=t?n:t},Ee.divide=cc,Ee.endsWith=function(t,n,e){t=aa(t),n=Kr(n);var r=t.length,i=e=void 0===e?r:Ge(ra(e),0,r);return(e-=n.length)>=0&&t.slice(e,i)==n},Ee.eq=Tu,Ee.escape=function(t){return(t=aa(t))&&B.test(t)?t.replace(z,Fn):t},Ee.escapeRegExp=function(t){return(t=aa(t))&&$.test(t)?t.replace(Y,"\\$&"):t},Ee.every=function(t,n,e){var r=Iu(t)?sn:er;return e&&ao(t,n,e)&&(n=void 0),r(t,Zi(n,3))},Ee.find=ou,Ee.findIndex=jo,Ee.findKey=function(t,n){return mn(t,Zi(n,3),cr)},Ee.findLast=uu,Ee.findLastIndex=Io,Ee.findLastKey=function(t,n){return mn(t,Zi(n,3),fr)},Ee.floor=fc,Ee.forEach=au,Ee.forEachRight=cu,Ee.forIn=function(t,n){return null==t?t:ur(t,Zi(n,3),xa)},Ee.forInRight=function(t,n){return null==t?t:ar(t,Zi(n,3),xa)},Ee.forOwn=function(t,n){return t&&cr(t,Zi(n,3))},Ee.forOwnRight=function(t,n){return t&&fr(t,Zi(n,3))},Ee.get=va,Ee.gt=Nu,Ee.gte=Ou,Ee.has=function(t,n){return null!=t&&ro(t,n,vr)},Ee.hasIn=ya,Ee.head=Ro,Ee.identity=Ya,Ee.includes=function(t,n,e,r){t=Ru(t)?t:Ta(t),e=e&&!r?ra(e):0;var i=t.length;return e<0&&(e=ue(i+e,0)),Zu(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&wn(t,n,e)>-1},Ee.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ra(e);return i<0&&(i=ue(r+i,0)),wn(t,n,i)},Ee.inRange=function(t,n,e){return n=ea(n),void 0===e?(e=n,n=0):e=ea(e),function(t,n,e){return t>=ae(n,e)&&t<ue(n,e)}(t=oa(t),n,e)},Ee.invoke=_a,Ee.isArguments=ju,Ee.isArray=Iu,Ee.isArrayBuffer=Pu,Ee.isArrayLike=Ru,Ee.isArrayLikeObject=Lu,Ee.isBoolean=function(t){return!0===t||!1===t||Wu(t)&&dr(t)==s},Ee.isBuffer=zu,Ee.isDate=Fu,Ee.isElement=function(t){return Wu(t)&&1===t.nodeType&&!$u(t)},Ee.isEmpty=function(t){if(null==t)return!0;if(Ru(t)&&(Iu(t)||"string"==typeof t||"function"==typeof t.splice||zu(t)||Ju(t)||ju(t)))return!t.length;var n=eo(t);if(n==v||n==_)return!t.size;if(lo(t))return!Sr(t).length;for(var e in t)if(St.call(t,e))return!1;return!0},Ee.isEqual=function(t,n){return mr(t,n)},Ee.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:void 0)?e(t,n):void 0;return void 0===r?mr(t,n,void 0,e):!!r},Ee.isError=Bu,Ee.isFinite=function(t){return"number"==typeof t&&re(t)},Ee.isFunction=Du,Ee.isInteger=Uu,Ee.isLength=qu,Ee.isMap=Hu,Ee.isMatch=function(t,n){return t===n||xr(t,n,Ji(n))},Ee.isMatchWith=function(t,n,e){return e="function"==typeof e?e:void 0,xr(t,n,Ji(n),e)},Ee.isNaN=function(t){return Yu(t)&&t!=+t},Ee.isNative=function(t){if(so(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return wr(t)},Ee.isNil=function(t){return null==t},Ee.isNull=function(t){return null===t},Ee.isNumber=Yu,Ee.isObject=Vu,Ee.isObjectLike=Wu,Ee.isPlainObject=$u,Ee.isRegExp=Xu,Ee.isSafeInteger=function(t){return Uu(t)&&t>=-9007199254740991&&t<=9007199254740991},Ee.isSet=Gu,Ee.isString=Zu,Ee.isSymbol=Ku,Ee.isTypedArray=Ju,Ee.isUndefined=function(t){return void 0===t},Ee.isWeakMap=function(t){return Wu(t)&&eo(t)==w},Ee.isWeakSet=function(t){return Wu(t)&&"[object WeakSet]"==dr(t)},Ee.join=function(t,n){return null==t?"":ie.call(t,n)},Ee.kebabCase=Ia,Ee.last=Bo,Ee.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r;return void 0!==e&&(i=(i=ra(e))<0?ue(r+i,0):ae(i,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):xn(t,Sn,i,!0)},Ee.lowerCase=Pa,Ee.lowerFirst=Ra,Ee.lt=Qu,Ee.lte=ta,Ee.max=function(t){return t&&t.length?rr(t,Ya,pr):void 0},Ee.maxBy=function(t,n){return t&&t.length?rr(t,Zi(n,2),pr):void 0},Ee.mean=function(t){return kn(t,Ya)},Ee.meanBy=function(t,n){return kn(t,Zi(n,2))},Ee.min=function(t){return t&&t.length?rr(t,Ya,Ar):void 0},Ee.minBy=function(t,n){return t&&t.length?rr(t,Zi(n,2),Ar):void 0},Ee.stubArray=ic,Ee.stubFalse=oc,Ee.stubObject=function(){return{}},Ee.stubString=function(){return""},Ee.stubTrue=function(){return!0},Ee.multiply=lc,Ee.nth=function(t,n){return t&&t.length?Or(t,ra(n)):void 0},Ee.noConflict=function(){return $t._===this&&($t._=Tt),this},Ee.noop=Ka,Ee.now=vu,Ee.pad=function(t,n,e){t=aa(t);var r=(n=ra(n))?Yn(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return ji(te(i),e)+t+ji(Qn(i),e)},Ee.padEnd=function(t,n,e){t=aa(t);var r=(n=ra(n))?Yn(t):0;return n&&r<n?t+ji(n-r,e):t},Ee.padStart=function(t,n,e){t=aa(t);var r=(n=ra(n))?Yn(t):0;return n&&r<n?ji(n-r,e)+t:t},Ee.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),fe(aa(t).replace(G,""),n||0)},Ee.random=function(t,n,e){if(e&&"boolean"!=typeof e&&ao(t,n,e)&&(n=e=void 0),void 0===e&&("boolean"==typeof n?(e=n,n=void 0):"boolean"==typeof t&&(e=t,t=void 0)),void 0===t&&void 0===n?(t=0,n=1):(t=ea(t),void 0===n?(n=t,t=0):n=ea(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var i=se();return ae(t+i*(n-t+Vt("1e-"+((i+"").length-1))),n)}return Lr(t,n)},Ee.reduce=function(t,n,e){var r=Iu(t)?yn:En,i=arguments.length<3;return r(t,Zi(n,4),e,i,tr)},Ee.reduceRight=function(t,n,e){var r=Iu(t)?bn:En,i=arguments.length<3;return r(t,Zi(n,4),e,i,nr)},Ee.repeat=function(t,n,e){return n=(e?ao(t,n,e):void 0===n)?1:ra(n),zr(aa(t),n)},Ee.replace=function(){var t=arguments,n=aa(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Ee.result=function(t,n,e){var r=-1,i=(n=ai(n,t)).length;for(i||(i=1,t=void 0);++r<i;){var o=null==t?void 0:t[Ao(n[r])];void 0===o&&(r=i,o=e),t=Du(o)?o.call(t):o}return t},Ee.round=hc,Ee.runInContext=t,Ee.sample=function(t){return(Iu(t)?Be:Br)(t)},Ee.size=function(t){if(null==t)return 0;if(Ru(t))return Zu(t)?Yn(t):t.length;var n=eo(t);return n==v||n==_?t.size:Sr(t).length},Ee.snakeCase=La,Ee.some=function(t,n,e){var r=Iu(t)?gn:Yr;return e&&ao(t,n,e)&&(n=void 0),r(t,Zi(n,3))},Ee.sortedIndex=function(t,n){return $r(t,n)},Ee.sortedIndexBy=function(t,n,e){return Xr(t,n,Zi(e,2))},Ee.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=$r(t,n);if(r<e&&Tu(t[r],n))return r}return-1},Ee.sortedLastIndex=function(t,n){return $r(t,n,!0)},Ee.sortedLastIndexBy=function(t,n,e){return Xr(t,n,Zi(e,2),!0)},Ee.sortedLastIndexOf=function(t,n){if(null==t?0:t.length){var e=$r(t,n,!0)-1;if(Tu(t[e],n))return e}return-1},Ee.startCase=za,Ee.startsWith=function(t,n,e){return t=aa(t),e=null==e?0:Ge(ra(e),0,t.length),n=Kr(n),t.slice(e,e+n.length)==n},Ee.subtract=dc,Ee.sum=function(t){return t&&t.length?Tn(t,Ya):0},Ee.sumBy=function(t,n){return t&&t.length?Tn(t,Zi(n,2)):0},Ee.template=function(t,n,e){var r=Ee.templateSettings;e&&ao(t,n,e)&&(n=void 0),t=aa(t),n=sa({},n,r,Di);var i,o,u=sa({},n.imports,r.imports,Di),a=ma(u),c=jn(u,a),f=0,s=n.interpolate||st,l="__p += '",h=yt((n.escape||st).source+"|"+s.source+"|"+(s===q?et:st).source+"|"+(n.evaluate||st).source+"|$","g"),d="//# sourceURL="+(St.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Bt+"]")+"\n";t.replace(h,(function(n,e,r,u,a,c){return r||(r=u),l+=t.slice(f,c).replace(lt,Bn),e&&(i=!0,l+="' +\n__e("+e+") +\n'"),a&&(o=!0,l+="';\n"+a+";\n__p += '"),r&&(l+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),f=c+n.length,n})),l+="';\n";var p=St.call(n,"variable")&&n.variable;p||(l="with (obj) {\n"+l+"\n}\n"),l=(o?l.replace(I,""):l).replace(P,"$1").replace(R,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var v=Ua((function(){return dt(a,d+"return "+l).apply(void 0,c)}));if(v.source=l,Bu(v))throw v;return v},Ee.times=function(t,n){if((t=ra(t))<1||t>9007199254740991)return[];var e=4294967295,r=ae(t,4294967295);t-=4294967295;for(var i=Nn(r,n=Zi(n));++e<t;)n(e);return i},Ee.toFinite=ea,Ee.toInteger=ra,Ee.toLength=ia,Ee.toLower=function(t){return aa(t).toLowerCase()},Ee.toNumber=oa,Ee.toSafeInteger=function(t){return t?Ge(ra(t),-9007199254740991,9007199254740991):0===t?t:0},Ee.toString=aa,Ee.toUpper=function(t){return aa(t).toUpperCase()},Ee.trim=function(t,n,e){if((t=aa(t))&&(e||void 0===n))return t.replace(X,"");if(!t||!(n=Kr(n)))return t;var r=$n(t),i=$n(n);return fi(r,Pn(r,i),Rn(r,i)+1).join("")},Ee.trimEnd=function(t,n,e){if((t=aa(t))&&(e||void 0===n))return t.replace(Z,"");if(!t||!(n=Kr(n)))return t;var r=$n(t);return fi(r,0,Rn(r,$n(n))+1).join("")},Ee.trimStart=function(t,n,e){if((t=aa(t))&&(e||void 0===n))return t.replace(G,"");if(!t||!(n=Kr(n)))return t;var r=$n(t);return fi(r,Pn(r,$n(n))).join("")},Ee.truncate=function(t,n){var e=30,r="...";if(Vu(n)){var i="separator"in n?n.separator:i;e="length"in n?ra(n.length):e,r="omission"in n?Kr(n.omission):r}var o=(t=aa(t)).length;if(Dn(t)){var u=$n(t);o=u.length}if(e>=o)return t;var a=e-Yn(r);if(a<1)return r;var c=u?fi(u,0,a).join(""):t.slice(0,a);if(void 0===i)return c+r;if(u&&(a+=c.length-a),Xu(i)){if(t.slice(a).search(i)){var f,s=c;for(i.global||(i=yt(i.source,aa(rt.exec(i))+"g")),i.lastIndex=0;f=i.exec(s);)var l=f.index;c=c.slice(0,void 0===l?a:l)}}else if(t.indexOf(Kr(i),a)!=a){var h=c.lastIndexOf(i);h>-1&&(c=c.slice(0,h))}return c+r},Ee.unescape=function(t){return(t=aa(t))&&F.test(t)?t.replace(L,Xn):t},Ee.uniqueId=function(t){var n=++kt;return aa(t)+n},Ee.upperCase=Fa,Ee.upperFirst=Ba,Ee.each=au,Ee.eachRight=cu,Ee.first=Ro,Za(Ee,(sc={},cr(Ee,(function(t,n){St.call(Ee.prototype,n)||(sc[n]=t)})),sc),{chain:!1}),Ee.VERSION="4.17.19",cn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ee[t].placeholder=Ee})),cn(["drop","take"],(function(t,n){je.prototype[t]=function(e){e=void 0===e?1:ue(ra(e),0);var r=this.__filtered__&&!n?new je(this):this.clone();return r.__filtered__?r.__takeCount__=ae(e,r.__takeCount__):r.__views__.push({size:ae(e,4294967295),type:t+(r.__dir__<0?"Right":"")}),r},je.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),cn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;je.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:Zi(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),cn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");je.prototype[t]=function(){return this[e](1).value()[0]}})),cn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");je.prototype[t]=function(){return this.__filtered__?new je(this):this[e](1)}})),je.prototype.compact=function(){return this.filter(Ya)},je.prototype.find=function(t){return this.filter(t).head()},je.prototype.findLast=function(t){return this.reverse().find(t)},je.prototype.invokeMap=Fr((function(t,n){return"function"==typeof t?new je(this):this.map((function(e){return gr(e,t,n)}))})),je.prototype.reject=function(t){return this.filter(Su(Zi(t)))},je.prototype.slice=function(t,n){t=ra(t);var e=this;return e.__filtered__&&(t>0||n<0)?new je(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),void 0!==n&&(e=(n=ra(n))<0?e.dropRight(-n):e.take(n-t)),e)},je.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},je.prototype.toArray=function(){return this.take(4294967295)},cr(je.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),i=Ee[r?"take"+("last"==n?"Right":""):n],o=r||/^find/.test(n);i&&(Ee.prototype[n]=function(){var n=this.__wrapped__,u=r?[1]:arguments,a=n instanceof je,c=u[0],f=a||Iu(n),s=function(t){var n=i.apply(Ee,vn([t],u));return r&&l?n[0]:n};f&&e&&"function"==typeof c&&1!=c.length&&(a=f=!1);var l=this.__chain__,h=!!this.__actions__.length,d=o&&!l,p=a&&!h;if(!o&&f){n=p?n:new je(this);var v=t.apply(n,u);return v.__actions__.push({func:eu,args:[s],thisArg:void 0}),new Oe(v,l)}return d&&p?t.apply(this,u):(v=this.thru(s),d?r?v.value()[0]:v.value():v)})})),cn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=_t[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Ee.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Iu(i)?i:[],t)}return this[e]((function(e){return n.apply(Iu(e)?e:[],t)}))}})),cr(je.prototype,(function(t,n){var e=Ee[n];if(e){var r=e.name+"";St.call(_e,r)||(_e[r]=[]),_e[r].push({name:n,func:e})}})),_e[Ei(void 0,2).name]=[{name:"wrapper",func:void 0}],je.prototype.clone=function(){var t=new je(this.__wrapped__);return t.__actions__=bi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=bi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=bi(this.__views__),t},je.prototype.reverse=function(){if(this.__filtered__){var t=new je(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},je.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Iu(t),r=n<0,i=e?t.length:0,o=function(t,n,e){var r=-1,i=e.length;for(;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=ae(n,t+u);break;case"takeRight":t=ue(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,f=r?a:u-1,s=this.__iteratees__,l=s.length,h=0,d=ae(c,this.__takeCount__);if(!e||!r&&i==c&&d==c)return ei(t,this.__actions__);var p=[];t:for(;c--&&h<d;){for(var v=-1,y=t[f+=n];++v<l;){var b=s[v],g=b.iteratee,_=b.type,m=g(y);if(2==_)y=m;else if(!m){if(1==_)continue t;break t}}p[h++]=y}return p},Ee.prototype.at=ru,Ee.prototype.chain=function(){return nu(this)},Ee.prototype.commit=function(){return new Oe(this.value(),this.__chain__)},Ee.prototype.next=function(){void 0===this.__values__&&(this.__values__=na(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Ee.prototype.plant=function(t){for(var n,e=this;e instanceof Ne;){var r=Eo(e);r.__index__=0,r.__values__=void 0,n?i.__wrapped__=r:n=r;var i=r;e=e.__wrapped__}return i.__wrapped__=t,n},Ee.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof je){var n=t;return this.__actions__.length&&(n=new je(this)),(n=n.reverse()).__actions__.push({func:eu,args:[Vo],thisArg:void 0}),new Oe(n,this.__chain__)}return this.thru(Vo)},Ee.prototype.toJSON=Ee.prototype.valueOf=Ee.prototype.value=function(){return ei(this.__wrapped__,this.__actions__)},Ee.prototype.first=Ee.prototype.head,Jt&&(Ee.prototype[Jt]=function(){return this}),Ee}();$t._=Gn,void 0===(i=function(){return Gn}.call(n,e,n,r))||(r.exports=i)}).call(this)}).call(this,e(109),e(110)(t))},function(t,n,e){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t}).apply(this,arguments)};Object.defineProperty(n,"__esModule",{value:!0}),n.buildTree=n.camelSort=void 0;var i=e(81),o=e(55),u=[];for(var a in o.presetPalettes)u.push(o.presetPalettes[a]);function c(t){for(var n=[];t.length>0;)n.push.apply(n,t.splice(Math.floor(t.length/2),1));return n}function f(t){return-1===t.facetId?0:1===t.facetLayer?t.containChildrenFacet?2e3*t.childrenNumber:t.children.reduce((function(t,n){return"text"===n.assembleType?t+1:t+100}),0):t.containChildrenFacet?2e3*t.childrenNumber:t.children.reduce((function(t,n){return"fragment"===n.flag?t+1:t+100}),0)}function s(t,n,e,r,i){return console.log(t),Object.assign({},t,{transform:"translate("+n+","+e+")",cx:n,cy:e,r:i,color:r})}n.camelSort=c,n.buildTree=function(t,n){var e={branches:[],leaves:[],foldBranches:[],treeData:[],facetChart:[],texts:[]};if(i.isEmpty(t)||!n)return e;var o=n.clientWidth,a=n.clientHeight,l=t.childrenNumber;if(1===l)return e.branches.push({x:o/2-16,y:.4*a,width:32,height:.4*a-40,color:u[0][7],facetId:t.children[0].facetId,facetName:t.children[0].facetName}),e.leaves.push({cx:o/2,cy:.382*a,r:20,color:u[0][7]}),e.foldBranches.push({x:o/2-8,y:.618*a,width:16,height:0,transform:"",color:""}),e.treeData=t.children,t.children[0].containChildrenFacet&&e.facetChart.push(s(t.children[0],e.leaves[0].cx,e.leaves[0].cy,e.leaves[0].color,e.leaves[0].r)),e.texts.push({x:e.branches[0].x+16-15,y:e.branches[0].y+8,text:e.branches[0].facetName,fontSize:30}),e;for(var h=l>7,d=[],p=0,v=t.children;p<v.length;p++){var y=v[p];d.push({facetId:y.facetId,value:f(y),containChildrenFacet:y.containChildrenFacet})}d.sort((function(t,n){return t.value-n.value}));var b=t.children;if(h){var g=d.filter((function(t){return t.value>1999})).length,_=[];if(7<g+1?_.concat(d.filter((function(t){return t.value<2e3})).map((function(t){return t.facetId}))):_=_.concat(d.slice(6).map((function(t){return t.facetId}))),_.length){var m=[];m=m.concat(b.filter((function(t){return-1===_.indexOf(t.facetId)})));var x={facetId:-1,facetName:"其他分面",facetLayer:-1,parentFacetId:0,topicId:t.topicId,childrenNumber:_.length,type:"branch",containChildrenFacet:!0,children:b.filter((function(t){return-1!==_.indexOf(t.facetId)}))};m.push(x),b=m}}b.sort((function(t,n){return f(n)-f(t)})),e.treeData=b;for(var w=b.length,M=w%2==1,S=.6*a,k=Math.PI/(2*w),A=o*Math.tan(k)/(2*(1+Math.tan(k))),C=M?S/(1+1/Math.sin(k)):S/(1+1/Math.tan(k)),E=A<C?A:C,T=E/Math.sin(k),N=T+E<S?(S-T-E)/w*2:0,O=M?0:k,j=Math.floor(w/2);O<Math.PI/2;){var I={cx:T*Math.sin(O)+o/2,cy:S-T*Math.cos(O)-N*j,r:E/2,color:"#ffffff"},P=r({},I);P.cx=o/2-T*Math.sin(O),e.leaves.push(I),e.leaves.push(P),O+=2*k,j--}M&&e.leaves.shift();for(var R=0;R<w;R++)e.leaves[R].color=u[R][7];var L=Math.abs(e.leaves[w-1].cx-e.leaves[w-2].cx)-E<.5*o,z=L?(Math.abs(e.leaves[w-1].cx-e.leaves[w-2].cx)-E)/(1.2*w-.2):.5*o/(1.2*w-.2),F=e.leaves[w-1].cx<e.leaves[w-2].cx?e.leaves[w-1].cx+E/2:e.leaves[w-2].cx+E/2;for(L||(F=.5*o/2),b.forEach((function(t,n){var r={x:F+1.2*n*z,y:0,width:z,height:0,facetId:-1,facetName:"",color:""};e.branches.push(r)})),e.branches=c(e.branches),R=0;R<w;R++)e.branches[R].facetName=b[R].facetName,e.branches[R].facetId=b[R].facetId;for(R=0;R<w;R++)e.branches[R].y=e.leaves[R].cy/2+a*(1-.4*.8)/2,e.branches[R].height=a-e.branches[R].y-40,e.branches[R].color=u[R][7];for(j=w+1,R=0;R<w;R++){var B={x:e.branches[R].x<o/2?e.branches[R].x+e.branches[R].width:e.branches[R].x-e.branches[R].width,y:e.branches[R].y,width:e.branches[R].width,height:e.branches[R].x>o/2?Math.sqrt(Math.pow(e.leaves[R].cx-e.branches[R].x+z/2,2)+Math.pow(e.leaves[R].cy-e.branches[R].y,2))/2:Math.sqrt(Math.pow(e.leaves[R].cx-e.branches[R].x-z,2)+Math.pow(e.leaves[R].cy-e.branches[R].y,2))/2,transform:"",color:u[R][7]},D=e.branches[R].x+B.width/2,U=B.y,q=Math.atan(Math.abs((e.leaves[R].cy-U)/(e.leaves[R].cx-D)))/Math.PI*180;e.branches[R].x<o/2?B.transform="rotate("+(q+90)+" "+B.x+","+B.y+")":B.transform="rotate("+(-q-90)+" "+e.branches[R].x+","+B.y+")",e.foldBranches.push(B),j--}var V=z-4>20?20:z-4;for(R=0;R<w;R++)b[R].containChildrenFacet&&e.facetChart.push(s(b[R],e.leaves[R].cx,e.leaves[R].cy,e.leaves[R].color,e.leaves[R].r)),e.texts.push({x:e.branches[R].x+z/2-V/2,y:e.branches[R].y+8,text:e.branches[R].facetName,fontSize:V});for(var W=0,H=e.leaves;W<H.length;W++){H[W].r=.6*z}for(var Y=0,$=e.facetChart;Y<$.length;Y++){$[Y].r=.8*z}return e}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.drawFacetPieChart=void 0;var r=e(40),i=e(72);n.drawFacetPieChart=function(t,n,e){void 0===e&&(e=12);var o=r.select(n);o.append("g").attr("class",t.facetId).attr("transform",t.transform).selectAll("path").data(r.pie().value(1)(t.children)).enter().append("path").attr("d",r.arc().innerRadius(0).outerRadius(t.r)).attr("fill",t.color).attr("stroke","white").attr("stroke-width",t.r/10).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),o=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.data.facetId,expandedFacetId:o+","+t.facetId.toString()}));var u=document.getElementById("facet-tree-tooltip");r.select(u).transition().transition().duration(500).style("opacity",0)})).on("mouseover",(function(t){console.log(t);var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().duration(200).style("opacity",.9),r.select(n).html(t.data.facetName).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){var n=document.getElementById("facet-tree-tooltip");r.select(n).transition().transition().duration(500).style("opacity",0)}));var u=t.childrenNumber,a=Math.PI/u;o.append("g").attr("class",t.facetId).selectAll("text").data(t.children).enter().append("text").text((function(t){return t.facetName})).attr("x",(function(r,i){return a===Math.PI?t.cx>=n.clientWidth/2?t.cx+t.r:t.cx-t.r-e*r.facetName.length:Math.sin(a*(2*i+1))<0?t.cx+t.r*Math.sin(a*(2*i+1))-e*r.facetName.length-e:t.cx+t.r*Math.sin(a*(2*i+1))+e})).attr("y",(function(n,e){return a===Math.PI?t.cy-t.r:t.cy-t.r*Math.cos(a*(2*e+1))})).attr("fill","#000").attr("font-size",e+"px")}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.drawFacetForceLayout=void 0;var r=e(40),i=e(72);function o(t){return isFinite(t)?t:0}n.drawFacetForceLayout=function(t,n,e){void 0===e&&(e=12);var u=r.select(n).append("g"),a=function(t){for(var n=[],e=[],r=t.childrenNumber,i=0;i<r;i++){var o=Object.assign({},t.children[i],{id:t.children[i].facetId});n.push(o)}for(i=0;i<r-1;i++){var u={source:n[i].id,target:n[i+1].id,value:1};e.push(u)}return e.push({source:n[r-1].id,target:n[0].id,value:1}),{nodes:n,links:e}}(t),c=a.nodes,f=a.links,s=u.attr("class",t.facetId).append("g").selectAll("line").data(f).enter().append("line").attr("stroke","#aaa").attr("stroke-width","1px"),l=u.append("g").selectAll("circle").data(c).enter().append("circle").attr("r",t.r/3).attr("fill",t.color).style("cursor","pointer").on("click",(function(n){var e=i.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);i.globalState.next(Object.assign({},i.globalState.getValue(),{currentFacetId:n.facetId,expandedFacetId:r+","+t.facetId.toString()}))})),h=u.append("g").selectAll("text").data(c).enter().append("text").attr("fill","#aaaaaa").attr("font-size",e+"px").text((function(t){return t.facetName}));function d(t){t.attr("x1",(function(t){return o(t.source.x)})).attr("y1",(function(t){return o(t.source.y)})).attr("x2",(function(t){return o(t.target.x)})).attr("y2",(function(t){return o(t.target.y)}))}function p(t){t.attr("transform",(function(t){return"translate("+o(t.x)+","+o(t.y)+")"}))}var v=r.forceSimulation(c).force("charge",r.forceManyBody().strength(-500)).force("center",r.forceCenter(t.cx,t.cy)).force("x",r.forceX(t.cx).strength(1)).force("y",r.forceY(t.cy).strength(1)).force("link",r.forceLink(f).id((function(t){return t.id})).distance(2*t.r)).on("tick",(function(){l.call(p),s.call(d),h.attr("x",(function(r){return r.x===t.cx&&r.x>n.clientWidth/2?r.x+t.r/2:r.x<=t.cx?r.x-r.facetName.length*e-e:r.x+t.r/2})).attr("y",(function(n){return n.y>=t.cy?n.y-t.r/2:n.y+t.r/2}))}));l.call(r.drag().on("start",(function(t){r.event.sourceEvent.stopPropagation(),r.event.active||v.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y})).on("drag",(function(t){t.fx=r.event.x,t.fy=r.event.y})).on("end",(function(t){r.event.active||v.alphaTarget(0),t.fx=null,t.fy=null})))}},function(t,n,e){"use strict";e.r(n),e.d(n,"Observable",(function(){return r.a})),e.d(n,"ConnectableObservable",(function(){return i.a})),e.d(n,"GroupedObservable",(function(){return o.a})),e.d(n,"observable",(function(){return u.a})),e.d(n,"Subject",(function(){return a.a})),e.d(n,"BehaviorSubject",(function(){return c.a})),e.d(n,"ReplaySubject",(function(){return f.a})),e.d(n,"AsyncSubject",(function(){return s.a})),e.d(n,"asap",(function(){return l.a})),e.d(n,"asapScheduler",(function(){return l.b})),e.d(n,"async",(function(){return h.a})),e.d(n,"asyncScheduler",(function(){return h.b})),e.d(n,"queue",(function(){return d.a})),e.d(n,"queueScheduler",(function(){return d.b})),e.d(n,"animationFrame",(function(){return _})),e.d(n,"animationFrameScheduler",(function(){return g})),e.d(n,"VirtualTimeScheduler",(function(){return m})),e.d(n,"VirtualAction",(function(){return x})),e.d(n,"Scheduler",(function(){return w.a})),e.d(n,"Subscription",(function(){return M.a})),e.d(n,"Subscriber",(function(){return S.a})),e.d(n,"Notification",(function(){return k.a})),e.d(n,"NotificationKind",(function(){return k.b})),e.d(n,"pipe",(function(){return A.a})),e.d(n,"noop",(function(){return C.a})),e.d(n,"identity",(function(){return E.a})),e.d(n,"isObservable",(function(){return T})),e.d(n,"ArgumentOutOfRangeError",(function(){return N.a})),e.d(n,"EmptyError",(function(){return O.a})),e.d(n,"ObjectUnsubscribedError",(function(){return j.a})),e.d(n,"UnsubscriptionError",(function(){return I.a})),e.d(n,"TimeoutError",(function(){return P.a})),e.d(n,"bindCallback",(function(){return B})),e.d(n,"bindNodeCallback",(function(){return q})),e.d(n,"combineLatest",(function(){return Y.b})),e.d(n,"concat",(function(){return $.a})),e.d(n,"defer",(function(){return X.a})),e.d(n,"empty",(function(){return G.b})),e.d(n,"forkJoin",(function(){return J})),e.d(n,"from",(function(){return K.a})),e.d(n,"fromEvent",(function(){return nt})),e.d(n,"fromEventPattern",(function(){return et})),e.d(n,"generate",(function(){return rt})),e.d(n,"iif",(function(){return ot})),e.d(n,"interval",(function(){return at})),e.d(n,"merge",(function(){return ft.a})),e.d(n,"never",(function(){return lt})),e.d(n,"of",(function(){return ht.a})),e.d(n,"onErrorResumeNext",(function(){return dt})),e.d(n,"pairs",(function(){return pt})),e.d(n,"partition",(function(){return _t})),e.d(n,"race",(function(){return mt.a})),e.d(n,"range",(function(){return xt})),e.d(n,"throwError",(function(){return Mt.a})),e.d(n,"timer",(function(){return St.a})),e.d(n,"using",(function(){return kt})),e.d(n,"zip",(function(){return At.b})),e.d(n,"scheduled",(function(){return Ct.a})),e.d(n,"EMPTY",(function(){return G.a})),e.d(n,"NEVER",(function(){return st})),e.d(n,"config",(function(){return Et.a}));var r=e(3),i=e(60),o=e(56),u=e(21),a=e(5),c=e(62),f=e(45),s=e(29),l=e(37),h=e(6),d=e(52),p=e(0),v=e(30),y=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r}return p.a(n,t),n.prototype.requestAsyncId=function(n,e,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,n,e,r):(n.actions.push(this),n.scheduled||(n.scheduled=requestAnimationFrame((function(){return n.flush(null)}))))},n.prototype.recycleAsyncId=function(n,e,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,n,e,r);0===n.actions.length&&(cancelAnimationFrame(e),n.scheduled=void 0)},n}(v.a),b=e(27),g=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return p.a(n,t),n.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var n,e=this.actions,r=-1,i=e.length;t=t||e.shift();do{if(n=t.execute(t.state,t.delay))break}while(++r<i&&(t=e.shift()));if(this.active=!1,n){for(;++r<i&&(t=e.shift());)t.unsubscribe();throw n}},n}(b.a))(y),_=g,m=function(t){function n(n,e){void 0===n&&(n=x),void 0===e&&(e=Number.POSITIVE_INFINITY);var r=t.call(this,n,(function(){return r.frame}))||this;return r.maxFrames=e,r.frame=0,r.index=-1,r}return p.a(n,t),n.prototype.flush=function(){for(var t,n,e=this.actions,r=this.maxFrames;(n=e[0])&&n.delay<=r&&(e.shift(),this.frame=n.delay,!(t=n.execute(n.state,n.delay))););if(t){for(;n=e.shift();)n.unsubscribe();throw t}},n.frameTimeFactor=10,n}(b.a),x=function(t){function n(n,e,r){void 0===r&&(r=n.index+=1);var i=t.call(this,n,e)||this;return i.scheduler=n,i.work=e,i.index=r,i.active=!0,i.index=n.index=r,i}return p.a(n,t),n.prototype.schedule=function(e,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,e,r);this.active=!1;var i=new n(this.scheduler,this.work);return this.add(i),i.schedule(e,r)},n.prototype.requestAsyncId=function(t,e,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(n.sortActions),!0},n.prototype.recycleAsyncId=function(t,n,e){void 0===e&&(e=0)},n.prototype._execute=function(n,e){if(!0===this.active)return t.prototype._execute.call(this,n,e)},n.sortActions=function(t,n){return t.delay===n.delay?t.index===n.index?0:t.index>n.index?1:-1:t.delay>n.delay?1:-1},n}(v.a),w=e(53),M=e(4),S=e(1),k=e(17),A=e(36),C=e(20),E=e(14);function T(t){return!!t&&(t instanceof r.a||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var N=e(23),O=e(26),j=e(22),I=e(39),P=e(64),R=e(8),L=e(49),z=e(7),F=e(9);function B(t,n,e){if(n){if(!Object(F.a)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return B(t,e).apply(void 0,r).pipe(Object(R.a)((function(t){return Object(z.a)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o,u=this,a={context:u,subject:o,callbackFunc:t,scheduler:e};return new r.a((function(r){if(e){var i={args:n,subscriber:r,params:a};return e.schedule(D,0,i)}if(!o){o=new s.a;try{t.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){Object(L.a)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function D(t){var n=this,e=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,a=i.scheduler,c=i.subject;if(!c){c=i.subject=new s.a;try{o.apply(u,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.length<=1?t[0]:t;n.add(a.schedule(U,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function U(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function q(t,n,e){if(n){if(!Object(F.a)(n))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return q(t,e).apply(void 0,r).pipe(Object(R.a)((function(t){return Object(z.a)(t)?n.apply(void 0,t):n(t)})))};e=n}return function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var o={subject:void 0,args:n,callbackFunc:t,scheduler:e,context:this};return new r.a((function(r){var i=o.context,u=o.subject;if(e)return e.schedule(V,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new s.a;try{t.apply(i,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.shift();e?u.error(e):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){Object(L.a)(u)?u.error(t):console.warn(t)}}return u.subscribe(r)}))}}function V(t){var n=this,e=t.params,r=t.subscriber,i=t.context,o=e.callbackFunc,u=e.args,a=e.scheduler,c=e.subject;if(!c){c=e.subject=new s.a;try{o.apply(i,u.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.shift();if(r)n.add(a.schedule(H,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;n.add(a.schedule(W,0,{value:i,subject:c}))}}]))}catch(t){this.add(a.schedule(H,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function W(t){var n=t.value,e=t.subject;e.next(n),e.complete()}function H(t){var n=t.err;t.subject.error(n)}var Y=e(41),$=e(32),X=e(46),G=e(10),Z=e(48),K=e(11);function J(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(1===t.length){var e=t[0];if(Object(z.a)(e))return Q(e,null);if(Object(Z.a)(e)&&Object.getPrototypeOf(e)===Object.prototype){var r=Object.keys(e);return Q(r.map((function(t){return e[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Q(t=1===t.length&&Object(z.a)(t[0])?t[0]:t,null).pipe(Object(R.a)((function(t){return i.apply(void 0,t)})))}return Q(t,null)}function Q(t,n){return new r.a((function(e){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,a=function(a){var c=Object(K.a)(t[a]),f=!1;e.add(c.subscribe({next:function(t){f||(f=!0,u++),i[a]=t},error:function(t){return e.error(t)},complete:function(){++o!==r&&f||(u===r&&e.next(n?n.reduce((function(t,n,e){return t[n]=i[e],t}),{}):i),e.complete())}}))},c=0;c<r;c++)a(c);else e.complete()}))}var tt=e(24);function nt(t,n,e,i){return Object(tt.a)(e)&&(i=e,e=void 0),i?nt(t,n,e).pipe(Object(R.a)((function(t){return Object(z.a)(t)?i.apply(void 0,t):i(t)}))):new r.a((function(r){!function t(n,e,r,i,o){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(n)){var a=n;n.addEventListener(e,r,o),u=function(){return a.removeEventListener(e,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(n)){var c=n;n.on(e,r),u=function(){return c.off(e,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(n)){var f=n;n.addListener(e,r),u=function(){return f.removeListener(e,r)}}else{if(!n||!n.length)throw new TypeError("Invalid event target");for(var s=0,l=n.length;s<l;s++)t(n[s],e,r,i,o)}i.add(u)}(t,n,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,e)}))}function et(t,n,e){return e?et(t,n).pipe(Object(R.a)((function(t){return Object(z.a)(t)?e.apply(void 0,t):e(t)}))):new r.a((function(e){var r,i=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void e.error(t)}if(Object(tt.a)(n))return function(){return n(i,r)}}))}function rt(t,n,e,i,o){var u,a;if(1==arguments.length){var c=t;a=c.initialState,n=c.condition,e=c.iterate,u=c.resultSelector||E.a,o=c.scheduler}else void 0===i||Object(F.a)(i)?(a=t,u=E.a,o=i):(a=t,u=i);return new r.a((function(t){var r=a;if(o)return o.schedule(it,0,{subscriber:t,iterate:e,condition:n,resultSelector:u,state:r});for(;;){if(n){var i=void 0;try{i=n(r)}catch(n){return void t.error(n)}if(!i){t.complete();break}}var c=void 0;try{c=u(r)}catch(n){return void t.error(n)}if(t.next(c),t.closed)break;try{r=e(r)}catch(n){return void t.error(n)}}}))}function it(t){var n=t.subscriber,e=t.condition;if(!n.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void n.error(t)}else t.needIterate=!0;if(e){var r=void 0;try{r=e(t.state)}catch(t){return void n.error(t)}if(!r)return void n.complete();if(n.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void n.error(t)}if(!n.closed&&(n.next(i),!n.closed))return this.schedule(t)}}function ot(t,n,e){return void 0===n&&(n=G.a),void 0===e&&(e=G.a),Object(X.a)((function(){return t()?n:e}))}var ut=e(31);function at(t,n){return void 0===t&&(t=0),void 0===n&&(n=h.a),(!Object(ut.a)(t)||t<0)&&(t=0),n&&"function"==typeof n.schedule||(n=h.a),new r.a((function(e){return e.add(n.schedule(ct,t,{subscriber:e,counter:0,period:t})),e}))}function ct(t){var n=t.subscriber,e=t.counter,r=t.period;n.next(e),this.schedule({subscriber:n,counter:e+1,period:r},r)}var ft=e(59),st=new r.a(C.a);function lt(){return st}var ht=e(35);function dt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(0===t.length)return G.a;var e=t[0],i=t.slice(1);return 1===t.length&&Object(z.a)(e)?dt.apply(void 0,e):new r.a((function(t){var n=function(){return t.add(dt.apply(void 0,i).subscribe(t))};return Object(K.a)(e).subscribe({next:function(n){t.next(n)},error:n,complete:n})}))}function pt(t,n){return n?new r.a((function(e){var r=Object.keys(t),i=new M.a;return i.add(n.schedule(vt,0,{keys:r,index:0,subscriber:e,subscription:i,obj:t})),i})):new r.a((function(n){for(var e=Object.keys(t),r=0;r<e.length&&!n.closed;r++){var i=e[r];t.hasOwnProperty(i)&&n.next([i,t[i]])}n.complete()}))}function vt(t){var n=t.keys,e=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(e<n.length){var u=n[e];r.next([u,o[u]]),i.add(this.schedule({keys:n,index:e+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var yt=e(70),bt=e(33),gt=e(16);function _t(t,n,e){return[Object(gt.a)(n,e)(new r.a(Object(bt.a)(t))),Object(gt.a)(Object(yt.a)(n,e))(new r.a(Object(bt.a)(t)))]}var mt=e(63);function xt(t,n,e){return void 0===t&&(t=0),new r.a((function(r){void 0===n&&(n=t,t=0);var i=0,o=t;if(e)return e.schedule(wt,0,{index:i,count:n,start:t,subscriber:r});for(;;){if(i++>=n){r.complete();break}if(r.next(o++),r.closed)break}}))}function wt(t){var n=t.start,e=t.index,r=t.count,i=t.subscriber;e>=r?i.complete():(i.next(n),i.closed||(t.index=e+1,t.start=n+1,this.schedule(t)))}var Mt=e(43),St=e(57);function kt(t,n){return new r.a((function(e){var r,i;try{r=t()}catch(t){return void e.error(t)}try{i=n(r)}catch(t){return void e.error(t)}var o=(i?Object(K.a)(i):G.a).subscribe(e);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var At=e(47),Ct=e(65),Et=e(13)},function(t,n,e){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,n,e,r){void 0===r&&(r=e),Object.defineProperty(t,r,{enumerable:!0,get:function(){return n[e]}})}:function(t,n,e,r){void 0===r&&(r=e),t[r]=n[e]}),i=this&&this.__exportStar||function(t,n){for(var e in t)"default"===e||n.hasOwnProperty(e)||r(n,t,e)};Object.defineProperty(n,"__esModule",{value:!0}),i(e(54),n),i(e(71),n),i(e(112),n),i(e(113),n),i(e(114),n)},function(t,n,e){t.exports=e(88)},function(t,n,e){"use strict";var r=e(18),i=e(73),o=e(89),u=e(79);function a(t){var n=new o(t),e=i(o.prototype.request,n);return r.extend(e,o.prototype,n),r.extend(e,n),e}var c=a(e(76));c.Axios=o,c.create=function(t){return a(u(c.defaults,t))},c.Cancel=e(80),c.CancelToken=e(103),c.isCancel=e(75),c.all=function(t){return Promise.all(t)},c.spread=e(104),t.exports=c,t.exports.default=c},function(t,n,e){"use strict";var r=e(18),i=e(74),o=e(90),u=e(91),a=e(79);function c(t){this.defaults=t,this.interceptors={request:new o,response:new o}}c.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=[u,void 0],e=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){n.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){n.push(t.fulfilled,t.rejected)}));n.length;)e=e.then(n.shift(),n.shift());return e},c.prototype.getUri=function(t){return t=a(this.defaults,t),i(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){c.prototype[t]=function(n,e){return this.request(r.merge(e||{},{method:t,url:n}))}})),r.forEach(["post","put","patch"],(function(t){c.prototype[t]=function(n,e,i){return this.request(r.merge(i||{},{method:t,url:n,data:e}))}})),t.exports=c},function(t,n,e){"use strict";var r=e(18);function i(){this.handlers=[]}i.prototype.use=function(t,n){return this.handlers.push({fulfilled:t,rejected:n}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){r.forEach(this.handlers,(function(n){null!==n&&t(n)}))},t.exports=i},function(t,n,e){"use strict";var r=e(18),i=e(92),o=e(75),u=e(76);function a(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return a(t),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete t.headers[n]})),(t.adapter||u.adapter)(t).then((function(n){return a(t),n.data=i(n.data,n.headers,t.transformResponse),n}),(function(n){return o(n)||(a(t),n&&n.response&&(n.response.data=i(n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)}))}},function(t,n,e){"use strict";var r=e(18);t.exports=function(t,n,e){return r.forEach(e,(function(e){t=e(t,n)})),t}},function(t,n){var e,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var c,f=[],s=!1,l=-1;function h(){s&&c&&(s=!1,c.length?f=c.concat(f):l=-1,f.length&&d())}function d(){if(!s){var t=a(h);s=!0;for(var n=f.length;n;){for(c=f,f=[];++l<n;)c&&c[l].run();l=-1,n=f.length}c=null,s=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function v(){}i.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];f.push(new p(t,n)),1!==f.length||s||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,n,e){"use strict";var r=e(18);t.exports=function(t,n){r.forEach(t,(function(e,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(t[n]=e,delete t[r])}))}},function(t,n,e){"use strict";var r=e(78);t.exports=function(t,n,e){var i=e.config.validateStatus;!i||i(e.status)?t(e):n(r("Request failed with status code "+e.status,e.config,null,e.request,e))}},function(t,n,e){"use strict";t.exports=function(t,n,e,r,i){return t.config=n,e&&(t.code=e),t.request=r,t.response=i,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,n,e){"use strict";var r=e(98),i=e(99);t.exports=function(t,n){return t&&!r(n)?i(t,n):n}},function(t,n,e){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,n,e){"use strict";t.exports=function(t,n){return n?t.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):t}},function(t,n,e){"use strict";var r=e(18),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var n,e,o,u={};return t?(r.forEach(t.split("\n"),(function(t){if(o=t.indexOf(":"),n=r.trim(t.substr(0,o)).toLowerCase(),e=r.trim(t.substr(o+1)),n){if(u[n]&&i.indexOf(n)>=0)return;u[n]="set-cookie"===n?(u[n]?u[n]:[]).concat([e]):u[n]?u[n]+", "+e:e}})),u):u}},function(t,n,e){"use strict";var r=e(18);t.exports=r.isStandardBrowserEnv()?function(){var t,n=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");function i(t){var r=t;return n&&(e.setAttribute("href",r),r=e.href),e.setAttribute("href",r),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return t=i(window.location.href),function(n){var e=r.isString(n)?i(n):n;return e.protocol===t.protocol&&e.host===t.host}}():function(){return!0}},function(t,n,e){"use strict";var r=e(18);t.exports=r.isStandardBrowserEnv()?{write:function(t,n,e,i,o,u){var a=[];a.push(t+"="+encodeURIComponent(n)),r.isNumber(e)&&a.push("expires="+new Date(e).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===u&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var n=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,n,e){"use strict";var r=e(80);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(t){n=t}));var e=this;t((function(t){e.reason||(e.reason=new r(t),n(e.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i((function(n){t=n})),cancel:t}},t.exports=i},function(t,n,e){"use strict";t.exports=function(t){return function(n){return t.apply(null,n)}}},function(t,n,e){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var i=r(e(106));function o(t,n,e){var r;return(r=Math.round(t.h)>=60&&Math.round(t.h)<=240?e?Math.round(t.h)-2*n:Math.round(t.h)+2*n:e?Math.round(t.h)+2*n:Math.round(t.h)-2*n)<0?r+=360:r>=360&&(r-=360),r}function u(t,n,e){return 0===t.h&&0===t.s?t.s:((r=e?Math.round(100*t.s)-16*n:4===n?Math.round(100*t.s)+16:Math.round(100*t.s)+5*n)>100&&(r=100),e&&5===n&&r>10&&(r=10),r<6&&(r=6),r);var r}function a(t,n,e){return e?Math.round(100*t.v)+5*n:Math.round(100*t.v)-15*n}n.default=function(t){for(var n=[],e=i.default(t),r=5;r>0;r-=1){var c=e.toHsv(),f=i.default({h:o(c,r,!0),s:u(c,r,!0),v:a(c,r,!0)}).toHexString();n.push(f)}for(n.push(e.toHexString()),r=1;r<=4;r+=1){c=e.toHsv(),f=i.default({h:o(c,r),s:u(c,r),v:a(c,r)}).toHexString();n.push(f)}return n}},function(t,n,e){var r;!function(i){var o=/^\s+/,u=/\s+$/,a=0,c=i.round,f=i.min,s=i.max,l=i.random;function h(t,n){if(n=n||{},(t=t||"")instanceof h)return t;if(!(this instanceof h))return new h(t,n);var e=function(t){var n={r:0,g:0,b:0},e=1,r=null,a=null,c=null,l=!1,h=!1;"string"==typeof t&&(t=function(t){t=t.replace(o,"").replace(u,"").toLowerCase();var n,e=!1;if(N[t])t=N[t],e=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};if(n=V.rgb.exec(t))return{r:n[1],g:n[2],b:n[3]};if(n=V.rgba.exec(t))return{r:n[1],g:n[2],b:n[3],a:n[4]};if(n=V.hsl.exec(t))return{h:n[1],s:n[2],l:n[3]};if(n=V.hsla.exec(t))return{h:n[1],s:n[2],l:n[3],a:n[4]};if(n=V.hsv.exec(t))return{h:n[1],s:n[2],v:n[3]};if(n=V.hsva.exec(t))return{h:n[1],s:n[2],v:n[3],a:n[4]};if(n=V.hex8.exec(t))return{r:R(n[1]),g:R(n[2]),b:R(n[3]),a:B(n[4]),format:e?"name":"hex8"};if(n=V.hex6.exec(t))return{r:R(n[1]),g:R(n[2]),b:R(n[3]),format:e?"name":"hex"};if(n=V.hex4.exec(t))return{r:R(n[1]+""+n[1]),g:R(n[2]+""+n[2]),b:R(n[3]+""+n[3]),a:B(n[4]+""+n[4]),format:e?"name":"hex8"};if(n=V.hex3.exec(t))return{r:R(n[1]+""+n[1]),g:R(n[2]+""+n[2]),b:R(n[3]+""+n[3]),format:e?"name":"hex"};return!1}(t));"object"==typeof t&&(W(t.r)&&W(t.g)&&W(t.b)?(d=t.r,p=t.g,v=t.b,n={r:255*I(d,255),g:255*I(p,255),b:255*I(v,255)},l=!0,h="%"===String(t.r).substr(-1)?"prgb":"rgb"):W(t.h)&&W(t.s)&&W(t.v)?(r=z(t.s),a=z(t.v),n=function(t,n,e){t=6*I(t,360),n=I(n,100),e=I(e,100);var r=i.floor(t),o=t-r,u=e*(1-n),a=e*(1-o*n),c=e*(1-(1-o)*n),f=r%6;return{r:255*[e,a,u,u,c,e][f],g:255*[c,e,e,a,u,u][f],b:255*[u,u,c,e,e,a][f]}}(t.h,r,a),l=!0,h="hsv"):W(t.h)&&W(t.s)&&W(t.l)&&(r=z(t.s),c=z(t.l),n=function(t,n,e){var r,i,o;function u(t,n,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?t+6*(n-t)*e:e<.5?n:e<2/3?t+(n-t)*(2/3-e)*6:t}if(t=I(t,360),n=I(n,100),e=I(e,100),0===n)r=i=o=e;else{var a=e<.5?e*(1+n):e+n-e*n,c=2*e-a;r=u(c,a,t+1/3),i=u(c,a,t),o=u(c,a,t-1/3)}return{r:255*r,g:255*i,b:255*o}}(t.h,r,c),l=!0,h="hsl"),t.hasOwnProperty("a")&&(e=t.a));var d,p,v;return e=j(e),{ok:l,format:t.format||h,r:f(255,s(n.r,0)),g:f(255,s(n.g,0)),b:f(255,s(n.b,0)),a:e}}(t);this._originalInput=t,this._r=e.r,this._g=e.g,this._b=e.b,this._a=e.a,this._roundA=c(100*this._a)/100,this._format=n.format||e.format,this._gradientType=n.gradientType,this._r<1&&(this._r=c(this._r)),this._g<1&&(this._g=c(this._g)),this._b<1&&(this._b=c(this._b)),this._ok=e.ok,this._tc_id=a++}function d(t,n,e){t=I(t,255),n=I(n,255),e=I(e,255);var r,i,o=s(t,n,e),u=f(t,n,e),a=(o+u)/2;if(o==u)r=i=0;else{var c=o-u;switch(i=a>.5?c/(2-o-u):c/(o+u),o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,l:a}}function p(t,n,e){t=I(t,255),n=I(n,255),e=I(e,255);var r,i,o=s(t,n,e),u=f(t,n,e),a=o,c=o-u;if(i=0===o?0:c/o,o==u)r=0;else{switch(o){case t:r=(n-e)/c+(n<e?6:0);break;case n:r=(e-t)/c+2;break;case e:r=(t-n)/c+4}r/=6}return{h:r,s:i,v:a}}function v(t,n,e,r){var i=[L(c(t).toString(16)),L(c(n).toString(16)),L(c(e).toString(16))];return r&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function y(t,n,e,r){return[L(F(r)),L(c(t).toString(16)),L(c(n).toString(16)),L(c(e).toString(16))].join("")}function b(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s-=n/100,e.s=P(e.s),h(e)}function g(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.s+=n/100,e.s=P(e.s),h(e)}function _(t){return h(t).desaturate(100)}function m(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l+=n/100,e.l=P(e.l),h(e)}function x(t,n){n=0===n?0:n||10;var e=h(t).toRgb();return e.r=s(0,f(255,e.r-c(-n/100*255))),e.g=s(0,f(255,e.g-c(-n/100*255))),e.b=s(0,f(255,e.b-c(-n/100*255))),h(e)}function w(t,n){n=0===n?0:n||10;var e=h(t).toHsl();return e.l-=n/100,e.l=P(e.l),h(e)}function M(t,n){var e=h(t).toHsl(),r=(e.h+n)%360;return e.h=r<0?360+r:r,h(e)}function S(t){var n=h(t).toHsl();return n.h=(n.h+180)%360,h(n)}function k(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+120)%360,s:n.s,l:n.l}),h({h:(e+240)%360,s:n.s,l:n.l})]}function A(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+90)%360,s:n.s,l:n.l}),h({h:(e+180)%360,s:n.s,l:n.l}),h({h:(e+270)%360,s:n.s,l:n.l})]}function C(t){var n=h(t).toHsl(),e=n.h;return[h(t),h({h:(e+72)%360,s:n.s,l:n.l}),h({h:(e+216)%360,s:n.s,l:n.l})]}function E(t,n,e){n=n||6,e=e||30;var r=h(t).toHsl(),i=360/e,o=[h(t)];for(r.h=(r.h-(i*n>>1)+720)%360;--n;)r.h=(r.h+i)%360,o.push(h(r));return o}function T(t,n){n=n||6;for(var e=h(t).toHsv(),r=e.h,i=e.s,o=e.v,u=[],a=1/n;n--;)u.push(h({h:r,s:i,v:o})),o=(o+a)%1;return u}h.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,n,e,r=this.toRgb();return t=r.r/255,n=r.g/255,e=r.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:i.pow((n+.055)/1.055,2.4))+.0722*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))},setAlpha:function(t){return this._a=j(t),this._roundA=c(100*this._a)/100,this},toHsv:function(){var t=p(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=p(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.v);return 1==this._a?"hsv("+n+", "+e+"%, "+r+"%)":"hsva("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var t=d(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=d(this._r,this._g,this._b),n=c(360*t.h),e=c(100*t.s),r=c(100*t.l);return 1==this._a?"hsl("+n+", "+e+"%, "+r+"%)":"hsla("+n+", "+e+"%, "+r+"%, "+this._roundA+")"},toHex:function(t){return v(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,n,e,r,i){var o=[L(c(t).toString(16)),L(c(n).toString(16)),L(c(e).toString(16)),L(F(r))];if(i&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)&&o[3].charAt(0)==o[3].charAt(1))return o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0);return o.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:c(this._r),g:c(this._g),b:c(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+c(this._r)+", "+c(this._g)+", "+c(this._b)+")":"rgba("+c(this._r)+", "+c(this._g)+", "+c(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:c(100*I(this._r,255))+"%",g:c(100*I(this._g,255))+"%",b:c(100*I(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+c(100*I(this._r,255))+"%, "+c(100*I(this._g,255))+"%, "+c(100*I(this._b,255))+"%)":"rgba("+c(100*I(this._r,255))+"%, "+c(100*I(this._g,255))+"%, "+c(100*I(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(O[v(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var n="#"+y(this._r,this._g,this._b,this._a),e=n,r=this._gradientType?"GradientType = 1, ":"";if(t){var i=h(t);e="#"+y(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+n+",endColorstr="+e+")"},toString:function(t){var n=!!t;t=t||this._format;var e=!1,r=this._a<1&&this._a>=0;return n||!r||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(e=this.toRgbString()),"prgb"===t&&(e=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(e=this.toHexString()),"hex3"===t&&(e=this.toHexString(!0)),"hex4"===t&&(e=this.toHex8String(!0)),"hex8"===t&&(e=this.toHex8String()),"name"===t&&(e=this.toName()),"hsl"===t&&(e=this.toHslString()),"hsv"===t&&(e=this.toHsvString()),e||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return h(this.toString())},_applyModification:function(t,n){var e=t.apply(null,[this].concat([].slice.call(n)));return this._r=e._r,this._g=e._g,this._b=e._b,this.setAlpha(e._a),this},lighten:function(){return this._applyModification(m,arguments)},brighten:function(){return this._applyModification(x,arguments)},darken:function(){return this._applyModification(w,arguments)},desaturate:function(){return this._applyModification(b,arguments)},saturate:function(){return this._applyModification(g,arguments)},greyscale:function(){return this._applyModification(_,arguments)},spin:function(){return this._applyModification(M,arguments)},_applyCombination:function(t,n){return t.apply(null,[this].concat([].slice.call(n)))},analogous:function(){return this._applyCombination(E,arguments)},complement:function(){return this._applyCombination(S,arguments)},monochromatic:function(){return this._applyCombination(T,arguments)},splitcomplement:function(){return this._applyCombination(C,arguments)},triad:function(){return this._applyCombination(k,arguments)},tetrad:function(){return this._applyCombination(A,arguments)}},h.fromRatio=function(t,n){if("object"==typeof t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]="a"===r?t[r]:z(t[r]));t=e}return h(t,n)},h.equals=function(t,n){return!(!t||!n)&&h(t).toRgbString()==h(n).toRgbString()},h.random=function(){return h.fromRatio({r:l(),g:l(),b:l()})},h.mix=function(t,n,e){e=0===e?0:e||50;var r=h(t).toRgb(),i=h(n).toRgb(),o=e/100;return h({r:(i.r-r.r)*o+r.r,g:(i.g-r.g)*o+r.g,b:(i.b-r.b)*o+r.b,a:(i.a-r.a)*o+r.a})},h.readability=function(t,n){var e=h(t),r=h(n);return(i.max(e.getLuminance(),r.getLuminance())+.05)/(i.min(e.getLuminance(),r.getLuminance())+.05)},h.isReadable=function(t,n,e){var r,i,o=h.readability(t,n);switch(i=!1,(r=function(t){var n,e;n=((t=t||{level:"AA",size:"small"}).level||"AA").toUpperCase(),e=(t.size||"small").toLowerCase(),"AA"!==n&&"AAA"!==n&&(n="AA");"small"!==e&&"large"!==e&&(e="small");return{level:n,size:e}}(e)).level+r.size){case"AAsmall":case"AAAlarge":i=o>=4.5;break;case"AAlarge":i=o>=3;break;case"AAAsmall":i=o>=7}return i},h.mostReadable=function(t,n,e){var r,i,o,u,a=null,c=0;i=(e=e||{}).includeFallbackColors,o=e.level,u=e.size;for(var f=0;f<n.length;f++)(r=h.readability(t,n[f]))>c&&(c=r,a=h(n[f]));return h.isReadable(t,a,{level:o,size:u})||!i?a:(e.includeFallbackColors=!1,h.mostReadable(t,["#fff","#000"],e))};var N=h.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},O=h.hexNames=function(t){var n={};for(var e in t)t.hasOwnProperty(e)&&(n[t[e]]=e);return n}(N);function j(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function I(t,n){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var e=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=f(n,s(0,parseFloat(t))),e&&(t=parseInt(t*n,10)/100),i.abs(t-n)<1e-6?1:t%n/parseFloat(n)}function P(t){return f(1,s(0,t))}function R(t){return parseInt(t,16)}function L(t){return 1==t.length?"0"+t:""+t}function z(t){return t<=1&&(t=100*t+"%"),t}function F(t){return i.round(255*parseFloat(t)).toString(16)}function B(t){return R(t)/255}var D,U,q,V=(U="[\\s|\\(]+("+(D="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+D+")[,|\\s]+("+D+")\\s*\\)?",q="[\\s|\\(]+("+D+")[,|\\s]+("+D+")[,|\\s]+("+D+")[,|\\s]+("+D+")\\s*\\)?",{CSS_UNIT:new RegExp(D),rgb:new RegExp("rgb"+U),rgba:new RegExp("rgba"+q),hsl:new RegExp("hsl"+U),hsla:new RegExp("hsla"+q),hsv:new RegExp("hsv"+U),hsva:new RegExp("hsva"+q),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function W(t){return!!V.CSS_UNIT.exec(t)}t.exports?t.exports=h:void 0===(r=function(){return h}.call(n,e,n,t))||(t.exports=r)}(Math)},function(t,n,e){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,n,e,r){void 0===r&&(r=e),Object.defineProperty(t,r,{enumerable:!0,get:function(){return n[e]}})}:function(t,n,e,r){void 0===r&&(r=e),t[r]=n[e]}),i=this&&this.__exportStar||function(t,n){for(var e in t)"default"===e||n.hasOwnProperty(e)||r(n,t,e)};Object.defineProperty(n,"__esModule",{value:!0}),i(e(108),n),i(e(82),n),i(e(84),n),i(e(83),n)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.drawTree=void 0;var r=e(40),i=e(115),o=e(85),u=e(81),a=e(82),c=e(83),f=e(84),s=e(72),l=e(111);n.drawTree=function(t,n,e){l.emptyChildren(t);var h=r.select(t),d=a.buildTree(n,t);document.getElementById("facet-tree-tooltip")||r.select("body").append("div").attr("id","facet-tree-tooltip").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px"),s.globalData.treeData=d,s.globalState.getValue().init?s.globalState.next({currentFacetId:-1,expandedFacetId:"-2,-2",init:!0}):(s.globalState.next({currentFacetId:-1,expandedFacetId:"-2,-2",init:!0}),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.currentFacetId})),i.distinctUntilChanged()).subscribe((function(t){e(t)})),s.globalState.pipe(i.debounce((function(){return o.interval(200)})),i.filter((function(t){return!u.isEqual(t,{currentFacetId:-1,expandedFacetId:"-2,-2",init:!0})})),i.map((function(t){return t.expandedFacetId})),i.filter((function(t){var n=t.split(","),e=n[0],r=n[1];return console.log(t),e!==r})),i.distinctUntilChanged()).subscribe((function(n){var e=n.split(","),r=e[0],i=e[1];if("-2"!==r&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0]){for(var o=document.getElementsByClassName(r);o.length;)o[0].parentNode.removeChild(o[0]);c.drawFacetPieChart(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===r}))[0],t)}if("-2"!==i&&s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0]){for(o=document.getElementsByClassName(i);o.length;)o[0].parentNode.removeChild(o[0]);f.drawFacetForceLayout(s.globalData.treeData.facetChart.filter((function(t){return t.facetId.toString()===i}))[0],t)}}))),h.append("g").selectAll("rect").data(d.branches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})),h.append("g").selectAll("rect").data(d.foldBranches).enter().append("rect").attr("y",(function(t){return t.y})).attr("x",(function(t){return t.x})).attr("height",(function(t){return t.height})).attr("width",(function(t){return t.width})).attr("fill",(function(t){return t.color})).attr("transform",(function(t){return t.transform})),h.append("g").selectAll("circle").data(d.leaves).enter().append("circle").attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("r",(function(t,n){return d.treeData[n].containChildrenFacet?0:1.5*t.r})).attr("fill",(function(t){return t.color})).style("cursor","pointer").on("click",(function(t,n){var e=s.globalState.getValue().expandedFacetId.split(","),r=(e[0],e[1]);s.globalState.next(Object.assign({},s.globalState.getValue(),{currentFacetId:d.branches[n].facetId,expandedFacetId:r+",-2"}))})),d.facetChart.forEach((function(n){c.drawFacetPieChart(n,t)}));var p=h.append("g").selectAll("text").data(d.texts).enter().append("text").attr("font-size",(function(t){return t.fontSize+"px"})).attr("x",(function(t){return t.x})).attr("y",(function(t){return t.y})).attr("fill","#fff");d.texts.forEach((function(t,n){r.select(p._groups[0][n]).selectAll("tspan").data(t.text.split("")).enter().append("tspan").attr("x",t.x).attr("dy","1.2em").text((function(t){return t}))})),h.append("g").append("text").attr("x",t.clientWidth/2-24*n.topicName.length/2).attr("y",t.clientHeight-10).text(n.topicName).attr("fill","#000").attr("font-size","24px")}},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.emptyChildren=void 0,n.emptyChildren=function(t){for(var n=t.childNodes;n.length>0;)t.removeChild(n[0])}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.drawCommunity=void 0;var r=e(40),i=e(55),o=e(54),u=e(71),a=[];for(var c in i.presetPalettes)a.push(i.presetPalettes[c].slice(0,10));n.drawCommunity=function(t,n,e){var i=t.topics,c=t.graph,f=t.topicId2Community,s=t.relationCrossCommunity,l=t.communityRelation,h=r.select(n),d=r.select("body").append("div").style("position","absolute").style("opacity",0).style("text-align","center").style("font-size","6px").style("background-color","#ffffb8").style("padding","1px 3px").style("top",0),p=h.append("defs");p.append("marker").attr("id","arrow").attr("markerUnits","strokeWidth").attr("markerWidth","6").attr("markerHeight","6").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto").append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill","#873800");for(var v=0;v<a.length;v++){p.append("marker").attr("id","arrow"+v).attr("markerUnits","strokeWidth").attr("markerWidth","8").attr("markerHeight","8").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto").append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill",a[v][9])}for(var y in c)c[y]=u.completeObj(c[y]);l=u.completeObj(l);for(var b=n.clientHeight<n.clientWidth?n.clientHeight/2:n.clientWidth/2,g=o.calcCircleLayout({x:b,y:b},b,l,void 0!==f[-1]?f[-1]:void 0),_=g.nodes,m=g.edges,x=(g.sequence,{}),w=0,M=_;w<M.length;w++){var S=M[w],k=o.calcCircleLayout({x:S.cx,y:S.cy},S.r,c[S.id],S.id===f[-1]?-1:void 0);x[S.id]=k.sequence}return h.append("g").attr("id","com2com").selectAll("path").data(m).enter().append("path").attr("d",(function(t){return u.link(t.path)})).attr("stroke","#873800").attr("stroke-width",4).attr("fill","none").style("cursor","pointer").style("visibility","visible").on("mouseover",(function(t){for(var n="",e=0,o=s;e<o.length;e++){var u=o[e];f[u[0]]===t.start&&f[u[1]]===t.end&&(n+=i[u[0]]+"->"+i[u[1]]+"\n")}d.transition().duration(200).style("opacity",.9),d.html(n.trim()).style("left",r.event.pageX+"px").style("top",r.event.pageY-28+"px")})).on("mouseout",(function(t){d.transition().duration(500).style("opacity",0)})).attr("marker-end","url(#arrow)"),h.append("g").attr("id","com").selectAll("circle").data(_).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return"com"+t.id})).attr("fill",(function(t,n){return a[n%a.length][1]})),h.append("g").attr("id","comText").selectAll("text").data(_).enter().append("text").attr("font-size",(function(t){var n=(2*t.r-4)/u.judgementStringLengthWithChinese(i[x[t.id][0]]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/u.judgementStringLengthWithChinese(i[x[t.id][0]]);return n>24?t.cx-12*u.judgementStringLengthWithChinese(i[x[t.id][0]]):t.cx-n/2*u.judgementStringLengthWithChinese(i[x[t.id][0]])})).attr("y",(function(t,n){var e=(2*t.r-4)/u.judgementStringLengthWithChinese(i[x[t.id][0]]);return e>24?t.cy+12:t.cy+e/2})).text((function(t){return i[x[t.id][0]]})).attr("fill","#000000").attr("cursor","pointer"),h.select("#com").selectAll("circle").on("click",(function(t){return e(t)})),h.select("#comText").selectAll("text").on("click",(function(t){return e(t)})),x}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.drawTopic=void 0;var r=e(40),i=e(55),o=e(54),u=e(71),a=[];for(var c in i.presetPalettes)a.push(i.presetPalettes[c].slice(0,10));n.drawTopic=function(t,n,e,i){var c=n.topics,f=n.graph,s=n.topicId2Community,l=n.communityRelation,h=r.select(e),d=h.append("defs");d.append("marker").attr("id","arrow").attr("markerUnits","strokeWidth").attr("markerWidth","6").attr("markerHeight","6").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto").append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill","#873800");for(var p=0;p<a.length;p++){d.append("marker").attr("id","arrow"+p).attr("markerUnits","strokeWidth").attr("markerWidth","8").attr("markerHeight","8").attr("viewBox","0 0 12 12").attr("refX","6").attr("refY","6").attr("orient","auto").append("path").attr("d","M2,2 L10,6 L2,10 L6,6 L2,2").attr("fill",a[p][9])}for(var v in f)f[v]=u.completeObj(f[v]);l=u.completeObj(l);for(var y=e.clientHeight<e.clientWidth?e.clientHeight/2:e.clientWidth/2,b=o.calcCircleLayout({x:y,y:y},y,l,void 0!==s[-1]?s[-1]:void 0),g=b.nodes,_=b.sequence,m={},x=0,w=g;x<w.length;x++){var M=w[x],S=o.calcCircleLayout({x:M.cx,y:M.cy},M.r,f[M.id],M.id===s[-1]?-1:void 0);m[M.id]=S.sequence}!function(t){var n=o.calcCircleLayoutSecondLayer1({x:y,y:y},y,l,_,t),e=n.nodes;n.edges;h.append("g").attr("id","#com").selectAll("circle").data(e).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("fill",a[_.indexOf(t)%a.length][1]).attr("display","inline");var s={},d=e.filter((function(n){return n.id===t}))[0];if(console.log(f),console.log(Object.keys(f[d.id])[0]),console.log(c[Object.keys(f[d.id])[0]]),1===Object.keys(f[d.id]).length){h.append("g").attr("id",d.id+"text").append("text").attr("font-size","50px").data(e).attr("x",(function(t){return t.cx-24*u.judgementStringLengthWithChinese(c[Object.keys(f[d.id])[0]])})).attr("y",(function(t){return t.cy-12})).text(c[Object.keys(f[d.id])[0]]).attr("fill","#000000").attr("display","inline");var p=document.getElementById(d.id+"text");r.select(p).selectAll("text").on("click",(function(t){return i(Object.keys(f[d.id])[0],c[Object.keys(f[d.id])[0]])}))}else{for(var v=o.calcCircleLayoutWithoutReduceCrossing({x:d.cx,y:d.cy},d.r,f[d.id],m[d.id],void 0),b=0,g=v.nodes;b<g.length;b++){var x=g[b];s[x.id]=x}h.append("g").attr("id",d.id+"nodes").selectAll("circle").data(v.nodes).enter().append("circle").attr("r",(function(t){return t.r})).attr("cx",(function(t){return t.cx})).attr("cy",(function(t){return t.cy})).attr("id",(function(t){return t.id})).attr("display","inline").attr("fill",a[_.indexOf(d.id)%a.length][6]);var w=document.getElementById(d.id+"nodes");r.select(w).selectAll("circle").on("click",(function(t){return i(t.id,c[t.id])})),h.append("g").attr("id",d.id+"edges").selectAll("path").data(v.edges).enter().append("path").attr("d",(function(t){return u.link(t.path)})).attr("stroke",a[_.indexOf(d.id)%a.length][8]).attr("stroke-width",2).attr("fill","none").attr("marker-end","url(#arrow"+_.indexOf(d.id)+")").style("visibility","visible").attr("display","inline"),h.append("g").attr("id",d.id+"text").selectAll("text").data(v.nodes).enter().append("text").attr("font-size",(function(t){var n=(2*t.r-4)/u.judgementStringLengthWithChinese(c[t.id]);return n>24?24:n})).attr("x",(function(t){var n=(2*t.r-4)/u.judgementStringLengthWithChinese(c[t.id]);return t.cx-u.judgementStringLengthWithChinese(c[t.id])*(n>24?12:n/2)})).attr("y",(function(t){return(2*t.r-4)/u.judgementStringLengthWithChinese(c[t.id])>24?t.cy+12:t.cy+(t.r-2)/u.judgementStringLengthWithChinese(c[t.id])})).text((function(t){return c[t.id]})).attr("fill","#ffffff").attr("display","inline");p=document.getElementById(d.id+"text");r.select(p).selectAll("text").on("click",(function(t){return i(t.id,c[t.id])}))}var M,S;M=o.calNodeWithSelectedInComCrossCom(t,l,f),S=o.calNodeWithSelectedOutComCrossCom(t,l,f)}(t)}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.gaozhongshuxue=void 0,n.gaozhongshuxue={topics:{105272:"变化率与导数",105098:"定积分",105284:"空间直角坐标系",105282:"空间几何体",105294:"随机抽样",105296:"变量相关性",105295:"用样本估计总体",105301:"排列",105302:"组合",105299:"计数原理",105304:"事件与概率",105298:"独立性检验",105315:"排序不等式",105316:"贝努利不等式",105307:"模拟方法",105288:"圆",105290:"椭圆",105303:"二项式定理",105305:"古典概型",105308:"随机变量",105275:"平面向量",1053353:"条件概率",105270:"三角恒等变换",105310:"极坐标系",105311:"参数方程",105293:"直线与圆锥曲线",105260:"充分条件与必要条件",105281:"推理与证明",105279:"复数",105291:"双曲线",105292:"抛物线",105289:"直线",105314:"柯西不等式",105277:"不等关系与不等式",105273:"导数应用",105266:"指数与指数函数",105267:"对数与对数函数",105312:"绝对值不等式",105264:"一次函数",105265:"二次函数",105259:"命题",105261:"量词",105313:"基本不等式",105283:"点、线、面位置关系",105285:"空间向量与立体几何",105269:"三角函数",105271:"解三角形",105262:"逻辑联结词",105258:"集合","-1":"(开始)"},resultRelations:{105272:[105098,105273],105284:[105282],105294:[105296,105295],105301:[105302],105299:[105304,105301],105295:[105298],105315:[105316],105304:[105307,105305,1053353],105288:[105290],105302:[105303],105305:[105308],105275:[105284,105279,105314],105270:[105310,105311,105271],105293:[105310],105260:[105281],105291:[105293],105292:[105293],105290:[105293],105289:[105291,105292,105288],105277:[105315,105314,105312,105313],105266:[105267],105264:[105265],105259:[105261,105260,105262],105283:[105285],105282:[105283],105269:[105270],105258:[105259],"-1":[105272,105294,105299,105275,105289,105277,105266,105264,105269,105258]},graph:{0:{105272:[105098,105273]},1:{105284:[105282],105283:[105285],105282:[105283]},2:{105294:[105296,105295],105295:[105298]},3:{105301:[105302],105299:[105301],105302:[105303]},5:{105315:[105316],105275:[105279,105314],105277:[105315,105314,105312,105313],105266:[105267],105264:[105265],"-1":[105275,105277,105266,105264,105269]},4:{105304:[105307,105305,1053353],105305:[105308]},6:{105288:[105290],105291:[105293],105292:[105293],105290:[105293],105289:[105291,105292,105288]},7:{105270:[105310,105311,105271]},8:{105260:[105281],105259:[105261,105260,105262],105258:[105259]}},topicId2Community:{105272:0,105098:0,105273:0,105284:1,105282:1,105283:1,105285:1,105294:2,105296:2,105295:2,105298:2,105301:3,105302:3,105299:3,105303:3,105304:4,105307:4,105305:4,1053353:4,105308:4,105315:5,105316:5,105275:5,105279:5,105314:5,105277:5,105312:5,105313:5,105266:5,105267:5,105264:5,105265:5,105269:5,"-1":5,105288:6,105290:6,105293:6,105291:6,105292:6,105289:6,105270:7,105310:7,105311:7,105271:7,105260:8,105281:8,105259:8,105261:8,105262:8,105258:8},relationCrossCommunity:[[105299,105304],[105275,105284],[105293,105310],[105269,105270],[-1,105272],[-1,105294],[-1,105299],[-1,105289],[-1,105258]],communityRelation:{3:[4],5:[1,7,0,2,3,6,8],6:[7]}}},function(t,n,e){"use strict";e.r(n),e.d(n,"audit",(function(){return o})),e.d(n,"auditTime",(function(){return s})),e.d(n,"buffer",(function(){return l})),e.d(n,"bufferCount",(function(){return v})),e.d(n,"bufferTime",(function(){return m})),e.d(n,"bufferToggle",(function(){return N})),e.d(n,"bufferWhen",(function(){return I})),e.d(n,"catchError",(function(){return L})),e.d(n,"combineAll",(function(){return D})),e.d(n,"combineLatest",(function(){return V})),e.d(n,"concat",(function(){return H})),e.d(n,"concatAll",(function(){return Y.a})),e.d(n,"concatMap",(function(){return X})),e.d(n,"concatMapTo",(function(){return G})),e.d(n,"count",(function(){return Z})),e.d(n,"debounce",(function(){return Q})),e.d(n,"debounceTime",(function(){return et})),e.d(n,"defaultIfEmpty",(function(){return ut})),e.d(n,"delay",(function(){return lt})),e.d(n,"delayWhen",(function(){return yt})),e.d(n,"dematerialize",(function(){return xt})),e.d(n,"distinct",(function(){return St})),e.d(n,"distinctUntilChanged",(function(){return Ct})),e.d(n,"distinctUntilKeyChanged",(function(){return Nt})),e.d(n,"elementAt",(function(){return qt})),e.d(n,"endWith",(function(){return Wt})),e.d(n,"every",(function(){return Ht})),e.d(n,"exhaust",(function(){return Xt})),e.d(n,"exhaustMap",(function(){return Jt})),e.d(n,"expand",(function(){return nn})),e.d(n,"filter",(function(){return jt.a})),e.d(n,"finalize",(function(){return on})),e.d(n,"find",(function(){return cn})),e.d(n,"findIndex",(function(){return ln})),e.d(n,"first",(function(){return dn})),e.d(n,"groupBy",(function(){return pn.b})),e.d(n,"ignoreElements",(function(){return vn})),e.d(n,"isEmpty",(function(){return gn})),e.d(n,"last",(function(){return Sn})),e.d(n,"map",(function(){return Kt.a})),e.d(n,"mapTo",(function(){return kn})),e.d(n,"materialize",(function(){return En})),e.d(n,"max",(function(){return Ln})),e.d(n,"merge",(function(){return Fn})),e.d(n,"mergeAll",(function(){return Bn.a})),e.d(n,"mergeMap",(function(){return $.b})),e.d(n,"flatMap",(function(){return $.a})),e.d(n,"mergeMapTo",(function(){return Dn})),e.d(n,"mergeScan",(function(){return Un})),e.d(n,"min",(function(){return Wn})),e.d(n,"multicast",(function(){return Yn})),e.d(n,"observeOn",(function(){return Xn.b})),e.d(n,"onErrorResumeNext",(function(){return Gn})),e.d(n,"pairwise",(function(){return Jn})),e.d(n,"partition",(function(){return ee})),e.d(n,"pluck",(function(){return re})),e.d(n,"publish",(function(){return ue})),e.d(n,"publishBehavior",(function(){return ce})),e.d(n,"publishLast",(function(){return se})),e.d(n,"publishReplay",(function(){return he})),e.d(n,"race",(function(){return pe})),e.d(n,"reduce",(function(){return Rn})),e.d(n,"repeat",(function(){return ve})),e.d(n,"repeatWhen",(function(){return ge})),e.d(n,"retry",(function(){return xe})),e.d(n,"retryWhen",(function(){return Se})),e.d(n,"refCount",(function(){return Ce.a})),e.d(n,"sample",(function(){return Ee})),e.d(n,"sampleTime",(function(){return Oe})),e.d(n,"scan",(function(){return On})),e.d(n,"sequenceEqual",(function(){return Re})),e.d(n,"share",(function(){return De})),e.d(n,"shareReplay",(function(){return Ue})),e.d(n,"single",(function(){return qe})),e.d(n,"skip",(function(){return He})),e.d(n,"skipLast",(function(){return Xe})),e.d(n,"skipUntil",(function(){return Ke})),e.d(n,"skipWhile",(function(){return tr})),e.d(n,"startWith",(function(){return rr})),e.d(n,"subscribeOn",(function(){return ar})),e.d(n,"switchAll",(function(){return hr})),e.d(n,"switchMap",(function(){return fr})),e.d(n,"switchMapTo",(function(){return dr})),e.d(n,"take",(function(){return Bt})),e.d(n,"takeLast",(function(){return xn})),e.d(n,"takeUntil",(function(){return pr})),e.d(n,"takeWhile",(function(){return br})),e.d(n,"tap",(function(){return wr})),e.d(n,"throttle",(function(){return Ar})),e.d(n,"throttleTime",(function(){return Tr})),e.d(n,"throwIfEmpty",(function(){return Pt})),e.d(n,"timeInterval",(function(){return Pr})),e.d(n,"timeout",(function(){return Ur})),e.d(n,"timeoutWith",(function(){return zr})),e.d(n,"timestamp",(function(){return qr})),e.d(n,"toArray",(function(){return Hr})),e.d(n,"window",(function(){return Yr})),e.d(n,"windowCount",(function(){return Gr})),e.d(n,"windowTime",(function(){return Jr})),e.d(n,"windowToggle",(function(){return oi})),e.d(n,"windowWhen",(function(){return ci})),e.d(n,"withLatestFrom",(function(){return li})),e.d(n,"zip",(function(){return vi})),e.d(n,"zipAll",(function(){return yi}));var r=e(0),i=e(2);function o(t){return function(n){return n.lift(new u(t))}}var u=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new a(t,this.durationSelector))},t}(),a=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r}return r.a(n,t),n.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var n=void 0;try{n=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var e=Object(i.c)(n,new i.a(this));!e||e.closed?this.clearThrottle():this.add(this.throttled=e)}},n.prototype.clearThrottle=function(){var t=this.value,n=this.hasValue,e=this.throttled;e&&(this.remove(e),this.throttled=void 0,e.unsubscribe()),n&&(this.value=void 0,this.hasValue=!1,this.destination.next(t))},n.prototype.notifyNext=function(){this.clearThrottle()},n.prototype.notifyComplete=function(){this.clearThrottle()},n}(i.b),c=e(6),f=e(57);function s(t,n){return void 0===n&&(n=c.a),o((function(){return Object(f.a)(t,n)}))}function l(t){return function(n){return n.lift(new h(t))}}var h=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,n){return n.subscribe(new d(t,this.closingNotifier))},t}(),d=function(t){function n(n,e){var r=t.call(this,n)||this;return r.buffer=[],r.add(Object(i.c)(e,new i.a(r))),r}return r.a(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype.notifyNext=function(){var t=this.buffer;this.buffer=[],this.destination.next(t)},n}(i.b),p=e(1);function v(t,n){return void 0===n&&(n=null),function(e){return e.lift(new y(t,n))}}var y=function(){function t(t,n){this.bufferSize=t,this.startBufferEvery=n,this.subscriberClass=n&&t!==n?g:b}return t.prototype.call=function(t,n){return n.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),b=function(t){function n(n,e){var r=t.call(this,n)||this;return r.bufferSize=e,r.buffer=[],r}return r.a(n,t),n.prototype._next=function(t){var n=this.buffer;n.push(t),n.length==this.bufferSize&&(this.destination.next(n),this.buffer=[])},n.prototype._complete=function(){var n=this.buffer;n.length>0&&this.destination.next(n),t.prototype._complete.call(this)},n}(p.a),g=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.bufferSize=e,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.a(n,t),n.prototype._next=function(t){var n=this.bufferSize,e=this.startBufferEvery,r=this.buffers,i=this.count;this.count++,i%e==0&&r.push([]);for(var o=r.length;o--;){var u=r[o];u.push(t),u.length===n&&(r.splice(o,1),this.destination.next(u))}},n.prototype._complete=function(){for(var n=this.buffers,e=this.destination;n.length>0;){var r=n.shift();r.length>0&&e.next(r)}t.prototype._complete.call(this)},n}(p.a),_=e(9);function m(t){var n=arguments.length,e=c.a;Object(_.a)(arguments[arguments.length-1])&&(e=arguments[arguments.length-1],n--);var r=null;n>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return n>=3&&(i=arguments[2]),function(n){return n.lift(new x(t,r,i,e))}}var x=function(){function t(t,n,e,r){this.bufferTimeSpan=t,this.bufferCreationInterval=n,this.maxBufferSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new M(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),w=function(){return function(){this.buffer=[]}}(),M=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.bufferTimeSpan=e,u.bufferCreationInterval=r,u.maxBufferSize=i,u.scheduler=o,u.contexts=[];var a=u.openContext();if(u.timespanOnly=null==r||r<0,u.timespanOnly){var c={subscriber:u,context:a,bufferTimeSpan:e};u.add(a.closeAction=o.schedule(S,e,c))}else{var f={subscriber:u,context:a},s={bufferTimeSpan:e,bufferCreationInterval:r,subscriber:u,scheduler:o};u.add(a.closeAction=o.schedule(A,e,f)),u.add(o.schedule(k,r,s))}return u}return r.a(n,t),n.prototype._next=function(t){for(var n,e=this.contexts,r=e.length,i=0;i<r;i++){var o=e[i],u=o.buffer;u.push(t),u.length==this.maxBufferSize&&(n=o)}n&&this.onBufferFull(n)},n.prototype._error=function(n){this.contexts.length=0,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts,e=this.destination;n.length>0;){var r=n.shift();e.next(r.buffer)}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.contexts=null},n.prototype.onBufferFull=function(t){this.closeContext(t);var n=t.closeAction;if(n.unsubscribe(),this.remove(n),!this.closed&&this.timespanOnly){t=this.openContext();var e=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:e};this.add(t.closeAction=this.scheduler.schedule(S,e,r))}},n.prototype.openContext=function(){var t=new w;return this.contexts.push(t),t},n.prototype.closeContext=function(t){this.destination.next(t.buffer);var n=this.contexts;(n?n.indexOf(t):-1)>=0&&n.splice(n.indexOf(t),1)},n}(p.a);function S(t){var n=t.subscriber,e=t.context;e&&n.closeContext(e),n.closed||(t.context=n.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function k(t){var n=t.bufferCreationInterval,e=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(A,e,{subscriber:r,context:o})),this.schedule(t,n))}function A(t){var n=t.subscriber,e=t.context;n.closeContext(e)}var C=e(4),E=e(12),T=e(15);function N(t,n){return function(e){return e.lift(new O(t,n))}}var O=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new j(t,this.openings,this.closingSelector))},t}(),j=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.closingSelector=r,i.contexts=[],i.add(Object(E.a)(i,e)),i}return r.a(n,t),n.prototype._next=function(t){for(var n=this.contexts,e=n.length,r=0;r<e;r++)n[r].buffer.push(t)},n.prototype._error=function(n){for(var e=this.contexts;e.length>0;){var r=e.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,n)},n.prototype._complete=function(){for(var n=this.contexts;n.length>0;){var e=n.shift();this.destination.next(e.buffer),e.subscription.unsubscribe(),e.buffer=null,e.subscription=null}this.contexts=null,t.prototype._complete.call(this)},n.prototype.notifyNext=function(t,n){t?this.closeBuffer(t):this.openBuffer(n)},n.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},n.prototype.openBuffer=function(t){try{var n=this.closingSelector.call(this,t);n&&this.trySubscribe(n)}catch(t){this._error(t)}},n.prototype.closeBuffer=function(t){var n=this.contexts;if(n&&t){var e=t.buffer,r=t.subscription;this.destination.next(e),n.splice(n.indexOf(t),1),this.remove(r),r.unsubscribe()}},n.prototype.trySubscribe=function(t){var n=this.contexts,e=new C.a,r={buffer:[],subscription:e};n.push(r);var i=Object(E.a)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),e.add(i))},n}(T.a);function I(t){return function(n){return n.lift(new P(t))}}var P=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new R(t,this.closingSelector))},t}(),R=function(t){function n(n,e){var r=t.call(this,n)||this;return r.closingSelector=e,r.subscribing=!1,r.openBuffer(),r}return r.a(n,t),n.prototype._next=function(t){this.buffer.push(t)},n.prototype._complete=function(){var n=this.buffer;n&&this.destination.next(n),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){this.buffer=void 0,this.subscribing=!1},n.prototype.notifyNext=function(){this.openBuffer()},n.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},n.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var n,e=this.buffer;this.buffer&&this.destination.next(e),this.buffer=[];try{n=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new C.a,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add(Object(i.c)(n,new i.a(this))),this.subscribing=!1},n}(i.b);function L(t){return function(n){var e=new z(t),r=n.lift(e);return e.caught=r}}var z=function(){function t(t){this.selector=t}return t.prototype.call=function(t,n){return n.subscribe(new F(t,this.selector,this.caught))},t}(),F=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.selector=e,i.caught=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=void 0;try{e=this.selector(n,this.caught)}catch(n){return void t.prototype.error.call(this,n)}this._unsubscribeAndRecycle();var r=new i.a(this);this.add(r);var o=Object(i.c)(e,r);o!==r&&this.add(o)}},n}(i.b),B=e(41);function D(t){return function(n){return n.lift(new B.a(t))}}var U=e(7),q=e(11);function V(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=null;return"function"==typeof t[t.length-1]&&(e=t.pop()),1===t.length&&Object(U.a)(t[0])&&(t=t[0].slice()),function(n){return n.lift.call(Object(q.a)([n].concat(t)),new B.a(e))}}var W=e(32);function H(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(W.a.apply(void 0,[n].concat(t)))}}var Y=e(58),$=e(25);function X(t,n){return Object($.b)(t,n,1)}function G(t,n){return X((function(){return t}),n)}function Z(t){return function(n){return n.lift(new K(t,n))}}var K=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new J(t,this.predicate,this.source))},t}(),J=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.count=0,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},n.prototype._tryPredicate=function(t){var n;try{n=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n&&this.count++},n.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},n}(p.a);function Q(t){return function(n){return n.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new nt(t,this.durationSelector))},t}(),nt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.durationSelector=e,r.hasValue=!1,r}return r.a(n,t),n.prototype._next=function(t){try{var n=this.durationSelector.call(this,t);n&&this._tryNext(t,n)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.emitValue(),this.destination.complete()},n.prototype._tryNext=function(t,n){var e=this.durationSubscription;this.value=t,this.hasValue=!0,e&&(e.unsubscribe(),this.remove(e)),(e=Object(i.c)(n,new i.a(this)))&&!e.closed&&this.add(this.durationSubscription=e)},n.prototype.notifyNext=function(){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){if(this.hasValue){var n=this.value,e=this.durationSubscription;e&&(this.durationSubscription=void 0,e.unsubscribe(),this.remove(e)),this.value=void 0,this.hasValue=!1,t.prototype._next.call(this,n)}},n}(i.b);function et(t,n){return void 0===n&&(n=c.a),function(e){return e.lift(new rt(t,n))}}var rt=function(){function t(t,n){this.dueTime=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.dueTime=e,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.a(n,t),n.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},n.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},n.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},n.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},n}(p.a);function ot(t){t.debouncedNext()}function ut(t){return void 0===t&&(t=null),function(n){return n.lift(new at(t))}}var at=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,n){return n.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function n(n,e){var r=t.call(this,n)||this;return r.defaultValue=e,r.isEmpty=!0,r}return r.a(n,t),n.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},n.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},n}(p.a);function ft(t){return t instanceof Date&&!isNaN(+t)}var st=e(17);function lt(t,n){void 0===n&&(n=c.a);var e=ft(t)?+t-n.now():Math.abs(t);return function(t){return t.lift(new ht(e,n))}}var ht=function(){function t(t,n){this.delay=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new dt(t,this.delay,this.scheduler))},t}(),dt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.delay=e,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.a(n,t),n.dispatch=function(t){for(var n=t.source,e=n.queue,r=t.scheduler,i=t.destination;e.length>0&&e[0].time-r.now()<=0;)e.shift().notification.observe(i);if(e.length>0){var o=Math.max(0,e[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),n.active=!1},n.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(n.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},n.prototype.scheduleNotification=function(t){if(!0!==this.errored){var n=this.scheduler,e=new pt(n.now()+this.delay,t);this.queue.push(e),!1===this.active&&this._schedule(n)}},n.prototype._next=function(t){this.scheduleNotification(st.a.createNext(t))},n.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.scheduleNotification(st.a.createComplete()),this.unsubscribe()},n}(p.a),pt=function(){return function(t,n){this.time=t,this.notification=n}}(),vt=e(3);function yt(t,n){return n?function(e){return new _t(e,n).lift(new bt(t))}:function(n){return n.lift(new bt(t))}}var bt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new gt(t,this.delayDurationSelector))},t}(),gt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.delayDurationSelector=e,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},n.prototype.notifyError=function(t,n){this._error(t)},n.prototype.notifyComplete=function(t){var n=this.removeSubscription(t);n&&this.destination.next(n),this.tryComplete()},n.prototype._next=function(t){var n=this.index++;try{var e=this.delayDurationSelector(t,n);e&&this.tryDelay(e,t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},n.prototype.removeSubscription=function(t){t.unsubscribe();var n=this.delayNotifierSubscriptions.indexOf(t);return-1!==n&&this.delayNotifierSubscriptions.splice(n,1),t.outerValue},n.prototype.tryDelay=function(t,n){var e=Object(E.a)(this,t,n);e&&!e.closed&&(this.destination.add(e),this.delayNotifierSubscriptions.push(e))},n.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},n}(T.a),_t=function(t){function n(n,e){var r=t.call(this)||this;return r.source=n,r.subscriptionDelay=e,r}return r.a(n,t),n.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new mt(t,this.source))},n}(vt.a),mt=function(t){function n(n,e){var r=t.call(this)||this;return r.parent=n,r.source=e,r.sourceSubscribed=!1,r}return r.a(n,t),n.prototype._next=function(t){this.subscribeToSource()},n.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},n.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},n.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},n}(p.a);function xt(){return function(t){return t.lift(new wt)}}var wt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Mt(t))},t}(),Mt=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype._next=function(t){t.observe(this.destination)},n}(p.a);function St(t,n){return function(e){return e.lift(new kt(t,n))}}var kt=function(){function t(t,n){this.keySelector=t,this.flushes=n}return t.prototype.call=function(t,n){return n.subscribe(new At(t,this.keySelector,this.flushes))},t}(),At=function(t){function n(n,e,r){var o=t.call(this,n)||this;return o.keySelector=e,o.values=new Set,r&&o.add(Object(i.c)(r,new i.a(o))),o}return r.a(n,t),n.prototype.notifyNext=function(){this.values.clear()},n.prototype.notifyError=function(t){this._error(t)},n.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},n.prototype._useKeySelector=function(t){var n,e=this.destination;try{n=this.keySelector(t)}catch(t){return void e.error(t)}this._finalizeNext(n,t)},n.prototype._finalizeNext=function(t,n){var e=this.values;e.has(t)||(e.add(t),this.destination.next(n))},n}(i.b);function Ct(t,n){return function(e){return e.lift(new Et(t,n))}}var Et=function(){function t(t,n){this.compare=t,this.keySelector=n}return t.prototype.call=function(t,n){return n.subscribe(new Tt(t,this.compare,this.keySelector))},t}(),Tt=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof e&&(i.compare=e),i}return r.a(n,t),n.prototype.compare=function(t,n){return t===n},n.prototype._next=function(t){var n;try{var e=this.keySelector;n=e?e(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,n)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=n,this.destination.next(t))},n}(p.a);function Nt(t,n){return Ct((function(e,r){return n?n(e[t],r[t]):e[t]===r[t]}))}var Ot=e(23),jt=e(16),It=e(26);function Pt(t){return void 0===t&&(t=zt),function(n){return n.lift(new Rt(t))}}var Rt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,n){return n.subscribe(new Lt(t,this.errorFactory))},t}(),Lt=function(t){function n(n,e){var r=t.call(this,n)||this;return r.errorFactory=e,r.hasValue=!1,r}return r.a(n,t),n.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},n.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(n){t=n}this.destination.error(t)},n}(p.a);function zt(){return new It.a}var Ft=e(10);function Bt(t){return function(n){return 0===t?Object(Ft.b)():n.lift(new Dt(t))}}var Dt=function(){function t(t){if(this.total=t,this.total<0)throw new Ot.a}return t.prototype.call=function(t,n){return n.subscribe(new Ut(t,this.total))},t}(),Ut=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.total,e=++this.count;e<=n&&(this.destination.next(t),e===n&&(this.destination.complete(),this.unsubscribe()))},n}(p.a);function qt(t,n){if(t<0)throw new Ot.a;var e=arguments.length>=2;return function(r){return r.pipe(Object(jt.a)((function(n,e){return e===t})),Bt(1),e?ut(n):Pt((function(){return new Ot.a})))}}var Vt=e(35);function Wt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return Object(W.a)(n,Vt.a.apply(void 0,t))}}function Ht(t,n){return function(e){return e.lift(new Yt(t,n,e))}}var Yt=function(){function t(t,n,e){this.predicate=t,this.thisArg=n,this.source=e}return t.prototype.call=function(t,n){return n.subscribe(new $t(t,this.predicate,this.thisArg,this.source))},t}(),$t=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.predicate=e,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.a(n,t),n.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},n.prototype._next=function(t){var n=!1;try{n=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}n||this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(p.a);function Xt(){return function(t){return t.lift(new Gt)}}var Gt=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Zt(t))},t}(),Zt=function(t){function n(n){var e=t.call(this,n)||this;return e.hasCompleted=!1,e.hasSubscription=!1,e}return r.a(n,t),n.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add(Object(i.c)(t,new i.a(this))))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},n.prototype.notifyComplete=function(){this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.b),Kt=e(8);function Jt(t,n){return n?function(e){return e.pipe(Jt((function(e,r){return Object(q.a)(t(e,r)).pipe(Object(Kt.a)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new Qt(t))}}var Qt=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new tn(t,this.project))},t}(),tn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},n.prototype.tryNext=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(n)},n.prototype._innerSub=function(t){var n=new i.a(this),e=this.destination;e.add(n);var r=Object(i.c)(t,n);r!==n&&e.add(r)},n.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t){this.destination.next(t)},n.prototype.notifyError=function(t){this.destination.error(t)},n.prototype.notifyComplete=function(){this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},n}(i.b);function nn(t,n,e){return void 0===n&&(n=Number.POSITIVE_INFINITY),n=(n||0)<1?Number.POSITIVE_INFINITY:n,function(r){return r.lift(new en(t,n,e))}}var en=function(){function t(t,n,e){this.project=t,this.concurrent=n,this.scheduler=e}return t.prototype.call=function(t,n){return n.subscribe(new rn(t,this.project,this.concurrent,this.scheduler))},t}(),rn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.project=e,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.a(n,t),n.dispatch=function(t){var n=t.subscriber,e=t.result,r=t.value,i=t.index;n.subscribeToProjection(e,r,i)},n.prototype._next=function(t){var e=this.destination;if(e.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){e.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(n.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){e.error(t)}}else this.buffer.push(t)}},n.prototype.subscribeToProjection=function(t,n,e){this.active++,this.destination.add(Object(i.c)(t,new i.a(this)))},n.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},n.prototype.notifyNext=function(t){this._next(t)},n.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t&&t.length>0&&this._next(t.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},n}(i.b);function on(t){return function(n){return n.lift(new un(t))}}var un=function(){function t(t){this.callback=t}return t.prototype.call=function(t,n){return n.subscribe(new an(t,this.callback))},t}(),an=function(t){function n(n,e){var r=t.call(this,n)||this;return r.add(new C.a(e)),r}return r.a(n,t),n}(p.a);function cn(t,n){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(e){return e.lift(new fn(t,e,!1,n))}}var fn=function(){function t(t,n,e,r){this.predicate=t,this.source=n,this.yieldIndex=e,this.thisArg=r}return t.prototype.call=function(t,n){return n.subscribe(new sn(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),sn=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.predicate=e,u.source=r,u.yieldIndex=i,u.thisArg=o,u.index=0,u}return r.a(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete(),this.unsubscribe()},n.prototype._next=function(t){var n=this.predicate,e=this.thisArg,r=this.index++;try{n.call(e||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},n}(p.a);function ln(t,n){return function(e){return e.lift(new fn(t,e,!0,n))}}var hn=e(14);function dn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?Object(jt.a)((function(n,e){return t(n,e,r)})):hn.a,Bt(1),e?ut(n):Pt((function(){return new It.a})))}}var pn=e(56);function vn(){return function(t){return t.lift(new yn)}}var yn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new bn(t))},t}(),bn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.a(n,t),n.prototype._next=function(t){},n}(p.a);function gn(){return function(t){return t.lift(new _n)}}var _n=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new mn(t))},t}(),mn=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype.notifyComplete=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype._next=function(t){this.notifyComplete(!1)},n.prototype._complete=function(){this.notifyComplete(!0)},n}(p.a);function xn(t){return function(n){return 0===t?Object(Ft.b)():n.lift(new wn(t))}}var wn=function(){function t(t){if(this.total=t,this.total<0)throw new Ot.a}return t.prototype.call=function(t,n){return n.subscribe(new Mn(t,this.total))},t}(),Mn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.ring=new Array,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.ring,e=this.total,r=this.count++;n.length<e?n.push(t):n[r%e]=t},n.prototype._complete=function(){var t=this.destination,n=this.count;if(n>0)for(var e=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<e;i++){var o=n++%e;t.next(r[o])}t.complete()},n}(p.a);function Sn(t,n){var e=arguments.length>=2;return function(r){return r.pipe(t?Object(jt.a)((function(n,e){return t(n,e,r)})):hn.a,xn(1),e?ut(n):Pt((function(){return new It.a})))}}function kn(t){return function(n){return n.lift(new An(t))}}var An=function(){function t(t){this.value=t}return t.prototype.call=function(t,n){return n.subscribe(new Cn(t,this.value))},t}(),Cn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.value=e,r}return r.a(n,t),n.prototype._next=function(t){this.destination.next(this.value)},n}(p.a);function En(){return function(t){return t.lift(new Tn)}}var Tn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new Nn(t))},t}(),Nn=function(t){function n(n){return t.call(this,n)||this}return r.a(n,t),n.prototype._next=function(t){this.destination.next(st.a.createNext(t))},n.prototype._error=function(t){var n=this.destination;n.next(st.a.createError(t)),n.complete()},n.prototype._complete=function(){var t=this.destination;t.next(st.a.createComplete()),t.complete()},n}(p.a);function On(t,n){var e=!1;return arguments.length>=2&&(e=!0),function(r){return r.lift(new jn(t,n,e))}}var jn=function(){function t(t,n,e){void 0===e&&(e=!1),this.accumulator=t,this.seed=n,this.hasSeed=e}return t.prototype.call=function(t,n){return n.subscribe(new In(t,this.accumulator,this.seed,this.hasSeed))},t}(),In=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o._seed=r,o.hasSeed=i,o.index=0,o}return r.a(n,t),Object.defineProperty(n.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),n.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},n.prototype._tryNext=function(t){var n,e=this.index++;try{n=this.accumulator(this.seed,t,e)}catch(t){this.destination.error(t)}this.seed=n,this.destination.next(n)},n}(p.a),Pn=e(36);function Rn(t,n){return arguments.length>=2?function(e){return Object(Pn.a)(On(t,n),xn(1),ut(n))(e)}:function(n){return Object(Pn.a)(On((function(n,e,r){return t(n,e,r+1)})),xn(1))(n)}}function Ln(t){return Rn("function"==typeof t?function(n,e){return t(n,e)>0?n:e}:function(t,n){return t>n?t:n})}var zn=e(59);function Fn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(zn.a.apply(void 0,[n].concat(t)))}}var Bn=e(42);function Dn(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),"function"==typeof n?Object($.b)((function(){return t}),n,e):("number"==typeof n&&(e=n),Object($.b)((function(){return t}),e))}function Un(t,n,e){return void 0===e&&(e=Number.POSITIVE_INFINITY),function(r){return r.lift(new qn(t,n,e))}}var qn=function(){function t(t,n,e){this.accumulator=t,this.seed=n,this.concurrent=e}return t.prototype.call=function(t,n){return n.subscribe(new Vn(t,this.accumulator,this.seed,this.concurrent))},t}(),Vn=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.accumulator=e,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.a(n,t),n.prototype._next=function(t){if(this.active<this.concurrent){var n=this.index++,e=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,n)}catch(t){return e.error(t)}this.active++,this._innerSub(r)}else this.buffer.push(t)},n.prototype._innerSub=function(t){var n=new i.a(this),e=this.destination;e.add(n);var r=Object(i.c)(t,n);r!==n&&e.add(r)},n.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},n.prototype.notifyNext=function(t){var n=this.destination;this.acc=t,this.hasValue=!0,n.next(t)},n.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},n}(i.b);function Wn(t){return Rn("function"==typeof t?function(n,e){return t(n,e)<0?n:e}:function(t,n){return t<n?t:n})}var Hn=e(60);function Yn(t,n){return function(e){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof n)return e.lift(new $n(r,n));var i=Object.create(e,Hn.b);return i.source=e,i.subjectFactory=r,i}}var $n=function(){function t(t,n){this.subjectFactory=t,this.selector=n}return t.prototype.call=function(t,n){var e=this.selector,r=this.subjectFactory(),i=e(r).subscribe(t);return i.add(n.subscribe(r)),i},t}(),Xn=e(61);function Gn(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return 1===t.length&&Object(U.a)(t[0])&&(t=t[0]),function(n){return n.lift(new Zn(t))}}var Zn=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,n){return n.subscribe(new Kn(t,this.nextSources))},t}(),Kn=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.nextSources=e,r}return r.a(n,t),n.prototype.notifyError=function(){this.subscribeToNextSource()},n.prototype.notifyComplete=function(){this.subscribeToNextSource()},n.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},n.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},n.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var n=new i.a(this),e=this.destination;e.add(n);var r=Object(i.c)(t,n);r!==n&&e.add(r)}else this.destination.complete()},n}(i.b);function Jn(){return function(t){return t.lift(new Qn)}}var Qn=function(){function t(){}return t.prototype.call=function(t,n){return n.subscribe(new te(t))},t}(),te=function(t){function n(n){var e=t.call(this,n)||this;return e.hasPrev=!1,e}return r.a(n,t),n.prototype._next=function(t){var n;this.hasPrev?n=[this.prev,t]:this.hasPrev=!0,this.prev=t,n&&this.destination.next(n)},n}(p.a),ne=e(70);function ee(t,n){return function(e){return[Object(jt.a)(t,n)(e),Object(jt.a)(Object(ne.a)(t,n))(e)]}}function re(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.length;if(0===e)throw new Error("list of properties cannot be empty.");return function(n){return Object(Kt.a)(ie(t,e))(n)}}function ie(t,n){return function(e){for(var r=e,i=0;i<n;i++){var o=null!=r?r[t[i]]:void 0;if(void 0===o)return;r=o}return r}}var oe=e(5);function ue(t){return t?Yn((function(){return new oe.a}),t):Yn(new oe.a)}var ae=e(62);function ce(t){return function(n){return Yn(new ae.a(t))(n)}}var fe=e(29);function se(){return function(t){return Yn(new fe.a)(t)}}var le=e(45);function he(t,n,e,r){e&&"function"!=typeof e&&(r=e);var i="function"==typeof e?e:void 0,o=new le.a(t,n,r);return function(t){return Yn((function(){return o}),i)(t)}}var de=e(63);function pe(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return 1===t.length&&Object(U.a)(t[0])&&(t=t[0]),n.lift.call(de.a.apply(void 0,[n].concat(t)))}}function ve(t){return void 0===t&&(t=-1),function(n){return 0===t?Object(Ft.b)():t<0?n.lift(new ye(-1,n)):n.lift(new ye(t-1,n))}}var ye=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new be(t,this.count,this.source))},t}(),be=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.a(n,t),n.prototype.complete=function(){if(!this.isStopped){var n=this.source,e=this.count;if(0===e)return t.prototype.complete.call(this);e>-1&&(this.count=e-1),n.subscribe(this._unsubscribeAndRecycle())}},n}(p.a);function ge(t){return function(n){return n.lift(new _e(t))}}var _e=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new me(t,this.notifier,n))},t}(),me=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.a(n,t),n.prototype.notifyNext=function(){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},n.prototype.notifyComplete=function(){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},n.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next(void 0)}},n.prototype._unsubscribe=function(){var t=this.notifications,n=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=void 0),n&&(n.unsubscribe(),this.retriesSubscription=void 0),this.retries=void 0},n.prototype._unsubscribeAndRecycle=function(){var n=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=n,this},n.prototype.subscribeToRetries=function(){var n;this.notifications=new oe.a;try{n=(0,this.notifier)(this.notifications)}catch(n){return t.prototype.complete.call(this)}this.retries=n,this.retriesSubscription=Object(i.c)(n,new i.a(this))},n}(i.b);function xe(t){return void 0===t&&(t=-1),function(n){return n.lift(new we(t,n))}}var we=function(){function t(t,n){this.count=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Me(t,this.count,this.source))},t}(),Me=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.count=e,i.source=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,n);r>-1&&(this.count=r-1),e.subscribe(this._unsubscribeAndRecycle())}},n}(p.a);function Se(t){return function(n){return n.lift(new ke(t,n))}}var ke=function(){function t(t,n){this.notifier=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new Ae(t,this.notifier,this.source))},t}(),Ae=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.notifier=e,i.source=r,i}return r.a(n,t),n.prototype.error=function(n){if(!this.isStopped){var e=this.errors,r=this.retries,o=this.retriesSubscription;if(r)this.errors=void 0,this.retriesSubscription=void 0;else{e=new oe.a;try{r=(0,this.notifier)(e)}catch(n){return t.prototype.error.call(this,n)}o=Object(i.c)(r,new i.a(this))}this._unsubscribeAndRecycle(),this.errors=e,this.retries=r,this.retriesSubscription=o,e.next(n)}},n.prototype._unsubscribe=function(){var t=this.errors,n=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=void 0),n&&(n.unsubscribe(),this.retriesSubscription=void 0),this.retries=void 0},n.prototype.notifyNext=function(){var t=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=t,this.source.subscribe(this)},n}(i.b),Ce=e(44);function Ee(t){return function(n){return n.lift(new Te(t))}}var Te=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new Ne(t),r=n.subscribe(e);return r.add(Object(i.c)(this.notifier,new i.a(e))),r},t}(),Ne=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.hasValue=!1,n}return r.a(n,t),n.prototype._next=function(t){this.value=t,this.hasValue=!0},n.prototype.notifyNext=function(){this.emitValue()},n.prototype.notifyComplete=function(){this.emitValue()},n.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},n}(i.b);function Oe(t,n){return void 0===n&&(n=c.a),function(e){return e.lift(new je(t,n))}}var je=function(){function t(t,n){this.period=t,this.scheduler=n}return t.prototype.call=function(t,n){return n.subscribe(new Ie(t,this.period,this.scheduler))},t}(),Ie=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.period=e,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Pe,e,{subscriber:i,period:e})),i}return r.a(n,t),n.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},n.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},n}(p.a);function Pe(t){var n=t.subscriber,e=t.period;n.notifyNext(),this.schedule(t,e)}function Re(t,n){return function(e){return e.lift(new Le(t,n))}}var Le=function(){function t(t,n){this.compareTo=t,this.comparator=n}return t.prototype.call=function(t,n){return n.subscribe(new ze(t,this.compareTo,this.comparator))},t}(),ze=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.compareTo=e,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(e.subscribe(new Fe(n,i))),i}return r.a(n,t),n.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},n.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},n.prototype.checkValues=function(){for(var t=this._a,n=this._b,e=this.comparator;t.length>0&&n.length>0;){var r=t.shift(),i=n.shift(),o=!1;try{o=e?e(r,i):r===i}catch(t){this.destination.error(t)}o||this.emit(!1)}},n.prototype.emit=function(t){var n=this.destination;n.next(t),n.complete()},n.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},n.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},n}(p.a),Fe=function(t){function n(n,e){var r=t.call(this,n)||this;return r.parent=e,r}return r.a(n,t),n.prototype._next=function(t){this.parent.nextB(t)},n.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},n.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},n}(p.a);function Be(){return new oe.a}function De(){return function(t){return Object(Ce.a)()(Yn(Be)(t))}}function Ue(t,n,e){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:n,refCount:!1,scheduler:e},function(t){return t.lift(function(t){var n,e,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,u=void 0===o?Number.POSITIVE_INFINITY:o,a=t.refCount,c=t.scheduler,f=0,s=!1,l=!1;return function(t){var r;f++,!n||s?(s=!1,n=new le.a(i,u,c),r=n.subscribe(this),e=t.subscribe({next:function(t){n.next(t)},error:function(t){s=!0,n.error(t)},complete:function(){l=!0,e=void 0,n.complete()}})):r=n.subscribe(this),this.add((function(){f--,r.unsubscribe(),e&&!l&&a&&0===f&&(e.unsubscribe(),e=void 0,n=void 0)}))}}(r))}}function qe(t){return function(n){return n.lift(new Ve(t,n))}}var Ve=function(){function t(t,n){this.predicate=t,this.source=n}return t.prototype.call=function(t,n){return n.subscribe(new We(t,this.predicate,this.source))},t}(),We=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.source=r,i.seenValue=!1,i.index=0,i}return r.a(n,t),n.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},n.prototype._next=function(t){var n=this.index++;this.predicate?this.tryNext(t,n):this.applySingleValue(t)},n.prototype.tryNext=function(t,n){try{this.predicate(t,n,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},n.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new It.a)},n}(p.a);function He(t){return function(n){return n.lift(new Ye(t))}}var Ye=function(){function t(t){this.total=t}return t.prototype.call=function(t,n){return n.subscribe(new $e(t,this.total))},t}(),$e=function(t){function n(n,e){var r=t.call(this,n)||this;return r.total=e,r.count=0,r}return r.a(n,t),n.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},n}(p.a);function Xe(t){return function(n){return n.lift(new Ge(t))}}var Ge=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Ot.a}return t.prototype.call=function(t,n){return 0===this._skipCount?n.subscribe(new p.a(t)):n.subscribe(new Ze(t,this._skipCount))},t}(),Ze=function(t){function n(n,e){var r=t.call(this,n)||this;return r._skipCount=e,r._count=0,r._ring=new Array(e),r}return r.a(n,t),n.prototype._next=function(t){var n=this._skipCount,e=this._count++;if(e<n)this._ring[e]=t;else{var r=e%n,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},n}(p.a);function Ke(t){return function(n){return n.lift(new Je(t))}}var Je=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){return n.subscribe(new Qe(t,this.notifier))},t}(),Qe=function(t){function n(n,e){var r=t.call(this,n)||this;r.hasValue=!1;var o=new i.a(r);r.add(o),r.innerSubscription=o;var u=Object(i.c)(e,o);return u!==o&&(r.add(u),r.innerSubscription=u),r}return r.a(n,t),n.prototype._next=function(n){this.hasValue&&t.prototype._next.call(this,n)},n.prototype.notifyNext=function(){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},n.prototype.notifyComplete=function(){},n}(i.b);function tr(t){return function(n){return n.lift(new nr(t))}}var nr=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,n){return n.subscribe(new er(t,this.predicate))},t}(),er=function(t){function n(n,e){var r=t.call(this,n)||this;return r.predicate=e,r.skipping=!0,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){var n=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||n.next(t)},n.prototype.tryCallPredicate=function(t){try{var n=this.predicate(t,this.index++);this.skipping=Boolean(n)}catch(t){this.destination.error(t)}},n}(p.a);function rr(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t[t.length-1];return Object(_.a)(e)?(t.pop(),function(n){return Object(W.a)(t,n,e)}):function(n){return Object(W.a)(t,n)}}var ir=e(37),or=e(31),ur=function(t){function n(n,e,r){void 0===e&&(e=0),void 0===r&&(r=ir.a);var i=t.call(this)||this;return i.source=n,i.delayTime=e,i.scheduler=r,(!Object(or.a)(e)||e<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.a),i}return r.a(n,t),n.create=function(t,e,r){return void 0===e&&(e=0),void 0===r&&(r=ir.a),new n(t,e,r)},n.dispatch=function(t){var n=t.source,e=t.subscriber;return this.add(n.subscribe(e))},n.prototype._subscribe=function(t){var e=this.delayTime,r=this.source;return this.scheduler.schedule(n.dispatch,e,{source:r,subscriber:t})},n}(vt.a);function ar(t,n){return void 0===n&&(n=0),function(e){return e.lift(new cr(t,n))}}var cr=function(){function t(t,n){this.scheduler=t,this.delay=n}return t.prototype.call=function(t,n){return new ur(n,this.delay,this.scheduler).subscribe(t)},t}();function fr(t,n){return"function"==typeof n?function(e){return e.pipe(fr((function(e,r){return Object(q.a)(t(e,r)).pipe(Object(Kt.a)((function(t,i){return n(e,t,r,i)})))})))}:function(n){return n.lift(new sr(t))}}var sr=function(){function t(t){this.project=t}return t.prototype.call=function(t,n){return n.subscribe(new lr(t,this.project))},t}(),lr=function(t){function n(n,e){var r=t.call(this,n)||this;return r.project=e,r.index=0,r}return r.a(n,t),n.prototype._next=function(t){var n,e=this.index++;try{n=this.project(t,e)}catch(t){return void this.destination.error(t)}this._innerSub(n)},n.prototype._innerSub=function(t){var n=this.innerSubscription;n&&n.unsubscribe();var e=new i.a(this),r=this.destination;r.add(e),this.innerSubscription=Object(i.c)(t,e),this.innerSubscription!==e&&r.add(this.innerSubscription)},n.prototype._complete=function(){var n=this.innerSubscription;n&&!n.closed||t.prototype._complete.call(this),this.unsubscribe()},n.prototype._unsubscribe=function(){this.innerSubscription=void 0},n.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&t.prototype._complete.call(this)},n.prototype.notifyNext=function(t){this.destination.next(t)},n}(i.b);function hr(){return fr(hn.a)}function dr(t,n){return n?fr((function(){return t}),n):fr((function(){return t}))}function pr(t){return function(n){return n.lift(new vr(t))}}var vr=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new yr(t),r=Object(i.c)(this.notifier,new i.a(e));return r&&!e.seenValue?(e.add(r),n.subscribe(e)):e},t}(),yr=function(t){function n(n){var e=t.call(this,n)||this;return e.seenValue=!1,e}return r.a(n,t),n.prototype.notifyNext=function(){this.seenValue=!0,this.complete()},n.prototype.notifyComplete=function(){},n}(i.b);function br(t,n){return void 0===n&&(n=!1),function(e){return e.lift(new gr(t,n))}}var gr=function(){function t(t,n){this.predicate=t,this.inclusive=n}return t.prototype.call=function(t,n){return n.subscribe(new _r(t,this.predicate,this.inclusive))},t}(),_r=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.predicate=e,i.inclusive=r,i.index=0,i}return r.a(n,t),n.prototype._next=function(t){var n,e=this.destination;try{n=this.predicate(t,this.index++)}catch(t){return void e.error(t)}this.nextOrComplete(t,n)},n.prototype.nextOrComplete=function(t,n){var e=this.destination;Boolean(n)?e.next(t):(this.inclusive&&e.next(t),e.complete())},n}(p.a),mr=e(20),xr=e(24);function wr(t,n,e){return function(r){return r.lift(new Mr(t,n,e))}}var Mr=function(){function t(t,n,e){this.nextOrObserver=t,this.error=n,this.complete=e}return t.prototype.call=function(t,n){return n.subscribe(new Sr(t,this.nextOrObserver,this.error,this.complete))},t}(),Sr=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o._tapNext=mr.a,o._tapError=mr.a,o._tapComplete=mr.a,o._tapError=r||mr.a,o._tapComplete=i||mr.a,Object(xr.a)(e)?(o._context=o,o._tapNext=e):e&&(o._context=e,o._tapNext=e.next||mr.a,o._tapError=e.error||mr.a,o._tapComplete=e.complete||mr.a),o}return r.a(n,t),n.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},n.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},n.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},n}(p.a),kr={leading:!0,trailing:!1};function Ar(t,n){return void 0===n&&(n=kr),function(e){return e.lift(new Cr(t,!!n.leading,!!n.trailing))}}var Cr=function(){function t(t,n,e){this.durationSelector=t,this.leading=n,this.trailing=e}return t.prototype.call=function(t,n){return n.subscribe(new Er(t,this.durationSelector,this.leading,this.trailing))},t}(),Er=function(t){function n(n,e,r,i){var o=t.call(this,n)||this;return o.destination=n,o.durationSelector=e,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.a(n,t),n.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},n.prototype.send=function(){var t=this._hasValue,n=this._sendValue;t&&(this.destination.next(n),this.throttle(n)),this._hasValue=!1,this._sendValue=void 0},n.prototype.throttle=function(t){var n=this.tryDurationSelector(t);n&&this.add(this._throttled=Object(i.c)(n,new i.a(this)))},n.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},n.prototype.throttlingDone=function(){var t=this._throttled,n=this._trailing;t&&t.unsubscribe(),this._throttled=void 0,n&&this.send()},n.prototype.notifyNext=function(){this.throttlingDone()},n.prototype.notifyComplete=function(){this.throttlingDone()},n}(i.b);function Tr(t,n,e){return void 0===n&&(n=c.a),void 0===e&&(e=kr),function(r){return r.lift(new Nr(t,n,e.leading,e.trailing))}}var Nr=function(){function t(t,n,e,r){this.duration=t,this.scheduler=n,this.leading=e,this.trailing=r}return t.prototype.call=function(t,n){return n.subscribe(new Or(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Or=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.duration=e,u.scheduler=r,u.leading=i,u.trailing=o,u._hasTrailingValue=!1,u._trailingValue=null,u}return r.a(n,t),n.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(jr,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},n.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},n.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},n}(p.a);function jr(t){t.subscriber.clearThrottle()}var Ir=e(46);function Pr(t){return void 0===t&&(t=c.a),function(n){return Object(Ir.a)((function(){return n.pipe(On((function(n,e){var r=n.current;return{value:e,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),Object(Kt.a)((function(t){var n=t.current,e=t.last,r=t.value;return new Rr(r,n-e)})))}))}}var Rr=function(){return function(t,n){this.value=t,this.interval=n}}(),Lr=e(64);function zr(t,n,e){return void 0===e&&(e=c.a),function(r){var i=ft(t),o=i?+t-e.now():Math.abs(t);return r.lift(new Fr(o,i,n,e))}}var Fr=function(){function t(t,n,e,r){this.waitFor=t,this.absoluteTimeout=n,this.withObservable=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new Br(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Br=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;return u.absoluteTimeout=e,u.waitFor=r,u.withObservable=i,u.scheduler=o,u.scheduleTimeout(),u}return r.a(n,t),n.dispatchTimeout=function(t){var n=t.withObservable;t._unsubscribeAndRecycle(),t.add(Object(i.c)(n,new i.a(t)))},n.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(n.dispatchTimeout,this.waitFor,this))},n.prototype._next=function(n){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,n)},n.prototype._unsubscribe=function(){this.action=void 0,this.scheduler=null,this.withObservable=null},n}(i.b),Dr=e(43);function Ur(t,n){return void 0===n&&(n=c.a),zr(t,Object(Dr.a)(new Lr.a),n)}function qr(t){return void 0===t&&(t=c.a),Object(Kt.a)((function(n){return new Vr(n,t.now())}))}var Vr=function(){return function(t,n){this.value=t,this.timestamp=n}}();function Wr(t,n,e){return 0===e?[n]:(t.push(n),t)}function Hr(){return Rn(Wr,[])}function Yr(t){return function(n){return n.lift(new $r(t))}}var $r=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,n){var e=new Xr(t),r=n.subscribe(e);return r.closed||e.add(Object(i.c)(this.windowBoundaries,new i.a(e))),r},t}(),Xr=function(t){function n(n){var e=t.call(this,n)||this;return e.window=new oe.a,n.next(e.window),e}return r.a(n,t),n.prototype.notifyNext=function(){this.openWindow()},n.prototype.notifyError=function(t){this._error(t)},n.prototype.notifyComplete=function(){this._complete()},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t)},n.prototype._complete=function(){this.window.complete(),this.destination.complete()},n.prototype._unsubscribe=function(){this.window=null},n.prototype.openWindow=function(){var t=this.window;t&&t.complete();var n=this.destination,e=this.window=new oe.a;n.next(e)},n}(i.b);function Gr(t,n){return void 0===n&&(n=0),function(e){return e.lift(new Zr(t,n))}}var Zr=function(){function t(t,n){this.windowSize=t,this.startWindowEvery=n}return t.prototype.call=function(t,n){return n.subscribe(new Kr(t,this.windowSize,this.startWindowEvery))},t}(),Kr=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.destination=n,i.windowSize=e,i.startWindowEvery=r,i.windows=[new oe.a],i.count=0,n.next(i.windows[0]),i}return r.a(n,t),n.prototype._next=function(t){for(var n=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,e=this.destination,r=this.windowSize,i=this.windows,o=i.length,u=0;u<o&&!this.closed;u++)i[u].next(t);var a=this.count-r+1;if(a>=0&&a%n==0&&!this.closed&&i.shift().complete(),++this.count%n==0&&!this.closed){var c=new oe.a;i.push(c),e.next(c)}},n.prototype._error=function(t){var n=this.windows;if(n)for(;n.length>0&&!this.closed;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},n.prototype._unsubscribe=function(){this.count=0,this.windows=null},n}(p.a);function Jr(t){var n=c.a,e=null,r=Number.POSITIVE_INFINITY;return Object(_.a)(arguments[3])&&(n=arguments[3]),Object(_.a)(arguments[2])?n=arguments[2]:Object(or.a)(arguments[2])&&(r=Number(arguments[2])),Object(_.a)(arguments[1])?n=arguments[1]:Object(or.a)(arguments[1])&&(e=Number(arguments[1])),function(i){return i.lift(new Qr(t,e,r,n))}}var Qr=function(){function t(t,n,e,r){this.windowTimeSpan=t,this.windowCreationInterval=n,this.maxWindowSize=e,this.scheduler=r}return t.prototype.call=function(t,n){return n.subscribe(new ni(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n._numberOfNextedValues=0,n}return r.a(n,t),n.prototype.next=function(n){this._numberOfNextedValues++,t.prototype.next.call(this,n)},Object.defineProperty(n.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),n}(oe.a),ni=function(t){function n(n,e,r,i,o){var u=t.call(this,n)||this;u.destination=n,u.windowTimeSpan=e,u.windowCreationInterval=r,u.maxWindowSize=i,u.scheduler=o,u.windows=[];var a=u.openWindow();if(null!==r&&r>=0){var c={subscriber:u,window:a,context:null},f={windowTimeSpan:e,windowCreationInterval:r,subscriber:u,scheduler:o};u.add(o.schedule(ii,e,c)),u.add(o.schedule(ri,r,f))}else{var s={subscriber:u,window:a,windowTimeSpan:e};u.add(o.schedule(ei,e,s))}return u}return r.a(n,t),n.prototype._next=function(t){for(var n=this.windows,e=n.length,r=0;r<e;r++){var i=n[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},n.prototype._error=function(t){for(var n=this.windows;n.length>0;)n.shift().error(t);this.destination.error(t)},n.prototype._complete=function(){for(var t=this.windows;t.length>0;){var n=t.shift();n.closed||n.complete()}this.destination.complete()},n.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},n.prototype.closeWindow=function(t){t.complete();var n=this.windows;n.splice(n.indexOf(t),1)},n}(p.a);function ei(t){var n=t.subscriber,e=t.windowTimeSpan,r=t.window;r&&n.closeWindow(r),t.window=n.openWindow(),this.schedule(t,e)}function ri(t){var n=t.windowTimeSpan,e=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=e.openWindow(),u={action:this,subscription:null},a={subscriber:e,window:o,context:u};u.subscription=r.schedule(ii,n,a),this.add(u.subscription),this.schedule(t,i)}function ii(t){var n=t.subscriber,e=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),n.closeWindow(e)}function oi(t,n){return function(e){return e.lift(new ui(t,n))}}var ui=function(){function t(t,n){this.openings=t,this.closingSelector=n}return t.prototype.call=function(t,n){return n.subscribe(new ai(t,this.openings,this.closingSelector))},t}(),ai=function(t){function n(n,e,r){var i=t.call(this,n)||this;return i.openings=e,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=Object(E.a)(i,e,e)),i}return r.a(n,t),n.prototype._next=function(t){var n=this.contexts;if(n)for(var e=n.length,r=0;r<e;r++)n[r].window.next(t)},n.prototype._error=function(n){var e=this.contexts;if(this.contexts=null,e)for(var r=e.length,i=-1;++i<r;){var o=e[i];o.window.error(n),o.subscription.unsubscribe()}t.prototype._error.call(this,n)},n.prototype._complete=function(){var n=this.contexts;if(this.contexts=null,n)for(var e=n.length,r=-1;++r<e;){var i=n[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var n=t.length,e=-1;++e<n;){var r=t[e];r.window.unsubscribe(),r.subscription.unsubscribe()}},n.prototype.notifyNext=function(t,n,e,r,i){if(t===this.openings){var o=void 0;try{o=(0,this.closingSelector)(n)}catch(t){return this.error(t)}var u=new oe.a,a=new C.a,c={window:u,subscription:a};this.contexts.push(c);var f=Object(E.a)(this,o,c);f.closed?this.closeWindow(this.contexts.length-1):(f.context=c,a.add(f)),this.destination.next(u)}else this.closeWindow(this.contexts.indexOf(t))},n.prototype.notifyError=function(t){this.error(t)},n.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},n.prototype.closeWindow=function(t){if(-1!==t){var n=this.contexts,e=n[t],r=e.window,i=e.subscription;n.splice(t,1),r.complete(),i.unsubscribe()}},n}(T.a);function ci(t){return function(n){return n.lift(new fi(t))}}var fi=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,n){return n.subscribe(new si(t,this.closingSelector))},t}(),si=function(t){function n(n,e){var r=t.call(this,n)||this;return r.destination=n,r.closingSelector=e,r.openWindow(),r}return r.a(n,t),n.prototype.notifyNext=function(t,n,e,r,i){this.openWindow(i)},n.prototype.notifyError=function(t){this._error(t)},n.prototype.notifyComplete=function(t){this.openWindow(t)},n.prototype._next=function(t){this.window.next(t)},n.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},n.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},n.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},n.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var n=this.window;n&&n.complete();var e,r=this.window=new oe.a;this.destination.next(r);try{e=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=Object(E.a)(this,e))},n}(T.a);function li(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){var e;"function"==typeof t[t.length-1]&&(e=t.pop());var r=t;return n.lift(new hi(r,e))}}var hi=function(){function t(t,n){this.observables=t,this.project=n}return t.prototype.call=function(t,n){return n.subscribe(new di(t,this.observables,this.project))},t}(),di=function(t){function n(n,e,r){var i=t.call(this,n)||this;i.observables=e,i.project=r,i.toRespond=[];var o=e.length;i.values=new Array(o);for(var u=0;u<o;u++)i.toRespond.push(u);for(u=0;u<o;u++){var a=e[u];i.add(Object(E.a)(i,a,void 0,u))}return i}return r.a(n,t),n.prototype.notifyNext=function(t,n,e){this.values[e]=n;var r=this.toRespond;if(r.length>0){var i=r.indexOf(e);-1!==i&&r.splice(i,1)}},n.prototype.notifyComplete=function(){},n.prototype._next=function(t){if(0===this.toRespond.length){var n=[t].concat(this.values);this.project?this._tryProject(n):this.destination.next(n)}},n.prototype._tryProject=function(t){var n;try{n=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(n)},n}(T.a),pi=e(47);function vi(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return function(n){return n.lift.call(pi.b.apply(void 0,[n].concat(t)))}}function yi(t){return function(n){return n.lift(new pi.a(t))}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,